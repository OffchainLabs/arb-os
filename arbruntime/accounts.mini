//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;

import func bytearray_size(ba: ByteArray) -> uint;
import func tokens_getERC20template() -> address;
import func tokens_getERC721template() -> address;


type AccountStore = map<address, Account>

type Account = struct {
    addr: address,
    nextSeqNum: uint,
    ethBalance: uint,
    contractInfo: option<AccountContractInfo>,
}

type AccountContractInfo = struct {
    code: ByteArray,
    evmJumpTable: map<uint, func()>,
    startCodePoint: func(),
    storage: map<uint, uint>,
}

var globalAccountStore: AccountStore;   // needs to be initialized before use


public impure func accountStore_init() {   // This must be called first!
     if (unsafecast<any>(globalAccountStore) == null) {
        globalAccountStore = newmap<address, Account>;
    }   
}

public impure func getGlobalAccountStore() -> AccountStore {
    return globalAccountStore;
}

public impure func setGlobalAccountStore(acctStore: AccountStore) {
    globalAccountStore = acctStore;;
}

public func accountStore_get(acctStore: AccountStore, addr: address) -> Account {
    if let Some(acct) = acctStore[addr] {
        return acct;
    } else {
        return pristineAccount(addr);
    }
}

public func pristineAccount(addr: address) -> Account {
    return struct {
        addr: addr,
        nextSeqNum: 1,
        ethBalance: 0,
        contractInfo: None<AccountContractInfo>
    };
}

public func accountStore_set(
    acctStore: AccountStore, 
    addr: address, 
    acct: Account
) -> AccountStore {
    return acctStore with { [addr] = acct };
}


public func accountStore_destroyAndTransferBalance(
    acctStore: AccountStore,
    victimAddr: address,
    recipientAddr: address
) -> AccountStore {
    let victim = accountStore_get(acctStore, victimAddr);
    let recipient = accountStore_get(acctStore, recipientAddr);
    return acctStore
        with { [recipientAddr] = account_addBalance(recipient, victim.ethBalance) }
        with { [victimAddr] = pristineAccount(victimAddr) };
}

public func account_isEmpty(acct: Account) -> bool {
    return (acct.nextSeqNum == 1) && (acct.ethBalance == 0) && (acct.contractInfo == None<AccountContractInfo>);
}

public func account_checkAndIncrSeqNum(
    account: Account, 
    seqNumRecvd: uint
) -> option<Account> {
    // if seqNumRecvd has the expected value, increment seqNum in account and return true
    // else just return false
    let nextSeq = account.nextSeqNum;
    if (nextSeq == seqNumRecvd) {
        account = account with {
            nextSeqNum: nextSeq+1
        };
        return Some(account);
    } else {
        return None;
    }
}

public func account_getAddress(account: Account) -> address {
    return account.addr;
}

public func account_getStartCodePoint(account: Account) -> option<func()> {
    return Some((account.contractInfo?).startCodePoint);
}

public func account_getBalance(account: Account) -> uint {
    return account.ethBalance;
}

public func account_setBalance(account: Account, balance: uint) -> Account {
    return account with { ethBalance: balance };
}

public func account_addBalance(account: Account, balance: uint) -> Account {
    return account with { ethBalance: account.ethBalance + balance };
}

public func account_getEvmJumpTable(account: Account) -> option<map<uint, func()>> {
    return Some((account.contractInfo?).evmJumpTable);
}

public func account_fetchAndIncrSeqNum(account: Account) -> (uint, Account) {
    let ret = account.nextSeqNum;
    account = account with {
        nextSeqNum: ret+1
    };
    return (ret, account,);
}

public func accountStore_createAccountFromEvmCode(
    store: AccountStore,
    newAddr: address,
    code: ByteArray,
    evmJumpTable: map<uint, func()>,
    initCodePt: func(),
    storageMap: map<uint, uint>
) -> option<AccountStore> {
    let oldAcct = accountStore_get(store, newAddr);
    if (account_isEmpty(oldAcct)) {
        return Some(accountStore_set(
            store,
            newAddr,
            oldAcct with {
                contractInfo: Some(struct {
                    code: code,
                    evmJumpTable: evmJumpTable,
                    resumeCodePoint: initCodePt,
                    storage: storageMap,
                })
            }
        ));
    } else {
        return None;
    }
}

public func accountStore_createERC20(
    acctStore: AccountStore, 
    addr: address
) -> option<AccountStore> {
    // returns true iff success
    if (account_isEmpty(accountStore_get(acctStore, addr))) {
        acctStore = accountStore_cloneContract(
            acctStore, 
            tokens_getERC20template(), 
            addr
        )?;
        return Some(acctStore);
    } else {
        return None;
    }
}

public func accountStore_createERC721(
    acctStore: AccountStore,
    addr: address
) -> option<AccountStore> {
    // returns true iff success
    if (account_isEmpty(accountStore_get(acctStore, addr))) {
        acctStore = accountStore_cloneContract(
            acctStore,
            tokens_getERC721template(), 
            addr
        )?;
        return Some(acctStore);
    } else {
        return None;
    }
}

public func accountStore_cloneContract(
    acctStore: AccountStore,
    oldAddr: address, 
    newAddr: address
) -> option<AccountStore> {
    let oldAccount = accountStore_get(acctStore, oldAddr);
    let newAccount = oldAccount
        with { ethBalance: 0 }
        with { nextSeqNum: 1 }
        with { contractInfo: Some((oldAccount.contractInfo?) with { storage: newmap<uint, uint> }) };
    return Some(acctStore with { [newAddr] = newAccount });
}

public func account_getEthBalance(account: Account) -> uint {
    return account.ethBalance;
}

public func account_setEthBalance(account: Account, newBal: uint) -> Account {
    return account with { ethBalance: newBal };
}

public func account_addToEthBalance(account: Account, addition: uint) -> Account {
    return account with { ethBalance: account.ethBalance + addition };
}

public func account_deductFromEthBalance(account: Account, deduction: uint) -> option<Account> {
    if (account.ethBalance >= deduction) {
        return Some(
            account with { ethBalance: account.ethBalance-deduction }
        );
    } else {
        return None;
    }
}

// transfer eth; return None if insufficient funds
public func accountStore_transferEthBalance(
    acctStore: AccountStore,
    from: address, 
    to: address, 
    amount: uint
) -> option<AccountStore> {
    let fromAcct = accountStore_get(acctStore, from);
    if (fromAcct.ethBalance < amount) {
        return None;
    }
    let toAcct = accountStore_get(acctStore, to);
    acctStore = acctStore 
        with { [from] = fromAcct with { ethBalance: fromAcct.ethBalance - amount }}
        with { [to] = fromAcct with { ethBalance: toAcct.ethBalance + amount }};
    return Some(acctStore);
}

public func account_getAllStorage(account: Account) -> option<map<uint, uint>> {
    return Some((account.contractInfo?).storage);
}

public func account_getStorageCell(account: Account, cell: uint) -> option<uint> {
    if let Some(contents) = (account.contractInfo?).storage[cell] {
        return Some(contents);
    } else {
        return Some(0);
    }
}

public func account_setStorageCell(
    account: Account, 
    cell: uint, 
    value: uint
) -> option<Account> {
    let contractInfo = account.contractInfo?;
    return Some(account with {
        contractInfo: Some(contractInfo with {
            storage: contractInfo.storage with {
                [cell] = value
            }
        })
    });
}

public func account_getCodeSize(acct: Account) -> uint {
    if let Some(contractInfo) = acct.contractInfo {
        return bytearray_size(contractInfo.code);
    } else {
        return 0;
    }
}

public func account_getCode(acct: Account) -> option<ByteArray> {
    return Some((acct.contractInfo?).code);
}