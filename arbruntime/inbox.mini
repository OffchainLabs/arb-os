//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type Queue;
import func queue_new() -> Queue;
import func queue_isEmpty(q: Queue) -> bool;
import func queue_get(q: Queue) -> (Queue, any);
import func queue_put(q: Queue, val: any) -> Queue;

import type MarshalledBytes;

type MessageFromL1 = struct {
    blockHash: bytes32,
    timestamp: uint,
    blockNumber: uint,
    sender: address,
    msgData: MarshalledBytes
}

type Inbox = struct {
    queue: Queue,
    blockNum: uint,
    timestamp: uint,
}

var globalInbox: Inbox;

public impure func inbox_init() {
    globalInbox = struct {
        queue: queue_new(),
        blockNum: 0,
        timestamp: 0,
    };
}

public impure func inbox_get() -> MessageFromL1 {
    let inbox = globalInbox;
    while (queue_isEmpty(inbox.queue)) {
        inbox = getFromL1Inbox(inbox);
    }
    let (updatedQ, ret,) = queue_get(inbox.queue);
    let ebMsg = unsafecast<MessageFromL1>(ret);

    if (inbox.blockNum < ebMsg.blockNumber) {
        inbox = inbox with { blockNum: ebMsg.blockNumber };
    }
    if (inbox.timestamp < ebMsg.timestamp) {
        inbox = inbox with { timestamp: ebMsg.timestamp };
    }
    globalInbox = inbox with { queue: updatedQ };

    return ebMsg;
}

type InboxCell = struct {
    rest: any,   // really an InboxCell, but language doesn't allow recursive types
    msg: any,
}

impure func getFromL1Inbox(inbox: Inbox) -> Inbox {
    let newMsgs = asm(0,) InboxCell { inbox };
    inbox = addInboxToQueue(inbox, newMsgs);
    return inbox;
}

func addInboxToQueue(inbox: Inbox, newMsgs: InboxCell) -> Inbox {
    if (unsafecast<any>(newMsgs) == null) {
        return inbox;
    } else {
        inbox = addInboxToQueue(inbox, unsafecast<InboxCell>(newMsgs.rest));
        let qp = queue_put(inbox.queue, newMsgs.msg);
        return inbox with { queue: qp };
    }
}

public impure func inbox_currentTimestamp() -> uint {
    return globalInbox.timestamp;
}

public impure func inbox_currentBlockNumber() -> uint {
    return globalInbox.blockNum;
}
