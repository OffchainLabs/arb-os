name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - develop

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings

jobs:
  rustfmt:
    name: Rust formatting check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
          
  test:
    name: Test with ${{ matrix.rust }} rust on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        rust: [stable, nightly]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libasound2-dev libudev-dev build-essential pkg-config libssl-dev

      - name: Install rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: ${{ matrix.rust == 'nightly' && 'llvm-tools-preview' || '' }}

      - name: Install grcov if supported for rust ${{ matrix.rust }}
        uses: actions-rs/install@v0.1
        if: matrix.rust == 'nightly'
        with:
          crate: grcov
          version: latest
          use-tool-cache: true

      - name: Cache rust build products
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ matrix.rust }}-

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all

      - name: Set up code-coverage instrumentation if supported for rust ${{ matrix.rust }}
        if: matrix.rust == 'nightly'
        run: |
          echo LLVM_PROFILE_FILE="your_name-%p-%m.profraw" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
          echo RUSTFLAGS="-Zinstrument-coverage" >> $GITHUB_ENV
          echo RUSTDOCFLAGS="-Cpanic=abort" >> $GITHUB_ENV

      - name: Install npm dependencies
        run: |
          sudo npm install -g yarn && cd contracts && yarn install

      - name: Make and test ArbOS
        run: make clean && make -j ci compile_options="-w"

      - name: Check if ArbOS or replayTests changed
        run: git update-index --refresh && git diff-index HEAD --

      - name: Create code-coverage files if supported for rust ${{ matrix.rust }}
        if: matrix.rust == 'nightly'
        run: |
          grcov . --binary-path ./target/release/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        if: matrix.rust == 'nightly'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info,./lcov-mini.info
          fail_ci_if_error: true
          verbose: false

  wasm:
    name: Run Wasm test suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        rust: [stable]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libasound2-dev libudev-dev build-essential pkg-config libssl-dev

      - name: Install rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: ${{ matrix.rust == 'nightly' && 'llvm-tools-preview' || '' }}

      - name: Cache rust build products
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ matrix.rust }}-

      - name: Run test suite
        run: bash ./wasm-suite/run-tests.sh

  node:
    name: Node integration test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          # apt-get update && apt-get -y install sudo
          # sudo apt install -y software-properties-common curl git
          sudo add-apt-repository -y ppa:longsleep/golang-backports
          sudo apt-get install -y \
            autoconf automake cmake libboost-dev libboost-filesystem-dev libgmp-dev \
            librocksdb-dev libssl-dev libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev \
            liblz4-dev libzstd-dev libtool golang-go clang-format cmake
          sudo apt-get install librocksdb-dev
          #
          # If apt's rocksdb is ever out of date, we'll need to use the following
          #   git clone -b v6.11.4 https://github.com/facebook/rocksdb
          #   cd rocksdb && make shared_lib && sudo make install
          #
          curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v1.7.0/gotestsum_1.7.0_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
          # build wasmer
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          git clone https://github.com/wasmerio/wasmer
          cd wasmer
          git checkout ec36089cbf4a65b768501ba38f3d63baad6badf3
          export ENABLE_LLVM=0
          export RUSTFLAGS=
          make build-wasmer
          make build-capi
          make package-capi
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/include/wasmer
          sudo cp package/lib/* /usr/local/lib
          sudo cp package/include/* /usr/local/include/wasmer

      - name: Clone Arbitrum
        run: |
          git clone --recursive https://github.com/mrsmkl/arbitrum.git
          cd arbitrum
          git checkout mrsmkl/wasm-onestepproof
          git submodule update --init --recursive

      - name: Copy over this branch's ArbOS
        run: |
          rm -r arbitrum/packages/arb-os/*
          # We'd need `make testlogs` to generate these files
          #   cp -r testlogs/* arbitrum/packages/arb-avm-cpp/tests/arbos-cases/
          mv * arbitrum/packages/arb-os/ || true

      - name: Build Arbitrum
        run: |
          mkdir arbitrum/packages/arb-avm-cpp/build/
          cd $_
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo ldconfig
          make -j

      - name: Test Node's C++ Database
        run: |
          ./arbitrum/packages/arb-avm-cpp/build/bin/avm_tests

      - name: Test Node's Core
        run: |
          cd arbitrum/packages/arb-node-core/
          gotestsum --format testname

      - name: Test Node's RPC
        run: |
          cd arbitrum/packages/arb-rpc-node/
          gotestsum --format testname
