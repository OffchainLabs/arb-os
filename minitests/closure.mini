/*
 * Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
 */


var global: uint;

type Produce = closure(uint, uint) -> string;

view write throw func main() {
    asm(tests().1) { log };
}

view write throw func tests() -> string {

    let lambda = capture_2();

    if lambda(48, 96) != "Closures are so cool!" {
        return "Uh oh, closures don't work when passed around";
    }
    
    if lambda(48, 96) != lambda(48, 96) {
        return "Uh oh, closures are stateful";
    }
    
    lambda = capture_1(3);
    
    if lambda(1, 2) != "Capture count doesn't matter!" {
        return lambda(1, 2);
    } 
    
    test_global_capture()
}

throw func capture_2() -> Produce {
    
    // Checks that captures work as expected
    
    let a = 32;
    let b = (64, 128, "Closures are so cool!");

    let lambda = closure(arg1: uint, arg2: uint) -> string {
        
        let sum = arg1 + a;
        let mul = arg2 * b.0 + b.1;

        if sum != arg1 + 32 {
            return "a wasn't captured correctly";
        }
        if mul != arg2 * 64 + 128 {
            return "b wasn't captured correctly";
        }

        let (_, _, message) = b;

        message
    };

    if lambda(1024, 512) != "Closures are so cool!" {
        return error;
    }
    lambda
}

func capture_1(sum: uint) -> Produce {
    
    closure(arg1: uint, arg2: uint) -> string {
        if arg1 + arg2 == sum {
            "Capture count doesn't matter!"
        } else {
            "Uh oh, a wasn't 0"
        }
    }
}

view write func test_global_capture() -> string {
    
    global = 2;
    
    let saved_global = 2;
    let true_capture = closure() -> uint {
        saved_global
    };
    saved_global = 1024; // no longer the same
    
    let viewable = view closure() -> uint {
        global
    };
    
    if viewable() != 2 {
        return "Could not read a 2";
    }
    
    global = 4;
    
    if viewable() != 4 {
        return "Could not read a 4";
    }
    
    let writeable = write closure(new: uint) {
        global = new;
    };
    
    writeable(16);
    
    if viewable() != 16 {
        return "Could not read-write a 16";
    }
    
    let view_and_write = view write closure() {
        global = global + 1;
    };
    
    let loops = 0;
    writeable(0);
    
    while loops < 32 {
        view_and_write();
        loops = loops + 1;
    }
    
    if viewable() != 32 {
        return "Could not update global";
    }
    
    if true_capture() != saved_global / 512 {
        return "True global capture didn't work";
    }
    
    ""
}
