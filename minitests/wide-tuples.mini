/*
 * Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
 */


write func main() {
    
    if let Some(issue) = test_1() {
        asm(issue.1) { log };
    } else if let Some(issue) = test_2() {
        asm(issue.1) { log };
    } else {
        asm("".1) { log };
    }
}

func test_1() -> option<string> {
    
    let a = Some("uh oh, not replaced");
    
    a = (0, 1, 2, 3, 4, 5, 6, None, a).7;
    
    a
}


func test_2() -> option<string> {
    
    let result = "should be overwritten";
    let _ = result;
    
    let pair = (32, 64, "carry me");
    
    let sum = pair.0 + pair.1;
    
    if sum != 96 {
        return Some("dot doesn't work");
    }
    
    let (_, __, *result) = pair;
    
    if result != "carry me" {
        return Some("Did not let-assign correctly");
    }
    
    let (result) = (32, 32);
    
    if result != (32, 32) {
        return Some("Did not single-shadow correctly");
    }
    
    let super_wide = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "nest me :)");
    
    let result = super_wide.10;
    
    if result != "nest me :)" {
        return Some("Wide dot doesn't work");
    }
    
    let (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, result) = super_wide;
    
    let (*sum) = _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9;
    
    if sum != 45 || result != "nest me :)" {
        return Some("Wide let doesn't work");
    }
    
    None
}
