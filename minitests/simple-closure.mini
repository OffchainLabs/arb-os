
var global: uint;

type Produce = func(uint, uint) -> (uint, buffer);

write func main() {
	asm(tests().1) { log };
}

func tests() -> (uint, buffer) {

    let lambda = make_lambda();

    if (lambda(48, 96) != "Closures are so cool!") {
        return "Uh oh, closures don't work when passed around";
    }
    return "";
}

func make_lambda() -> Produce {
    
    let a = 1024;
    let b = 512;

    let lambda = closure(arg1: uint, arg2: uint) -> (uint, buffer) {
        // this lambda has no captures
        
        let _ = arg1 + arg2;
        let b = "Closures are so cool!";
        
        return b;
    };

    if (lambda(a, b) != "Closures are so cool!") {
        return error;
    }

    return lambda;
}
