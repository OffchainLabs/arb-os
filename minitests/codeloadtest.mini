//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

view write func main() {
	asm(tests(),) { log };
}

view write func tests() -> uint {
	let codept = loadFunc1();
    let res = unsafecast<func() -> uint>(codept)();
    if (res != 3) {
        return 1;
    }

    return 0;
}

view write func loadFunc1() -> func() {
    let ret = asm() func() { errcodept };

    ret = addInsn(0x34, ret);    // jump
    ret = addInsnImm(0x43, 3, ret);  // [3] swap1

    return ret;
}

view write func addInsn(op: uint, codept: func()) -> func() {
    return asm(op, codept) func() { pushinsn };
}

view write func addInsnImm(op: uint, imm: any, codept: func()) -> func() {
    return asm(op, imm, codept) func() { pushinsnimm };
}