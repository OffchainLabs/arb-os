//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use crate::compile::ast::{TopLevelDecl, TypeDecl, FuncDecl, GlobalVarDecl, ImportFuncDecl, ImportTypeDecl, Type,
StructField, FuncArg, Statement, StatementKind, DebugInfo, MatchPattern, IfArm, Expr, BinaryOp, UnaryOp, Constant,
OptionConst, FieldInitializer, new_func_arg, new_type_decl};
use crate::stringtable::{StringTable, StringId};
use crate::compile::Lines;
use crate::pos::BytePos;
use crate::mavm::{Value, Instruction, Opcode};
use crate::uint256::Uint256;


grammar(stringtable: &mut StringTable, file_info: &Lines, filename: u64);

pub Decls: Vec<TopLevelDecl> = {
	<i:ImportDecl*> <n:NonImportDecl+> => TopLevelDecl::concat_vecs(i, n),
}

ImportDecl: TopLevelDecl = {
	ImportFuncDecl => TopLevelDecl::ImpFuncDecl(<>),
	ImportTypeDecl => TopLevelDecl::ImpTypeDecl(<>),	
}

ImportFuncDecl: ImportFuncDecl = {
	"import" <imp: "impure"?> "func" <i:Ident> "(" <fa:FuncArgs> ")" <t: ("->" <Type>)?> ";" => ImportFuncDecl::new(i, imp.is_some(), fa, t.unwrap_or(Type::Void)),
}

ImportTypeDecl: ImportTypeDecl = {
	"import" "type" <Ident> ";" => ImportTypeDecl::new(<>),
}

NonImportDecl: TopLevelDecl = {
	TypeDecl => TopLevelDecl::TypeDecl(<>),
	FuncDecl => TopLevelDecl::FuncDecl(<>),
	GlobalVarDecl => TopLevelDecl::VarDecl(<>),
}

TypeDecl: TypeDecl = {
	"type" <Ident> "=" <Type> => new_type_decl(<>),
}

FuncDecl: FuncDecl = {
	<lno: @L> <p: "public"?> <imp: "impure"?> "func" <i:Ident> "(" <fa:FuncArgs> ")" <t: ("->" <Type>)?> <cb:CodeBlock> =>
	        FuncDecl::new(i, imp.is_some(), fa, t.unwrap_or(Type::Void), cb, p.is_some(), file_info.location(BytePos::from(lno),filename)),
}

FuncArgs: Vec<FuncArg> = {
	<mut a: (<FuncArg> ",")*> <b: FuncArg?> => {if let Some(c) = b {a.push(c)};a},
}

FuncArg: FuncArg = {
	<i:Ident> ":" <t:Type> => new_func_arg(i, t),
}

GlobalVarDecl: GlobalVarDecl = {
	<lno: @L> "var" <i:Ident> ":" <t:Type> ";" => GlobalVarDecl::new(i, t, file_info.location(BytePos::from(lno),filename)),
}

CodeBlock: Vec<Statement> = {
	"{" <Statement*> "}" => <>
}

Statement: Statement = {
	<lno: @L> <kind:StatementKind> => Statement {kind, debug_info: DebugInfo { location: file_info.location(BytePos::from(lno), filename)}},
}

StatementKind: StatementKind = {
	"while" "(" <e: Expr> ")" <cb: CodeBlock> => StatementKind::While(e, cb),
	"loop" <cb: CodeBlock> => StatementKind::Loop(cb),
	"if" "let" "Some(" <l: Ident> ")" "=" <r:Expr> <t: CodeBlock> <e: ("else" <CodeBlock>)?> => StatementKind::IfLet(l,r,t,e),
	<lno: @L> "if" "(" <c: Expr> ")" <t: CodeBlock> <r: IfArm?> => StatementKind::If(IfArm::Cond(c, t, r.map(|m|Box::new(m)), file_info.location(BytePos::from(lno),filename))),
	"let" <p: MatchPattern> "=" <e: Expr> ";" => StatementKind::Let(p, e),
	<e: Expr> ";" => StatementKind::Expression(e),
	<i: Ident> "=" <e: Expr> ";" => StatementKind::Assign(i, e),
	"return" <e: Expr> ";" => StatementKind::Return(e),
	"return" ";" => StatementKind::ReturnVoid(),
	<lno: @L> "return" "None" ";" => StatementKind::Return(Expr::Constant(Constant::Option(OptionConst::None(Type::Every)),file_info.location(BytePos::from(lno),filename))),
	"panic" ";" => StatementKind::Panic(),
	"debug" "(" <e: Expr> ")" ";" => StatementKind::DebugPrint(e),
	"asm" "(" <a:CommaedExprs?> ")" "{" <body:AsmInsn*> "}" ";" => StatementKind::Asm(body, a.unwrap_or(vec![])),
	";" => StatementKind::Noop(),
}

MatchPattern: MatchPattern = {
	<Ident> => MatchPattern::Simple(<>),
	"(" <CommaedMatchPatterns> ")" => MatchPattern::Tuple(<>),
}

CommaedMatchPatterns: Vec<MatchPattern> = {
	<mut a: ( <MatchPattern> "," )+> <b: MatchPattern?> => {if let Some(c) = b {a.push(c)}a},
}

IfArm: IfArm = {
	<lno: @L> "else" <cb: CodeBlock> => IfArm::Catchall(cb, file_info.location(BytePos::from(lno), filename)),
	<lno: @L> "elseif" "(" <c: Expr> ")" <cb: CodeBlock> <r: IfArm?> => IfArm::Cond(c, cb, r.map(|m| Box::new(m)), file_info.location(BytePos::from(lno),filename)),
}

StructFields: Vec<StructField> = {
	<mut a: (<StructField> ",")*> <b: StructField> ","? => {a.push(b);a},
}

StructField: StructField = {
	<Ident> ":" <Type> => StructField::new(<>),
}

Type: Type = {
	"uint" => Type::Uint,
	"int" => Type::Int,
	"bool" => Type::Bool,
	"bytes32" => Type::Bytes32,
	"address" => Type::EthAddress,
	"struct" "{" <StructFields> "}" => Type::Struct(<>),
	<CommaedTypesInParens> => Type::Tuple(<>),
	"[" "]" <Type> => Type::Array(Box::new(<>)),
	"[" <s:UnsignedInteger> "]" <t:Type> => Type::FixedArray(
		Box::new(t), 
		s.to_usize().unwrap(),
	),
	"map" "<" <t1:Type> "," <t2:Type> ","? ">" => Type::Map(Box::new(t1), Box::new(t2)),
	<i: "impure"?> "func" <a: CommaedTypesInParens> <r: ("->" <Type>)?> => Type::Func(i.is_some(), a, Box::new(r.unwrap_or(Type::Void))),
	"any" => Type::Any,
	"option<" <t1:Type> ">" => Type::Option(Box::new(t1)),
	Ident => Type::Named(<>),
};

CommaedTypesInParens: Vec<Type> = {
	"(" ")" => vec![],
	"(" <CommaedTypes> ")" => <>,
}

CommaedTypes: Vec<Type> = {
	<mut t: (<Type> ",")*> <e: (Type)> ","? => {
        t.push(e);
        t
    },
};

Ident: StringId = {
	IdentString => stringtable.get(<>),
};

Expr: Expr = {
	<lno: @L> <t:Expr> "with" "{" "[" <i:Expr> "]" "=" <v:Expr> "}" => Expr::ArrayOrMapMod(
		Box::new(t), 
		Box::new(i), 
		Box::new(v),
		file_info.location(BytePos::from(lno),filename),
	),
	<lno: @L> <t: Expr> "with" "{" <i:Ident> ":" <e: Expr> "}" => Expr::StructMod(Box::new(t), i, Box::new(e), file_info.location(BytePos::from(lno),filename)),
	Expr1,
}

Expr1: Expr = {
	<lno: @L> <l:Expr1> "||" <r:Expr2> => Expr::ShortcutOr(Box::new(l), Box::new(r), file_info.location(BytePos::from(lno),filename)),
	Expr2,
};

Expr2: Expr = {
	<lno: @L> <l:Expr2> "&&" <r:Expr3> => Expr::ShortcutAnd(Box::new(l), Box::new(r), file_info.location(BytePos::from(lno),filename)),
	Expr3,
};

Expr3: Expr = {
	<lno: @L> <l:Expr3> <op: BinaryOpMidfix3> <r:Expr4> => Expr::new_binary(op, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr4,	
}

BinaryOpMidfix3: BinaryOp = {
	"<" => BinaryOp::LessThan,
	">" => BinaryOp::GreaterThan,
	"<=" => BinaryOp::LessEq,
	">=" => BinaryOp::GreaterEq,
	"==" => BinaryOp::Equal,
	"!=" => BinaryOp::NotEqual,
}

Expr4: Expr = {
	<lno: @L> <l:Expr4> "|" <r:Expr5> => Expr::new_binary(BinaryOp::BitwiseOr, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr5,
};

Expr5: Expr = {
	<lno: @L> <l:Expr5> "^" <r:Expr6> => Expr::new_binary(BinaryOp::BitwiseXor, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr6,
};

Expr6: Expr = {
	<lno: @L> <l:Expr6> "&" <r:Expr7> => Expr::new_binary(BinaryOp::BitwiseAnd, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr7,
};

Expr7: Expr = {
	<lno: @L> <l:Expr7> "+" <r:Expr8> => Expr::new_binary(BinaryOp::Plus, l, r, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <l:Expr7> "-" <r:Expr8> => Expr::new_binary(BinaryOp::Minus, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr8,
};

Expr8: Expr = {
	<lno: @L> <l:Expr8> "*" <r:Expr9> => Expr::new_binary(BinaryOp::Times, l, r, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <l:Expr8> "/" <r:Expr9> => Expr::new_binary(BinaryOp::Div, l, r, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <l:Expr8> "%" <r:Expr9> => Expr::new_binary(BinaryOp::Mod, l, r, file_info.location(BytePos::from(lno),filename)),
	Expr9,
};

Expr9: Expr = {
	<lno: @L> <e: Expr9> "?" => Expr::Try(Box::new(e), file_info.location(BytePos::from(lno),filename)),
	Expr10,
}

Expr10: Expr = {
	<lno: @L> "-" <e: Expr10> => Expr::new_unary(UnaryOp::Minus, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "!" <e: Expr10> => Expr::new_unary(UnaryOp::Not, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "~" <e: Expr10> => Expr::new_unary(UnaryOp::BitwiseNeg, e, file_info.location(BytePos::from(lno),filename)),
	Expr11,
};

Expr11: Expr = {
	<lno: @L> <c: Const> => Expr::Constant(c, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "Some(" <e: Expr> ")" => Expr::OptionInitializer(Box::new(e), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <f: Expr11> "(" <e: Expr> ")" => Expr::FunctionCall(Box::new(f), vec![e], file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <f: Expr11> "(" <c: CommaedExprs?> ")" => Expr::FunctionCall(Box::new(f), c.unwrap_or(vec![]), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <e1:Expr11> "[" <e2:Expr> "]" => Expr::ArrayOrMapRef(Box::new(e1), Box::new(e2), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <e:Expr11> "." <i:Ident> => Expr::DotRef(Box::new(e), i, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <e:Expr11> "." <u:UnsignedInteger> => Expr::TupleRef(Box::new(e), u, file_info.location(BytePos::from(lno),filename)),
	Expr12,
}

Expr12: Expr = {
	<lno: @L> "hash" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::Hash, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "hash" "(" <l:Expr> "," <r:Expr> ","? ")" => Expr::new_binary(BinaryOp::Hash, l, r, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "len" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::Len, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "uint" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToUint, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "int" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToInt, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "bytes32" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToBytes32, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "address" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToAddress, e, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "newarray" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::NewArray(Box::new(e), t, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "newfixedarray" "(" <s:UnsignedInteger> "," <e:Expr> ","? ")" => Expr::NewFixedArray(
		s.to_usize().unwrap(),
		Some(Box::new(e)),
		file_info.location(BytePos::from(lno),filename),
	),
	<lno: @L> "newfixedarray" "(" <s:UnsignedInteger> ")" => Expr::NewFixedArray(
		s.to_usize().unwrap(),
		None,
		file_info.location(BytePos::from(lno),filename),
	),
	<lno: @L> "newmap" "<" <k:Type> "," <v:Type> ","? ">" => Expr::NewMap(k, v, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "unsafecast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::UnsafeCast(Box::new(e), t, file_info.location(BytePos::from(lno),filename)),
	Expr13,
}

Expr13: Expr = {
	<lno: @L> "asm" "(" <a:CommaedExprs?> ")" <rt:Type> "{" <body:AsmInsn*> "}" => Expr::Asm(rt, body, a.unwrap_or(vec![]), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "struct" "{" <fi: FieldInitializers> "}" => Expr::StructInitializer(fi, file_info.location(BytePos::from(lno),filename)),
	"(" <e: Expr> ")" => <>,
	<lno: @L> "{" <cb: Statement*> <e: Expr?> "}" => Expr::CodeBlock(cb, e.map(|x| Box::new(x)), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "(" <c: CommaedExprs?> ")" => Expr::Tuple(c.unwrap_or(vec![]), file_info.location(BytePos::from(lno),filename)),
	<lno: @L> <i: Ident> => Expr::VariableRef(i, file_info.location(BytePos::from(lno),filename)),
}

Const: Constant = {
    <u: UnsignedInteger> => Constant::Uint(u),
	<s: SignedInteger> => Constant::Int(s),
	"None<" <t: Type> ">" => Constant::Option(OptionConst::None(t)),
	"false" => Constant::Bool(false),
	"true" => Constant::Bool(true),
	"null" => Constant::Null,
}

FieldInitializers: Vec<FieldInitializer> = {
	<mut l: (<FieldInitializer> ",")*> <f: FieldInitializer> ","? => {l.push(f);l},
}

FieldInitializer: FieldInitializer = {
	<Ident> ":" <Expr> => FieldInitializer::new(<>),
}

CommaedExprs: Vec<Expr> = {
	<mut c: (<Expr> ",")+> <e: (Expr)?> => {
    		if let Some(s) = e {
    		    c.push(s);
    		}
    		c
    	},
}

AsmInsn: Instruction = {
	<lno: @L> <o: AsmOpcode> => Instruction::from_opcode(o, file_info.location(BytePos::from(lno),filename)),
	<lno: @L> "[" <v:AsmVal> "]" <o:AsmOpcode> => Instruction::from_opcode_imm(o, v, file_info.location(BytePos::from(lno),filename)),
}

AsmOpcode: Opcode = {
	IdentStr => Opcode::from_name(<>),
}

AsmVal: Value = {
	<UnsignedInteger> => Value::Int(<>),
	"(" <mut l: (<AsmVal> ",")*> <v: AsmVal> ","? ")" => Value::new_tuple({l.push(v);l}),
}

IdentStr: &'input str = {
	r"[a-zA-Z_][a-zA-Z_01-9]*" => <>,
};

IdentString: String = {
	r"[a-zA-Z_][a-zA-Z_01-9]*" => <>.to_string(),
};

UnsignedInteger: Uint256 = {
	"0" => Uint256::from_usize(0),
	r"[1-9][0-9]*" => Uint256::from_string(<>).unwrap(),
	r"0x[0-9a-fA-F]+" => Uint256::from_string_hex(&<>[2..]).unwrap()
}

SignedInteger: Uint256 = {
	"0s" => Uint256::from_usize(0),
	r"[1-9][0-9]*s" => Uint256::from_signed_string(<>).unwrap(),
}
