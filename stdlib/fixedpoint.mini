//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

// This file implements fixed-point numbers, consisting of a numerator and denominator.
// Some operations can only be done on values that have the same denominator.
// We assume that num and denom will always be less than 2**128. If this is true, arithmetic will never overflow.

type FixedPoint = struct {
    val: uint,
    shiftFactor: uint,
}

public func fixedPoint_new(val: uint, shiftFactor: uint) -> FixedPoint {
    return struct {
        val: val,
        shiftFactor: shiftFactor,
    };
}

public func fixedPoint_zero() -> FixedPoint {
    return fixedPoint_new(0, 1);
}

public func fixedPoint_isZero(x: FixedPoint) -> bool {
    return x.val == 0;
}

public func fixedPoint_fromUintMatch(x: uint, fp: FixedPoint) -> FixedPoint {
    return fp with { val: x * fp.shiftFactor };
}

public func fixedPoint_getNum(x: FixedPoint) -> uint {
    return x.val;
}

public func fixedPoint_getDenom(x: FixedPoint) -> uint {
    return x.shiftFactor;
}

public func fixedPoint_equal(x: FixedPoint, y: FixedPoint) -> bool {
    return (x.val * y.shiftFactor) == (y.val * x.shiftFactor);
}

public func fixedPoint_compare(x: FixedPoint, y: FixedPoint) -> int {
    let xProd = x.val * y.shiftFactor;
    let yProd = y.val * x.shiftFactor;
    return xif (xProd > yProd) {    int(1)    }
    elseif(xProd == yProd) {    int(0)    }
    else {    -int(1)    };
}

public func fixedPoint_add(x: FixedPoint, y: FixedPoint) -> option<FixedPoint> {
    return xif (x.shiftFactor == y.shiftFactor) {
        Some(x with { val: x.val + y.val })
    } else {
        None<FixedPoint>
    };
}

public func fixedPoint_plusOne(x: FixedPoint) -> FixedPoint {
    return x with { val: x.val + x.shiftFactor };
}

public func fixedPoint_sub(x: FixedPoint, y: FixedPoint) -> option<FixedPoint> {
    return xif (x.shiftFactor == y.shiftFactor) {
        Some(x with { val: x.val - y.val })
    } else {
        None<FixedPoint>
    };
}

public func fixedPoint_mul(x: FixedPoint, y: FixedPoint) -> option<FixedPoint> {
    return xif (x.shiftFactor == y.shiftFactor) {
        Some(x with { val: (x.val * y.val) / x.shiftFactor })
    } else {
        None<FixedPoint>
    };
}

public func fixedPoint_mulByUint(x: FixedPoint, i: uint) -> FixedPoint {
    return x with { val: x.val * i };
}

public func fixedPoint_mulByUintTrunc(x: FixedPoint, i: uint) -> uint {
    return (x.val * i) / x.shiftFactor;
}

public func fixedPoint_div(x: FixedPoint, y: FixedPoint) -> option<FixedPoint> {
    return xif (x.shiftFactor == y.shiftFactor) {
        Some(x with { val: (x.val * x.shiftFactor) / y.val })
    } else {
        None<FixedPoint>
    };
}

public func fixedPoint_integerPart(x: FixedPoint) -> uint {
    return x.val / x.shiftFactor;
}

public func fixedPoint_fractionalPart(x: FixedPoint) -> FixedPoint {
    return x with { val: x.val % x.shiftFactor };
}