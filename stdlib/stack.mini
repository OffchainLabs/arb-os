//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

type Stack = option<StackCell>

type StackCell = struct {
    top: any,
    rest: option<any>   // really option<StackCell>, but compiler doesn't support recursive types
}


public func stack_new() -> Stack {
    return None<StackCell>;
}

public func stack_push(stack: Stack, value: any) -> Stack {
    return Some(struct {
        top: value,
        rest: stack
    });
}

public func stack_isEmpty(stack: Stack) -> bool {
    return stack == None<StackCell>;
}

public func stack_pop(stack: Stack) -> option<(Stack, any)> {
    let cell = stack?;
    return Some((
        unsafecast<Stack>(cell.rest),
        cell.top
    ));
}