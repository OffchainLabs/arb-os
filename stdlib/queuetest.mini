//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type Queue;

import func queue_new() -> Queue;
import func queue_isEmpty(q: Queue) -> bool;
import func queue_put(q: Queue, val: any) -> Queue;
import func queue_get(q: Queue) -> option<(Queue, any)>;
import func queue_peek(q: Queue) -> option<any>;
import func queue_discardOneIfNonempty(q: Queue) -> option<Queue>;


impure func main() {
    if let Some(res) = tests() {
	    asm(res,) { log };
	} else {
	    asm(1000,) { log };
	}
}

func tests() -> option<uint> {
	let q = queue_new();
	if ( ! queue_isEmpty(q)) {
		return Some(1);
	}

	q = queue_new();
	q = queue_put(q, 42);
	if (queue_isEmpty(q)) {
		return Some(2);
	} 

	q = queue_new();
	q = queue_put(q, 42);
	q = queue_put(q, 97);
	let pair = queue_get(q)?;
	if (pair.1 != 42) {
		return Some(3);
	}

	q = queue_new();
	let i = 0;
	while (i < 25) {
		q = queue_put(q, i);
		i = i+1;
	}
	i = 0;
	while (i < 21) {
		q = (queue_get(q)?).0;
		i = i+1;
	}
	if ((queue_get(q)?).1 != 21) {
		return Some(4);
	}

	q = queue_new();
	q = queue_put(q, 1);
	q = queue_put(q, 2);
	let q2 = q;
	if (queue_peek(q) != Some(unsafecast<any>(1))) {
	    return Some(5);
	}
	if let Some(q) = queue_discardOneIfNonempty(q) {
	    if (queue_get(q2) != Some((q, unsafecast<any>(1)))) {
            return Some(6);
        }
    } else {
        return Some(7);
    }

	q = queue_new();
	if (queue_peek(q) != None<any>) {
	    return Some(8);
	}
	if (queue_discardOneIfNonempty(q) != None<Queue>) {
	    return Some(9);
	}

	return Some(0);
}
