//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::stack::Stack;
use std::bytearray::ByteArray;
use std::bytestream::ByteStream;

use evmCallStack::evmCallStack_callHitError;

use std::bytestream::bytestream_getByte;
use std::bytestream::bytestream_getPartialWord;
use std::stack::stack_new;
use std::stack::stack_push;
use std::stack::stack_pop;

use evmOps::evmOp_return;

use precompiles::makeTrampoline;

use std::avmcodebuilder::AvmCodePoint;
use std::avmcodebuilder::pushInstruction;
use std::avmcodebuilder::pushInstructionImm;
use std::avmcodebuilder::pushValue;


type EvmInstruction = struct {
    opcode: uint,
    data: option<uint>,  // data to push, if it's a PUSH type instruction
    pc: uint,            // EVM program counter
};

type EvmInstructionStack = Stack;

func evmInstructionStack_new() -> EvmInstructionStack {
    return stack_new();
}

func evmInstructionStack_push(s: EvmInstructionStack, insn: EvmInstruction) -> EvmInstructionStack {
    return stack_push(s, insn);
}

func evmInstructionStack_pop(s: EvmInstructionStack) -> option<(EvmInstructionStack, EvmInstruction)> {
    let (us, item) = stack_pop(s)?;
    return Some((us, unsafecast<EvmInstruction>(item)));
}

var codeSegGlobals: struct {
    unreachableMask: uint,                // bit i is set iff EVM opcode i never allows execution to continue to the next instruction
    dummyAcceptContractCode: AvmCodePoint, // code for a contract that just immediately returns
};

// Given an EVM code segment, parse it into individual instructions, and push them onto an EvmInstructionStack
// Instructions that are definitely unreachable (== not possibly reachable) will not be pushed.
// An instruction is possibly reachable if:
//     * it is the first instruction in the program, or
//     * the previous instruction was possibly reachable and the previous instruction could allow execution to continue to its successor, or
//     * it is a JUMPDEST instruction
// The resulting stack will have the last instruction on top. This is desirable because code generation wants
//     to consume the instructions in reverse order.
view func parseEvmCodeSegment(bs: ByteStream) -> EvmInstructionStack {
    let stack = evmInstructionStack_new();
    let evmPc = 0;
    let reachable = true;   // true if the next instruction is reachable
    return xloop {
        if let Some(res) = bytestream_getByte(bs) {
            let (*bs, opcode) = res;
            if (opcode == const::EvmOpcode_jumpdest) {
                reachable = true;
            }

            if ((opcode >= const::EvmOpcode_push1) && (opcode <= const::EvmOpcode_push32)) {
                // it's a pushN instruction; unmarshal the immediate value and push it
                let bytesRemaining = opcode - (const::EvmOpcode_push1 - 1);
                let imm = xif let Some(res) = bytestream_getPartialWord(bs, bytesRemaining) {
                    let (*bs, v) = res;
                    v
                } else {
                    // code segment ended unexpectedly, so parse and push as many bytes as we can, per EVM spec
                    let val = 0;
                    while (bytesRemaining > 0) {
                        if let Some(res) = bytestream_getByte(bs) {
                            let (*bs, v) = res;
                            val = 256*val + v;
                        }
                        bytesRemaining = bytesRemaining-1;
                    }
                    val
                };
                if (reachable) {
                    stack = evmInstructionStack_push(
                        stack,
                        struct {
                            opcode: opcode,
                            data: Some(imm),
                            pc: evmPc,
                        }
                    );
                }
                evmPc = evmPc + (opcode - (const::EvmOpcode_push1 - 1)) + 1;
            } else {
                if (reachable) {
                    stack = evmInstructionStack_push(
                        stack,
                        struct {
                            opcode: opcode,
                            data: None<uint>,
                            pc: evmPc,
                        }
                    );
                }
                evmPc = evmPc + 1;
            }
            if ((codeSegGlobals.unreachableMask & (1 << opcode)) != 0) { reachable = false; }
        } else {
            return stack;
        }
    };
}

public view write func codeSegment_init() {
    let mask = 0;
    let opcode = 0;
    while (opcode < 256) {
        if (unreachableAfterOpcode(opcode)) {
            mask = mask | (1 << opcode);
        }
        opcode = opcode + 1;
    }

    codeSegGlobals = struct {
        unreachableMask: mask,
        dummyAcceptContractCode: makeTrampoline(dummyAcceptFunction),
    };
}

view write func dummyAcceptFunction() {
    evmOp_return(0, 0);
}

public view func getDummyAcceptContractCode() -> AvmCodePoint {
    return codeSegGlobals.dummyAcceptContractCode;
}

func unreachableAfterOpcode(opcode: uint) -> bool {
    return (opcode == 0x00)   // STOP
        || ((opcode >= 0x0c) && (opcode <= 0x0f))  // invalid
        || (opcode == 0x1e)  // invalid
        || (opcode == 0x1f)  // invalid
        || ((opcode >= 0x21) && (opcode <= 0x2f)) // invalid
        || ((opcode >= 0x48) && (opcode <= 0x4f)) // invalid
        || (opcode == 0x56)  // JUMP
        || ((opcode >= 0x5c) && (opcode <= 0x5f)) // invalid
        || ((opcode >= 0xa5) && (opcode <= 0xef)) // invalid
        || (opcode == 0xf3)  // RETURN
        || (opcode == 0xfd)  // REVERT
        || (opcode == 0xfe)  // INVALID
        || (opcode == 0xff); // SELFDESTRUCT
}

// Generate AVM code for a parsed EVM code segment.
// This builds an AVM code segment corresponding to the provided EVM code.
// The AVM code is build from back to front, starting with the last EVM instruction (which is on top of the insns stack).
#[noinline, ] view write func generateCodeForEvmSegment(
    insns: EvmInstructionStack,
    makePcTable: bool,
) -> (
    AvmCodePoint,              // entry point of the resulting code
    map<uint, AvmCodePoint>,   // for all EVM JUMPDESTs in the code, map the EVM PC to corresponding AVM codepoint
    Stack                      // PC table (if makePcTable is true)
) {
    // At the end of the generated code, add an EVM STOP instruction, so falling off the end of the EVM code
    //      behaves like an EVM STOP instruction, per the EVM spec.
    let code = pushEvmInsnCall(
        const::EvmOp_stop,
        asm() AvmCodePoint { errcodept },
    );
    let evmJumpTable = newmap<uint, AvmCodePoint>;
    let pcTable = stack_new();

    return xloop {
        if let Some(res) = evmInstructionStack_pop(insns) {
            let invalidInstruction = false;
            let (*insns, insn) = res;
            let opcode = insn.opcode;
            if (opcode < 0x80) {    // nested if/else structure is for efficiency, to avoid long if/elseif/else chain
                if (opcode < 0x40) {
                    if (opcode < 0x20) {
                        if (opcode < 0x10) {
                            if (opcode < 0x04) {
                                if (opcode == 0x00) { // STOP
                                    code = pushEvmInsnCall(const::EvmOp_stop, code);
                                } elseif (opcode == 0x01) { // ADD
                                    code = pushInstruction(const::AVM_add, code);
                                } elseif (opcode == 0x02) { // MUL
                                    code = pushInstruction(const::AVM_mul, code);
                                } elseif (opcode == 0x03) { // SUB
                                    code = pushInstruction(const::AVM_sub, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if ( (opcode >= 0x04) && (opcode <= 0x07) ) { // DIV, MOD, SDIV, SMOD
                                    code = pushEvmInsnDenomCheck(opcode, 2, code);
                                } elseif ( (opcode >= 0x08) && (opcode <= 0x09) ) { // ADDMOD, MULMOD
                                    code = pushEvmInsnDenomCheck(opcode, 3, code);
                                } elseif (opcode == 0x0a) { // EXP
                                    code = pushInstruction(const::AVM_exp, code);
                                } elseif (opcode == 0x0b) { // SIGNEXTEND
                                    code = pushInstruction(const::AVM_signextend, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if ( (opcode >= 0x10) && (opcode <= 0x1a) ) {
                                code = pushInstruction(opcode, code);
                            } elseif (opcode == 0x1b) { // SHL
                                code = pushInstruction(const::AVM_shl, code);
                            } elseif (opcode == 0x1c) { // SHR
                                code = pushInstruction(const::AVM_shr, code);
                            } elseif (opcode == 0x1d) { // SAR
                                code = pushInstruction(const::AVM_sar, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0x37 ) {
                            if (opcode < 0x33) {
                                if (opcode == 0x20) { // SHA3
                                    code = pushEvmInsnCall(const::EvmOp_sha3, code);
                                } elseif (opcode == 0x30) { // ADDRESS
                                    code = pushEvmInsnCall(const::EvmOp_address, code);
                                } elseif (opcode == 0x31) { // BALANCE
                                    code = pushEvmInsnCall(const::EvmOp_balance, code);
                                } elseif (opcode == 0x32) { // ORIGIN
                                    code = pushEvmInsnCall(const::EvmOp_origin, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x33) { // CALLER
                                    code = pushEvmInsnCall(const::EvmOp_caller, code);
                                } elseif (opcode == 0x34) { // CALLVALUE
                                    code = pushEvmInsnCall(const::EvmOp_callvalue, code);
                                } elseif (opcode == 0x35) { // CALLDATALOAD
                                    code = pushEvmInsnCall(const::EvmOp_calldataload, code);
                                } elseif (opcode == 0x36) { // CALLDATASIZE
                                    code = pushEvmInsnCall(const::EvmOp_calldatasize, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode < 0x3b) {
                                if (opcode == 0x37) { // CALLDATACOPY
                                    code = pushEvmInsnCall(const::EvmOp_calldatacopy, code);
                                } elseif (opcode == 0x38) { // CODESIZE
                                    code = pushEvmInsnCall(const::EvmOp_codesize, code);
                                } elseif (opcode == 0x39) { // CODECOPY
                                    code = pushEvmInsnCall(const::EvmOp_codecopy, code);
                                } elseif (opcode == 0x3a) { // GASPRICE
                                    code = pushEvmInsnCall(const::EvmOp_gasprice, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x3b) { // EXTCODESIZE
                                    code = pushEvmInsnCall(const::EvmOp_extcodesize, code);
                                } elseif (opcode == 0x3c) { // EXTCODECOPY
                                    code = pushEvmInsnCall(const::EvmOp_extcodecopy, code);
                                } elseif (opcode == 0x3d) { // RETURNDATASIZE
                                    code = pushEvmInsnCall(const::EvmOp_returndatasize, code);
                                } elseif (opcode == 0x3e) { // RETURNDATACOPY
                                    code = pushEvmInsnCall(const::EvmOp_returndatacopy, code);
                                } elseif (opcode == 0x3f) { // EXTCODEHASH
                                    code = pushEvmInsnCall(const::EvmOp_extcodehash, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        }
                    }
                } else {
                    if (opcode < 0x53) {
                        if (opcode < 0x45) {
                            if (opcode < 0x43) {
                                if (opcode == 0x40) { // BLOCKHASH
                                    code = pushEvmInsnCall(const::EvmOp_blockhash, code);
                                } elseif (opcode == 0x41) { // COINBASE
                                    code = pushValue(0, code);   // instruction doesn't make sense on L2, return a constant
                                } elseif (opcode == 0x42) { // TIMESTAMP
                                    code = pushEvmInsnCall(const::EvmOp_timestamp, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x43) { // NUMBER
                                    code = pushEvmInsnCall(const::EvmOp_number, code);
                                } elseif (opcode == 0x44) { // DIFFICULTY
                                     code = pushValue(2500000000000000, code);  // instruction doesn't make sense on L2, return a constant
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode == 0x45) { // GASLIMIT
                                code = pushEvmInsnCall(const::EvmOp_gaslimit, code);
                            } elseif (opcode == 0x46) { // CHAINID
                                code = pushEvmInsnCall(const::EvmOp_chainId, code);
                            } elseif (opcode == 0x47) { // SELFBALANCE
                                code = pushEvmInsnCall(const::EvmOp_selfbalance, code);
                            } elseif (opcode == 0x48) { // BASEFEE
                                code = pushEvmInsnCall(const::EvmOp_gasprice, code);
                            } elseif (opcode == 0x50) { // POP
                                code = pushInstruction(const::AVM_pop, code);
                            } elseif (opcode == 0x51) { // MLOAD
                                code = pushEvmInsnCall(const::EvmOp_mload, code);
                            } elseif (opcode == 0x52) { // MSTORE
                                code = pushEvmInsnCall(const::EvmOp_mstore, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } elseif (opcode < 0x60) {
                        if (opcode < 0x58) {
                            if (opcode < 0x56) {
                                if (opcode == 0x53) { // MSTORE8
                                    code = pushEvmInsnCall(const::EvmOp_mstore8, code);
                                } elseif (opcode == 0x54) { // SLOAD
                                    code = pushEvmInsnCall(const::EvmOp_sload, code);
                                } elseif (opcode == 0x55) { // SSTORE
                                    code = pushEvmInsnCall(const::EvmOp_sstore, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x56) { // JUMP
                                    // first translate destination EVM PC to AVM codepoint, then jump to that codepoint
                                    code = pushEvmInsnCall(
                                        const::EvmOp_getjumpaddr,
                                        pushInstruction(const::AVM_jump, code),
                                    );
                                } elseif (opcode == 0x57) { // JUMPI
                                    // conditional jump compiles to a little if/else structure
                                    //     if we're going to jump, act like a jump instruction
                                    //     else act like a pop instruction
                                    let doJump = pushEvmInsnCall(
                                        const::EvmOp_getjumpaddr,
                                        pushInstruction(const::AVM_jump, code),
                                    );
                                    code = pushInstruction(
                                        const::AVM_swap1,
                                        pushInstructionImm(
                                            const::AVM_cjump,
                                            doJump,
                                            pushInstruction(
                                                const::AVM_pop,
                                                pushInstructionImm(
                                                    const::AVM_jump,
                                                    code,
                                                    doJump,
                                                )
                                            )
                                        )
                                    );
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode == 0x58) {  // GETPC
                                code = pushValue(insn.pc, code);
                            } elseif (opcode == 0x59) { // MSIZE
                                code = pushEvmInsnCall(const::EvmOp_msize, code);
                            } elseif (opcode == 0x5a) { // GAS
                                code = pushEvmInsnCall(const::EvmOp_gas, code);
                            } elseif (opcode == 0x5b) { // JUMPDEST
                                evmJumpTable = evmJumpTable with { [insn.pc] = code };
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        // it's an EVM pushN instruction
                        if let Some(val) = insn.data {
                            code = pushValue(val, code);
                        } else {
                            // should never happen
                            evmCallStack_callHitError(23);
                        }
                    }
                }
            } else {
                if (opcode < 0xe1) {
                    if (opcode < 0xa0) {
                        if (opcode < 0x90) {
                            if (opcode == 0x80) {  // DUP1 -- note that DUPn in EVM corresponds to DUP(n-1) in AVM
                                code = pushInstruction(const::AVM_dup0, code);
                            } elseif (opcode == 0x81) {  // DUP2
                                code = pushInstruction(const::AVM_dup1, code);
                            } elseif (opcode == 0x82) {  // DUP3
                                code = pushInstruction(const::AVM_dup2, code);
                            } elseif ( (opcode >= 0x83) && (opcode <= 0x8f) ) {
                                code = pushDupn(opcode-0x80, code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0x90) {  // SWAP1
                                code = pushInstruction(const::AVM_swap1, code);
                            } elseif (opcode == 0x91) {  // SWAP2
                                code = pushInstruction(const::AVM_swap2, code);
                            } elseif ( (opcode >= 0x92) && (opcode <= 0x9f) ) {
                                code = pushSwapn(opcode-0x8f, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0xa3) {
                            if (opcode == 0xa0) { // LOG0
                                code = pushEvmInsnCall(const::EvmOp_log0, code);
                            } elseif (opcode == 0xa1) { // LOG1
                                code = pushEvmInsnCall(const::EvmOp_log1, code);
                            } elseif (opcode == 0xa2) { // LOG2
                                code = pushEvmInsnCall(const::EvmOp_log2, code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xa3) { // LOG3
                                code = pushEvmInsnCall(const::EvmOp_log3, code);
                            } elseif (opcode == 0xa4) { // LOG0
                                code = pushEvmInsnCall(const::EvmOp_log4, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                } else {
                    if (opcode < 0xf4) {
                        if (opcode == 0xf0) {  // CREATE
                            code = pushEvmInsnCall(const::EvmOp_create, code);
                        } elseif (opcode == 0xf1) { // CALL
                            code = pushEvmInsnCall(const::EvmOp_call, code);
                        } elseif (opcode == 0xf2) { // CALLCODE
                            code = pushEvmInsnCall(const::EvmOp_callcode, code);
                        } elseif (opcode == 0xf3) { // RETURN
                            code = pushEvmInsnCall(const::EvmOp_return, code);
                        } else {
                            invalidInstruction = true;
                        }
                    } else {
                        if (opcode < 0xfc) {
                            if (opcode == 0xf4) { // DELEGATECALL
                                code = pushEvmInsnCall(const::EvmOp_delegatecall, code);
                            } elseif (opcode == 0xf5) {  // CREATE2
                                code = pushEvmInsnCall(const::EvmOp_create2, code);
                            } elseif (opcode == 0xfa) { // STATICCALL
                                code = pushEvmInsnCall(const::EvmOp_staticcall, code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xfd) { // REVERT
                                // push the EVM PC, then use a version of revert that expects the PC
                                //     this will allow us to report the revert location in the tx receipt, to aid app debugging
                                code = pushValue(
                                    insn.pc,
                                    pushEvmInsnCall(const::EvmOp_revert_knownPc, code)
                                );
                            } elseif (opcode == 0xff) { // SELFDESTRUCT
                                code = pushEvmInsnCall(const::EvmOp_selfdestruct, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                }
            }
            if (invalidInstruction) {
                // invalid instruction is equivalent to a revert
                code = pushValue(
                    0,
                    pushValue(
                        0,
                        pushValue(
                            insn.pc,
                            pushEvmInsnCall(const::EvmOp_revert_knownPc, code)
                        )
                    )
                );
            }
            if (makePcTable) {
                pcTable = stack_push(pcTable, (insn.pc, hash(code)));
            }

            // uncomment the next three lines to check for non-integers on the stack between all EVM instructions
            // let (newCode, newEvmJumpTable) = validateStackAtRuntime(code, insn.pc, evmJumpTable);
            // code = newCode;
            // evmJumpTable = newEvmJumpTable;

            // uncomment the following line, to get a debugprint before every EVM instruction
            // code = pushInstructionImm(const::AVM_debugprint, (30000, insn.pc, insn.opcode), code);
        } else {
            return (code, evmJumpTable, pcTable);
        }
    };
}

view write func _validateStackAtRuntime(origCode: AvmCodePoint, pc: uint, jumpTable: map<uint, AvmCodePoint>) -> (AvmCodePoint, map<uint, AvmCodePoint>) {
    let baseSpecialPc = (asm(250, 1) uint { shl }) + pc*16;
    let l1 = baseSpecialPc + 1;
    let l2 = baseSpecialPc + 2;
    let l3 = baseSpecialPc + 3;
    let code = origCode;
    code = pushInstruction(0x73, code); // error
    code = pushInstruction(0x90, code); // debugprint
    code = pushInstructionImm(0x51, 1, code); // tset
    code = pushValue((7000, 0), code);
    jumpTable = jumpTable with { [l3] = code };
    code = pushInstructionImm(const::AVM_jump, origCode, code);
    code = pushInstruction(const::AVM_pop, code);
    code = pushInstruction(const::AVM_cjump, code);
    code = pushEvmInsnCall(const::EvmOp_getjumpaddr, code);
    code = pushValue(l2, code);
    code = pushInstructionImm(0x14, 0, code); // eq
    code = pushInstruction(0x21, code); // type
    code = pushInstruction(const::AVM_dup0, code);
    code = pushInstruction(const::AVM_auxpop, code);
    jumpTable = jumpTable with { [l2] = code };
    code = pushInstruction(const::AVM_cjump, code);
    code = pushEvmInsnCall(const::EvmOp_getjumpaddr, code);
    code = pushValue(l1, code);
    code = pushInstruction(0x15, code); // iszero
    code = pushInstruction(0x36, code); // stackempty
    code = pushInstruction(const::AVM_auxpush, code);
    if (false) {
        code = pushInstruction(0x19, code); // not
        code = pushInstruction(0x19, code); // not
    } elseif (true) {
        code = pushInstruction(const::AVM_cjump, code);
        code = pushEvmInsnCall(const::EvmOp_getjumpaddr, code);
        code = pushValue(l3, code);
        code = pushInstruction(0x21, code); // type
        code = pushInstruction(const::AVM_dup0, code);
    }
    jumpTable = jumpTable with { [l1] = code };
    code = pushInstructionImm(const::AVM_auxpush, (), code);
    code = pushInstructionImm(const::AVM_cjump, origCode, code);
    code = pushInstruction(0x36, code); // stackempty

    return (code, jumpTable);
}

public view write func translateEvmCodeSegment(
    bs: ByteStream,
    makePcTable: bool,
) -> (AvmCodePoint, map<uint, AvmCodePoint>, Stack) {
    return generateCodeForEvmSegment(parseEvmCodeSegment(bs), makePcTable);
}

view write func pushEvmInsnDenomCheck(
    opcode: uint,
    numStackOperands: uint,
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Deal with the EVM instructions that can "divide by zero" or the equivalent.
    // EVM defines these to return zero if the denominator/modulus is zero, but in AVM these cases are an error.
    // So we need to generate a little conditional to handle the special case.
    let doTheOp = pushInstruction(opcode, restOfCode);
    return pushDupn(
        numStackOperands-1,  // dup denominator/modulus to top of stack
        pushInstructionImm(
            const::AVM_cjump,  // jump to do the operation if the modulus/denominator is nonzero
            doTheOp,
            prependPops(  // modulus/denominator was zero, so pop the args and push a zero
                numStackOperands,
                pushValue(
                    0,
                    pushInstructionImm(
                        const::AVM_jump,
                        restOfCode,
                        doTheOp
                    )
                )
            )
        )
    );
}

view write func prependPops(numPops: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    while (numPops > 0) {
        restOfCode = pushInstruction(const::AVM_pop, restOfCode);
        numPops = numPops-1;
    }
    return restOfCode;
}

view write func pushDupn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a dupN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    // Note that N here uses the AVM semantics, which is off-by-one from the EVM semantics.
    return xif (n <= 2) {
        pushInstruction(0x40+n, restOfCode)  //dup_n
    } else {
        pushInstruction(
            const::AVM_auxpush,
            pushDupn(
                n-1,
                pushInstruction(
                    const::AVM_auxpop,
                    pushInstruction(
                        const::AVM_swap1,
                        restOfCode
                    )
                )
            )
        )
    };
}

view write func pushSwapn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a swapN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    return xif (n == 2) {
        pushInstruction(const::AVM_swap2, restOfCode)
    } else {
        pushInstruction(
            const::AVM_swap1,
            pushInstruction(
                const::AVM_auxpush,
                pushSwapn(
                    n-1,
                    pushInstruction(
                        const::AVM_auxpop,
                        pushInstruction(
                            const::AVM_swap1,
                            restOfCode
                        )
                    )
                )
            )
        )
    };
}

view write func pushEvmInsnCall(evmOpNum: uint, code: AvmCodePoint) -> AvmCodePoint {
    // Some EVM instructions compile to a procedure call to some Mini code.
    // These calls go indirectly through a dispatch function. The codepoint of the dispatch function is stored
    //     at a fixed location in the AVM Register.  So we will generate code to read the Register,
    //     extract the codepoint of the dispatch function from it, and jump to the dispatch function.
    // Note that the EVM code will already have put the args to the instruction on the stack,
    //     and the Mini code will leave the return value(s) of the instruction (if any) on the stack.
    return pushValue(
        evmOpNum,
        pushValue(
            code,
            pushInstruction(
                const::AVM_rpush,         // read the AVM Register
                pushInstructionImm(
                    const::AVM_tget,      // extract the codepoint of the dispatch function
                    0,
                    pushInstruction(
                        const::AVM_jump, // jump to the dispatch function
                        code,
                    ),
                ),
            ),
        ),
    );
}

