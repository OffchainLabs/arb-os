//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

type BoundedQueue = struct {
    capacity: uint,
    nextPut: uint,
    nextGet: uint,
    contents: []any,
};

public throw func boundedQueue_new(capacity: uint) -> BoundedQueue {
    struct {
        capacity: capacity,
        nextPut: 0,
        nextGet: 0,
        contents: newarray<any>(capacity),
    }
}

public func boundedQueue_isEmpty(q: BoundedQueue) -> bool {
    q.nextPut == q.nextGet
}

public func boundedQueue_isFull(q: BoundedQueue) -> bool {
    ((q.nextPut+1) % q.capacity) == q.nextGet
}

public func boundedQueue_size(q: BoundedQueue) -> uint {
    (q.nextPut + q.capacity - q.nextGet) % q.capacity
}

public throw func boundedQueue_put(q: BoundedQueue, val: any) -> BoundedQueue {
    if boundedQueue_isFull(q) {
        q
    } else {
        let putIndex = q.nextPut;
        q with { nextPut: (putIndex+1) % q.capacity }
          with { contents: q.contents with { [putIndex] = val } }
    }
}

public throw func boundedQueue_get(q: BoundedQueue) -> option<(BoundedQueue, any)> {
    if boundedQueue_isEmpty(q) {
        None
    } else {
        Some((
            q with { nextGet: (q.nextGet+1) % q.capacity }
              with { contents: q.contents with { [q.nextGet] = () } },
            q.contents[q.nextGet],
        ))
    }
}

public throw func boundedQueue_nth(q: BoundedQueue, n: uint) -> option<any> {
    if n < boundedQueue_size(q) {
        Some(q.contents[(q.nextGet + n) % q.capacity])
    } else {
        None
    }
}

public throw func boundedQueue_set_nth(q: BoundedQueue, n: uint, value: any) -> option<BoundedQueue> {
    if n < boundedQueue_size(q) {
        Some(q with { contents: q.contents with { [(q.nextGet + n) % q.capacity] = value } })
    } else {
        None
    }
}

public throw func boundedQueue_expand(q: BoundedQueue, newSize: uint) -> BoundedQueue {
    if newSize <= q.capacity {
        error;
    }
    let newQ = boundedQueue_new(newSize);
    while !boundedQueue_isEmpty(q) {
        if let Some(res) = boundedQueue_get(q) {
            q = res.0;
            newQ = boundedQueue_put(newQ, res.1);
        } else {
            error;
        }
    }
    newQ
}

type Queue = BoundedQueue;

public throw func queue_new() -> Queue {
    boundedQueue_new(8)
}

public func queue_isEmpty(q: Queue) -> bool {
    boundedQueue_isEmpty(q)
}

public func queue_size(q: Queue) -> uint {
    boundedQueue_size(q)
}

public throw func queue_put(q: Queue, val: any) -> Queue {
    if boundedQueue_isFull(q) {
        q = boundedQueue_expand(q, 2*q.capacity);
    }
    boundedQueue_put(q, val)
}

public throw func queue_get(q: Queue) -> option<(Queue, any)> {
    boundedQueue_get(q)
}

public throw func queue_getOrDie(q: Queue) -> (Queue, any) {
    if let Some(res) = queue_get(q) {
        res
    } else {
        error
    }
}

public throw func queue_nth(q: Queue, n: uint) -> option<any> {
    boundedQueue_nth(q, n)
}

public throw func queue_set_nth(q: Queue, n: uint, value: any) -> option<Queue> {
    boundedQueue_set_nth(q, n, value)
}

public throw func queue_discardOne(q: Queue) -> Queue {
    // return q with first item removed; if no first item, return it q unmodified
    if let Some(res) = queue_get(q) {
        res.0
    } else {
        q
    }
}

public throw func queue_map(q: Queue, clo: func(any, any) -> any, data: any) -> Queue {
    // for every item in q, calls clo(item, data) and builds a new queue of the return values
    let ret = queue_new();
    loop {
        if let Some(res) = queue_get(q) {
            let (uq, item) = res;
            q = uq;
            ret = queue_put(ret, clo(item, data));
        } else {
            return ret;
        }
    }
}

type QueueStack = option<QueueStackCell>;

type QueueStackCell = struct {
    head: Queue,
    rest: QueueStack,
};

public func queuestack_new() -> QueueStack {
    None
}

public func queuestack_push(qs: QueueStack, q: Queue) -> QueueStack {
    Some(struct {
        head: q,
        rest: queuestack_stripEmpties(qs),
    })
}

func queuestack_stripEmpties(qs: QueueStack) -> QueueStack {
    loop {
        if let Some(cell) = unsafecast<option<QueueStackCell> >(qs) {   // cast is safe but compiler doesn't know that
            if queue_isEmpty(cell.head) {
                qs = cell.rest;
            } else {
                return qs;
            }
        } else {
            return qs;
        }
    }
}

public throw func queuestack_get(qs: QueueStack) -> option<(QueueStack, any)> {
    loop {
        let cell = qs?;
        if let Some(res) = queue_get(cell.head) {
            let (uq, item) = res;
            return Some((
                queuestack_push(cell.rest, uq),
                item,
            ));
        } else {
            qs = cell.rest;
        }
    }
}
