//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_set256;

use std::random::RandomGenerator;
use std::random::random_next;


func modDigit(x: uint) -> uint {
    x & 0xffffffffffffffffffff
}

func divDigit(x: uint) -> uint {
    x >> 80
}

func mulDigit(x: uint) -> uint {
    x << 80
}

func realSize(x: []uint) -> uint {
    let reducedSize = len(x);
    while (reducedSize > 1) && (x[reducedSize-1] == 0) {
        reducedSize = reducedSize-1;
    }
    reducedSize
}

func shrinkToFit(x: []uint) -> []uint {
    let reducedSize = realSize(x);
    if reducedSize < len(x) {
        let ret = newarray<uint>(reducedSize);
        while reducedSize > 0 {
            reducedSize = reducedSize-1;
            set ret[reducedSize] = x[reducedSize];
        }
        ret
    } else {
        x
    }
}

func shiftPowerOfDigit(x: []uint, n: uint) -> []uint {
    let ret = newarray<uint>(len(x) + n);
    let i = len(x);
    while i > 0 {
        i = i-1;
        set ret[i+n] = x[i];
    }
    ret
}

public func biguint_zero() -> []uint {
    newarray<uint>(1) with { [0] = 0 }
}

public func biguint_one() -> []uint {
    newarray<uint>(1) with { [0] = 1 }
}

public func biguint_fromUint(x: uint) -> []uint {
    let ret = newarray<uint>(4);  // assume this will be big enough
    let i = 0;
    while x > 0 {
        set ret[i] = modDigit(x);
        x = divDigit(x);
        i = i+1;
    }
    ret
}

public func biguint_fromBytes(ba: ByteArray) -> []uint {
    let nbytes = bytearray_size(ba);
    let nwords = (nbytes+9) / 10;
    let ret = newarray<uint>(nwords);

    let w = 0;
    while w < nwords {
        let acc = 0;
        let bytesInThisWord = nbytes - 10*w;
        if (bytesInThisWord > 10) {    bytesInThisWord = 10;    }
        let i = 0;
        while i < bytesInThisWord {
            acc = acc * 256 + bytearray_getByte(ba, nbytes - 10*w - (bytesInThisWord-i));
            i = i+1;
        }
        set ret[w] = acc;
        w = w+1;
    }

    ret
}

public func biguint_toBytes(x: []uint) -> ByteArray {
    let nbytes = biguint_sizeBytes(x);
    let ndigits = (nbytes+9)/10;
    let ret = bytearray_new(0);

    let digit = ndigits;
    while digit > 0 {
        digit = digit-1;
        ret = bytearray_set256(ret, 10*((ndigits-1)-digit), x[digit] << (256-80));
    }

    if (nbytes%10) == 0 {
        bytearray_extract(ret, 0, nbytes)
    } else {
        bytearray_extract(ret, 10-(nbytes%10), nbytes)
    }
}

public func biguint_toUint(x: []uint) -> option<uint> {
    let lenx = len(x);
    if lenx > 4 {
        return None;
    }
    if (lenx == 4) && (x[3] >= (1<<16)) {
        return None;
    }

    return Some(
        if lenx > 3 {
            x[0] + mulDigit(x[1] + mulDigit(x[2] + mulDigit(x[3])))
        } else if lenx > 2 {
            x[0] + mulDigit(x[1] + mulDigit(x[2]))
        } else if lenx > 1 {
            x[0] + mulDigit(x[1])
        } else {
            x[0]
        }
    );
}

public func biguint_sizeBytes(x: []uint) -> uint {
    let lenDigits = realSize(x);
    if lenDigits == 0 {    return 0;    }
    let topWord = x[lenDigits-1];
    let lenBytes = 0;

    if topWord >= 0x10000000000 {
        lenBytes = lenBytes+5;
        topWord = topWord / 0x10000000000;
    }
    if topWord >= 0x10000 {
        lenBytes = lenBytes+2;
        topWord = topWord / 0x10000;
    }
    if topWord >= 0x10000 {
        lenBytes = lenBytes+2;
        topWord = topWord / 0x10000;
    }
    if topWord >= 0x100 {
        lenBytes = lenBytes+1;
        topWord = topWord / 0x100;
    }
    if topWord > 0 {
        lenBytes = lenBytes+1;
    }
    lenBytes + 10 * (lenDigits-1)
}

public func biguint_sizeBits(x: []uint) -> uint {
    let bytesSize = biguint_sizeBytes(x);
    if bytesSize == 0 {    return 0;    }

    let sz = 8 * (bytesSize - 1);
    let topByte = (x[((bytesSize+9)/10)-1] >> (8*(bytesSize%10))) & 0xff;
    if topByte >= 16 {
        sz = sz + 4;
        topByte = topByte / 16;
    }
    if topByte >= 4 {
        sz = sz + 2;
        topByte = topByte / 4;
    }
    if topByte >= 2 {
        sz = sz + 1;
        topByte = topByte / 2;
    }
    if topByte == 1 {
        sz = sz + 1;
    }
    sz
}

public func biguint_random(nwords: uint, gen: RandomGenerator) -> ([]uint, RandomGenerator) {
    let ret = newarray<uint>(nwords);
    while nwords > 0 {
        nwords = nwords - 1;
        let (*gen, val) = random_next(gen);
        set ret[nwords] = modDigit(uint(val));
    }
    (ret, gen)
}

public func biguint_marshal(x: []uint) -> any {
    let sz = realSize(x);
    let ret = unsafecast<any>(());
    let i = 0;
    while i < sz {
        ret = (x[i], ret);
        i = i+1;
    }
    ret
}

public func biguint_isZero(x: []uint) -> bool {
    let i = len(x);
    while i > 0 {
        i = i-1;
        if x[i] != 0 {
            return false;
        }
    }
    true
}

public func biguint_compare(x: []uint, y: []uint) -> int {
    let xSize = len(x);
    let ySize = len(y);
    let i = xSize;
    if ySize > xSize {  i = ySize;  }
    while i > 0 {
        i = i-1;
        if i >= xSize {
            if y[i] != 0 {    return -int(1);    }
        } else if i >= ySize {
            if x[i] != 0 {    return  int(1);    }
        } else {
            let xi = x[i];
            let yi = y[i];
            if      xi > yi {    return  int(1);    }
            else if xi < yi {    return -int(1);    }
        }
    }
    int(0)
}

public func biguint_equal(x: []uint, y: []uint) -> bool {
    biguint_compare(x, y) == int(0)
}

public func biguint_getBit(x: []uint, bnum: uint) -> uint {
    if bnum >= 80*len(x) {
        0
    } else {
        (x[bnum/80] >> (bnum%80)) & 1
    }
}

public func biguint_shiftLeft(x: []uint, n: uint) -> []uint {
    let numBytesBefore = biguint_sizeBytes(x);
    let numBytesAfter = numBytesBefore + (n+7)/8;
    let numWordsBefore = (numBytesBefore + 9) / 10;
    let numWordsAfter = (numBytesAfter + 9) / 10;
    let ret = newarray<uint>(numWordsAfter);

    let wordsToShift = n/80;
    let bitsToShift = n%80;

    let i = 0;
    let carry = 0;
    while i < numWordsBefore {
        carry = carry + (x[i] << bitsToShift);
        set ret[i+wordsToShift] = modDigit(carry);
        carry = divDigit(carry);
        i = i+1;
    }
    if carry > 0 {
        set ret[numWordsBefore+wordsToShift] = carry;
    }
    ret
}

public func biguint_shiftRight(x: []uint, n: uint) -> []uint {
    let numWordsBefore = realSize(x);
    let digitsToShift = n/80;
    if n%80 != 0 {
        x = biguint_shiftLeft(x, 80-(n%80));
        numWordsBefore = realSize(x);
        digitsToShift = 1+digitsToShift;
    }
    if digitsToShift >= numWordsBefore  {    return biguint_zero();    }
    let numWordsAfter = numWordsBefore-digitsToShift;
    let ret = newarray<uint>(numWordsAfter);
    let i = 0;
    while i < numWordsAfter {
        set ret[i] = x[i+digitsToShift];
        i = i+1;
    }
    ret
}

public func biguint_add(x: []uint, y: []uint) -> []uint {
    let xSize = realSize(x);
    let ySize = realSize(y);

    // ensure that xSize >= ySize, swapping if needed
    if xSize < ySize {
        let ts = xSize;   xSize = ySize;   ySize = ts;
        let t = x;   x = y;   y = t;
    }

    let ret = newarray<uint>(xSize+1);

    let carry = 0;
    let i = 0;
    while i < xSize {
        carry = x[i] + carry;
        if i < ySize {
            carry = carry + y[i];
        }
        set ret[i] = modDigit(carry);
        carry = divDigit(carry);
        i = i + 1;
    }

    set ret[xSize] = carry;
    ret
}

public func biguint_subtract(x: []uint, y: []uint) -> option<[]uint> {
    let comp = biguint_compare(x, y);
    if comp < int(0) {
        None
    } else if comp == int(0) {
        Some(biguint_zero())
    } else {
        let resSize = realSize(x);
        let ySize = realSize(y);
        let ret = newarray<uint>(resSize);
        let i = 0;
        let carry = int(0);
        while i < resSize {
            let t = int(x[i]) + carry;
            if i < ySize {
                t = t - int(y[i]);
            }
            if t >= int(0) {
                set ret[i] = uint(t);
                carry = int(0);
            } else {
                // intentional overflow
                set ret[i] = uint(t)+mulDigit(1);
                carry = -int(1);
            }
            i = i+1;
        }
        Some(ret)
    }
}

public func biguint_mul(x: []uint, y: []uint) -> []uint {
    let n = realSize(x)-1;
    let t = realSize(y)-1;

    let ret = newarray<uint>(n+t+2);

    let i = 0;
    while i <= t {
        let carry = 0;
        let j = 0;
        while j <= n {
            let uv = ret[i+j] + x[j]*y[i] + carry;
            carry = divDigit(uv);
            set ret[i+j] = modDigit(uv);
            j = j+1;
        }
        set ret[i+n+1] = carry;
        i = i+1;
    }

    ret
}

public func biguint_shortMul(x: []uint, y: uint) -> []uint {
    let xSize = realSize(x);
    let ret = newarray<uint>(xSize+1);
    let carry = 0;
    let i = 0;
    while i < xSize {
        carry = x[i] * y + carry;
        set ret[i] = modDigit(carry);
        carry = divDigit(carry);
        i = i+1;
    }
    set ret[xSize] = carry;
    ret
}

public func biguint_square(x: []uint) -> []uint {
    // based on Algorithm 14.16, page 597, Handbook of Applied Cryptography, http://cacr.uwaterloo.ca/hac/about/chap14.pdf
    let t = realSize(x);
    let ret = newarray<uint>(2*t);

    let i = 0;
    while i < t {
        let xi = x[i];
        let uv = ret[2*i] + xi*xi;
        set ret[2*i] = modDigit(uv);
        let c = divDigit(uv);
        let j = i+1;
        while j < t {
            uv = ret[i+j] + 2*x[j]*xi + c;
            set ret[i+j] = modDigit(uv);
            c = divDigit(uv);
            j = j+1;
        }
        set ret[i+t] = c;
        i = i+1;
    }

    ret
}

public func biguint_divmod(x: []uint, y: []uint) -> option<([]uint, []uint)> {
    // based on Algorithm 14.20, page 598, Handbook of Applied Cryptography, http://cacr.uwaterloo.ca/hac/about/chap14.pdf
    if biguint_isZero(y) {
        return None;
    } else if biguint_compare(x, y) < int(0) {
        return Some((biguint_zero(), x));
    } else if realSize(y) == 1 {
        let (quot, rem) = biguint_shortDivMod(x, y[0])?;
        return Some((quot, newarray<uint>(1) with { [0] = rem }));
    }

    let z = y[realSize(y)-1];
    let shiftBits = 0;
    while z < 0x80000000000000000000 {
        z = z+z;
        shiftBits = shiftBits+1;
    }
    x = biguint_shiftLeft(x, shiftBits);
    y = biguint_shiftLeft(y, shiftBits);

    let n = realSize(x)-1;
    let t = realSize(y)-1;
    let sizeDiff = n-t;
    let q = newarray<uint>(sizeDiff+1);

    let ybnt = shiftPowerOfDigit(y, sizeDiff);
    while biguint_compare(x, ybnt) >= int(0) {
        set q[sizeDiff] = 1 + q[sizeDiff];
        if let Some(diff) = biguint_subtract(x, ybnt) {
            x = diff;
        } else {
            error;
        }
    }

    let i = n;
    while i >= t+1 {
        set q[i-t-1] = if (x[i] == y[t]) {
            mulDigit(1)-1
        } else {
            (mulDigit(x[i]) + x[i-1]) / y[t]
        };
        while q[i-t-1]*(mulDigit(y[t])+y[t-1]) > mulDigit(mulDigit(x[i])+x[i-1])+x[i-2] {
            set q[i-t-1] = q[i-t-1]-1;
        }
        if let Some(diff) = biguint_subtract(
            x,
            shiftPowerOfDigit(
                biguint_mul(
                    newarray<uint>(1) with { [0] = q[i-t-1] },
                    y,
                ),
                i-t-1
            ),
        ) {
            x = diff;
        } else {
            set q[i-t-1] = q[i-t-1]-1;
            if let Some(diff) = biguint_subtract(
                x,
                shiftPowerOfDigit(
                    biguint_mul(
                        newarray<uint>(1) with { [0] = q[i-t-1] },
                        y,
                    ),
                    i-t-1
                ),
            ) {
                x = diff;
            } else {
                error;
            }
        }
        i = i-1;
    }
    Some((q, biguint_shiftRight(x, shiftBits)))
}

public func biguint_mod(x: []uint, y: []uint) -> option<[]uint> {
    // same as the divmod algorithm above, except we don't keep track of the quotient
    if biguint_isZero(y) {
        return None;
    } else if biguint_compare(x, y) < int(0) {
        return Some(x);
    } else if realSize(y) == 1 {
        return Some(newarray<uint>(1) with { [0] = biguint_shortMod(x, y[0])? });
    }

    let z = y[realSize(y)-1];
    let shiftBits = 0;
    while z < mulDigit(1)/2 {
        z = z+z;
        shiftBits = shiftBits+1;
    }
    x = biguint_shiftLeft(x, shiftBits);
    y = biguint_shiftLeft(y, shiftBits);

    let n = realSize(x)-1;
    let t = realSize(y)-1;
    let sizeDiff = n-t;

    let ybnt = shiftPowerOfDigit(y, sizeDiff);
    while biguint_compare(x, ybnt) >= int(0) {
        if let Some(diff) = biguint_subtract(x, ybnt) {
            x = diff;
        } else {
            error;
        }
    }

    let i = n;
    let qit1 = 0;
    while i >= t+1 {
        if x[i] == y[t] {
            qit1 = mulDigit(1)-1;
        } else {
            qit1 = (mulDigit(x[i]) + x[i-1]) / y[t];
        }
        while qit1*(mulDigit(y[t])+y[t-1]) > mulDigit(mulDigit(x[i])+x[i-1])+x[i-2] {
            qit1 = qit1-1;
        }
        if let Some(diff) = biguint_subtract(
            x,
            shiftPowerOfDigit(
                biguint_shortMul(y, qit1),
                i-t-1
            ),
        ) {
            x = diff;
        } else {
            qit1 = qit1-1;
            if let Some(diff) = biguint_subtract(
                x,
                shiftPowerOfDigit(
                    biguint_shortMul(y, qit1),
                    i-t-1
                ),
            ) {
                x = diff;
            } else {
                error;
            }
        }
        if x[i] != 0 { error; }
        i = i-1;
    }
    Some(biguint_shiftRight(x, shiftBits))
}

public func biguint_shortDivMod(x: []uint, y: uint) -> option<([]uint, uint)> {
    if y == 0 {    return None;    }

    let xSize = realSize(x);
    let quot = newarray<uint>(xSize);
    let carry = 0;
    let i = xSize;
    while i > 0 {
        i = i-1;
        carry = carry * 0x100000000000000000000 + x[i];
        set quot[i] = carry / y;
        carry = carry % y;
    }
    Some((quot, carry))
}

public func biguint_shortMod(x: []uint, m: uint) -> option<uint> {
    if m == 0 {    return None;    }

    let xSize = realSize(x);
    let digitMod = 0x100000000000000000000 % m;
    let ret = 0;
    let i = xSize;
    while i > 0 {
        i = i-1;
        ret = (ret * digitMod + x[i]) % m;
    }
    Some(ret)
}

public func biguint_modmul(x: []uint, y: []uint, m: []uint) -> option<[]uint> {
    biguint_mod(biguint_mul(x, y), m)
}

public func biguint_modexp(x: []uint, e: []uint, m: []uint) -> option<[]uint> {
    if biguint_isZero(m) {    return None;    }

    x = shrinkToFit(x);
    e = shrinkToFit(e);
    m = shrinkToFit(m);

    if let Some(um) = biguint_toUint(m) {
        if let Some(ux) = biguint_toUint(x) {
            if let Some(ue) = biguint_toUint(e) {
                return Some(shrinkToFit(biguint_fromUint(uint_modexp(ux, ue, um)?)));
            }
        }
    }

    let ret = biguint_one();
    let b = 8*biguint_sizeBytes(e);
    while b > 0 {
        b = b-1;
        ret = biguint_square(ret);
        ret = biguint_mod(ret, m)?;
        if (biguint_getBit(e, b) != 0) {
            ret = biguint_modmul(ret, x, m)?;
        }
    }
    Some(ret)
}

public func uint_modexp(x: uint, e: uint, m: uint) -> option<uint> {
    if m == 0 {
        return None;
    }
    if e == 0 {
        return Some(1);
    }
    let sub = uint_modexp(x, e/2, m)?;
    sub = asm(sub, sub, m) uint { mulmod };
    return Some(if (e%2) == 1 {
       asm(sub, x, m) uint { mulmod }
    } else {
        sub
    });
}
