//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::biguint::biguint_add;
use std::biguint::biguint_compare;
use std::biguint::biguint_divmod;
use std::biguint::biguint_equal;
use std::biguint::biguint_fromUint;
use std::biguint::biguint_isZero;
use std::biguint::biguint_mod;
use std::biguint::biguint_modmul;
use std::biguint::biguint_modexp;
use std::biguint::biguint_mul;
use std::biguint::biguint_random;
use std::biguint::biguint_square;
use std::biguint::biguint_subtract;
use std::biguint::biguint_zero;
use std::biguint::uint_modexp;

use std::random::RandomGenerator;
use std::random::random_new;
use std::random::random_next;
use std::random::random_nextMod;


write func main() {
    asm(2*1000*1000*1000) { setgas };
    asm(tests()) { log };
}

func tests() -> uint {
    let gen = random_new(bytes32(0));
    if ! biguint_isZero(biguint_zero()) {
        return 1;
    }

    let i = 0;
    while i < 20 {
        let (res, *gen) = doTests(gen);
        if res != 0 {    return 100*i + res;    }
        i = i+1;
    }

    0
}

func doTests(gen: RandomGenerator) -> (uint, RandomGenerator) {
    let (w, *gen) = biguint_random(5, gen);
    let (x, *gen) = biguint_random(6, gen);
    let (y, *gen) = biguint_random(4, gen);
    
    if biguint_compare(x, y) != int(1) {
        return (2, gen);
    }
    if biguint_compare(y, x) != -int(1) {
        return (3, gen);
    }
    if !biguint_equal(x, x) {
        return (4, gen);
    }
    if !biguint_equal(y, y) {
        return (5, gen);
    }

    let z = biguint_add(x,y);
    if biguint_compare(z, x) != int(1) {
        return (6, gen);
    }
    if let Some(diff) = biguint_subtract(biguint_add(x, y), y) {
        if !biguint_equal(diff, x) {
            return (7, gen);
        }
    } else {
        return (8, gen);
    }

    if biguint_compare(biguint_add(x,y), biguint_add(y,x)) != int(0) {
        return (9, gen);
    }
    if !biguint_equal(
        biguint_add(x, biguint_add(y, w)),
        biguint_add(biguint_add(x, y), w),
    ) {
        return (10, gen);
    }

    let z1 = biguint_add(
        biguint_mul(x, w),
        biguint_mul(x, y),
    );
    let z2 = biguint_mul(
        x,
        biguint_add(w, y),
    );
    if !biguint_equal(z1, z2) {
        return (11, gen);
    }

    if let Some(res) = biguint_divmod(x, y) {
        let (q, r) = res;
        if biguint_compare(q, y) != -int(1) {
            return (12, gen);
        }
        let x2 = biguint_add(biguint_mul(q, y), r);
        if !biguint_equal(x, x2) {
            return (13, gen);
        }
        if let Some(mod2) = biguint_mod(x, y) {
            if !biguint_equal(r, mod2) {
                return (14, gen);
            }
        } else {
            return (15, gen);
        }
    } else {
        return (16, gen);
    }

    if !biguint_equal(biguint_mul(x,x), biguint_square(x)) {
        return (17, gen);
    }

    if let Some(x2m) = biguint_modmul(x, x, y) {
        if let Some(x4m) = biguint_modmul(x2m, x2m, y) {
            if let Some(x5m) = biguint_modmul(x4m, x, y) {
                if let Some(r) = biguint_modexp(x, biguint_fromUint(5), y) {
                    if biguint_compare(x5m, r) != int(0) {
                        return (18, gen);
                    }
                } else {
                    return (19, gen);
                }
            } else {
                return (20, gen);
            }
        } else {
            return (21, gen);
        }
    } else {
        return (22, gen);
    }

    let res = modexpRegressionTest();
    if res != 0 {
        return (23, gen);
    }

    if oneWordTest() != 0 {
        return (24, gen);
    }

    (0, gen)
}

func modexpRegressionTest() -> uint {
    let base = biguint_fromUint(3);
    let exponent = biguint_fromUint(0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52);
    let modulus = biguint_fromUint(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47);

    let result = biguint_modexp(base, exponent, modulus);
    if let Some(val) = result {
        let expected = biguint_fromUint(4407920970296243842837207485651524041948558517760411303933);
        if !biguint_equal(val, expected) {
            return 1;
        }
    } else {
        return 2;
    }
    return 0;
}

func oneWordTest() -> uint {
    let r = random_new(bytes32(42));
    let numTests = 10;
    while numTests > 0 {
        let (modB32, *r) = random_next(r);
        let mod = uint(modB32);
        let (base, *r) = random_nextMod(r, mod);
        let (exp, *r) = random_nextMod(r, mod);
        let uintWay = if let Some(x) = uint_modexp(base, exp, mod) {
            x
        } else {
            return 1;
            0
        };
        let biguintWay = if let Some(x) = biguint_modexp(
            biguint_fromUint(base),
            biguint_fromUint(exp),
            biguint_fromUint(mod),
        ) {
            x
        } else {
            return 2;
            newarray<uint>(1)
        };
        if biguint_compare(biguint_fromUint(uintWay), biguintWay) != int(0) {
            return 3;
        }
        numTests = numTests - 1;
    }
    return 0;
}