//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_fromSizeAndBuffer;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_get64;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_copy;

public throw func keccak256(ba: ByteArray, offset: uint, nbytes: uint) -> bytes32 {
    if nbytes == 32 {
        return hash(bytearray_get256(ba, offset));
    }
    if nbytes == 64 {
        return hash(
            bytes32(bytearray_get256(ba, offset)),
            bytes32(bytearray_get256(ba, offset+32))
        );
    }

    let accumulator = unsafecast<[7]uint>((0,0,0,0,0,0,0));

    // Process as many complete 136-byte blocks as we can
    while nbytes >= 136 {
        // Process one complete block
        accumulator = asm(keccak_xorblock(accumulator, ba, offset),) [7]uint { keccakf };
        offset = offset+136;
        nbytes = nbytes-136;
    }

    // Build a bytearray to hold the final block
    let lastBlock = bytearray_copy(ba, offset, bytearray_new(0), 0, nbytes);

    // Add padding to fill the final block
    if nbytes == 135 {
        // only one byte of padding needed
        lastBlock = bytearray_setByte(lastBlock, 135, 0x81);
    } else {
        // padding is 0x01 0x00* 0x80
        // take advantage of the fact that lastBlock is already zero-filled
        lastBlock = bytearray_setByte(
            bytearray_setByte(lastBlock, 135, 0x80),
            nbytes,
            0x01
        );
    }

    // Process the final block
    accumulator = asm(keccak_xorblock(accumulator, lastBlock, 0),) [7]uint { keccakf };

    // Extract the return value, with properly adjusted endianness
    return bytes32(flipEndian256(accumulator[0]));
}

public throw func keccak256_sizedBuffer(size: uint, buf: buffer) -> bytes32 {
    return keccak256(bytearray_fromSizeAndBuffer(size, buf), 0, size);
}

func keccak_xorblock(accumulator: [7]uint, ba: ByteArray, offset: uint) -> [7]uint {
    return accumulator with {
        [0] = accumulator[0] ^ flipEndian256(bytearray_get256(ba, offset))
    } with {
        [1] = accumulator[1] ^ flipEndian256(bytearray_get256(ba, offset+32))
    } with {
        [2] = accumulator[2] ^ flipEndian256(bytearray_get256(ba, offset+32*2))
    } with {
        [3] = accumulator[3] ^ flipEndian256(bytearray_get256(ba, offset+32*3))
    } with {
        [4] = accumulator[4] ^ flipEndian64(bytearray_get64(ba, offset+32*4))
    };
}

public func keccak_permutation(s: [7]uint) -> [7]uint {
    return asm(s) [7]uint { keccakf };
}

public func flipEndian64(x: uint) -> uint {
    x = (0xff00ff00ff00ff00 & (x << 8)) | (0x00ff00ff00ff00ff & (x >> 8));
    x = (0xffff0000ffff0000 & (x << 16)) | (0x0000ffff0000ffff & (x >> 16));
    x = (0xffffffff00000000 & (x << 32)) | (0x00000000ffffffff & (x >> 32));
    return x;
}

public func flipEndian256(x: uint) -> uint {
    x =   (0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 & (x << 8))
        | (0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff & (x >> 8));
    x =   (0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 & (x << 16))
        | (0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff & (x >> 16));
    x =   (0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000 & (x << 32))
        | (0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff & (x >> 32));
    x =   (0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000 & (x << 64))
        | (0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff & (x >> 64));
    x =   (0xffffffffffffffffffffffffffffffff00000000000000000000000000000000 & (x << 128))
        | (0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff & (x >> 128));
    return x;
}

type Hasher = struct {
    accumulator: [7]uint,
    offset: uint,
};

public func hasher_new() -> Hasher {
    return struct {
        accumulator: unsafecast<[7]uint>((0,0,0,0,0,0,0)),
        offset: 0,
    };
}

public func hasher_pushByte(h: Hasher, b: uint) -> Hasher {
    if h.offset == 135 {
        h with {
            accumulator: asm(
                h.accumulator with {
                    [4] = h.accumulator[4] ^ ((b & 0xff) << (8*7))
                },
            ) [7]uint { keccakf }
        } with {
            offset: 0
        }
    } else {
        let word = h.offset / 32;
        h with {
            accumulator: h.accumulator with {
                [word] = h.accumulator[word] ^ ((b&0xff) << (8*(h.offset&0x1f)))
            }
        } with {
            offset: h.offset+1
        }
    }
}

public func hasher_pushN_be(h: Hasher, val: uint, nbytes: uint) -> Hasher {
    return hasher_pushN_le(h, flipEndian256(val), nbytes);
}

public func hasher_pushN_le(h: Hasher, val: uint, nbytes: uint) -> Hasher {
    // push N <= 32 bytes of data into h
    // data is assumed to be little-endian
    if nbytes > 32 {
        nbytes = 32;
    } else if nbytes < 32 {
        val = val & ((1 << (8*nbytes)) - 1);
    }
    let accum = h.accumulator;
    let offset = h.offset;
    loop {  // need to loop because data might cross word/block boundary
        let word = offset / 32;
        let align = offset & 0x1f;
        if (align+nbytes <= 8) || ((word < 4) && (align+nbytes <= 32)) {
            // can complete our work in a single push
            accum = accum with {
                [word] = accum[word] ^ (val << (8*align))
            };
            offset = offset + nbytes;
            if offset == 136 {
                return struct {
                    accumulator: asm(accum,) [7]uint { keccakf },
                    offset: 0
                };
            } else {
                return struct {
                    accumulator: accum,
                    offset: offset
                };
            }
        } else {
            // can't push it all because of word/block boundary; do as much as possible
            if word == 4 {
                accum = accum with {
                    [4] = accum[4] ^ ((val << (8*align)) & 0xffffffffffffffff)
                };
                accum = asm(accum,) [7]uint { keccakf };
                offset = 0;
                let nb = 8-align;
                val = val >> (8*nb);
                nbytes = nbytes - nb;
            } else {
                let acc = accum[word];
                acc = acc ^ (val << (8*align));
                accum = accum with { [word] = acc };
                let nb = 32-align;
                offset = offset + nb;
                val = val >> (8*nb);
                nbytes = nbytes - nb;
            }
        }
    }
}

public func hasher_finish(h: Hasher) -> bytes32 {
    let accum = h.accumulator;
    let word = h.offset / 32;

    // write the two padding bits (these might both modify the same byte)
    accum = accum with {
        [word] = accum[word] ^ (0x01 << (8*(h.offset&0x1f)))
    };
    accum = accum with { [4] = accum[4] ^ 0x8000000000000000 };

    return bytes32(flipEndian256(
        (asm(accum,) [7]uint { keccakf } )[0]
    ));
}

