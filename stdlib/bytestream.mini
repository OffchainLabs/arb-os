//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type ByteArray;

import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, offset: uint) -> uint;
import func bytearray_get64(ba: ByteArray, offset: uint) -> uint;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytearray_extract(ba: ByteArray, offset: uint, nbytes: uint) -> ByteArray;

type ByteStream = struct {
    contents: ByteArray,
    capacity: uint,
    currentOffset: uint,
    cache: option<uint>,
}

public func bytestream_new(contents: ByteArray) -> ByteStream {
    return struct {
        contents: contents,
        capacity: bytearray_size(contents),
        currentOffset: 0,
        cache: None<uint>,
    };
}

public func bytestream_atEof(bs: ByteStream) -> bool {
    return bs.currentOffset >= bs.capacity;
}

public func bytestream_bytesReadSoFar(bs: ByteStream) -> uint {
    return bs.currentOffset;
}

public func bytestream_bytesRemaining(bs: ByteStream) -> uint {
    return bs.capacity - bs.currentOffset;
}

public func bytestream_skipBytes(bs: ByteStream, nbytes: uint) -> option<ByteStream> {
    let newOffset = bs.currentOffset + nbytes;
    if (newOffset <= bs.capacity) {
        return Some(bs with { currentOffset: newOffset } with { cache: None<uint> });
    } else {
        return None;
    }
}

public func bytestream_truncate(bs: ByteStream, size: uint) -> ByteStream {
    if (size < bs.capacity) {
        if (size < bs.currentOffset) {
            return bs with { capacity: bs.currentOffset };
        } else {
            return bs with { capacity: size };
        }
    } else {
        return bs;
    }
}

public func bytestream_getByte(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset >= bs.capacity) {
        return None;
    } else {
        let cache = 0;
        let offsetMod32 = bs.currentOffset % 32;
        if let Some(c) = bs.cache {
            if (offsetMod32 == 0) {
                cache = bytearray_get256(bs.contents, bs.currentOffset);
                bs = bs with { cache: Some(cache) };
            } else {
                cache = c;
            }
        } else {
            cache = bytearray_get256(bs.contents, bs.currentOffset & ~0x1f);
            bs = bs with { cache: Some(cache) };
        }
        return Some((
            bs with { currentOffset: bs.currentOffset+1 },
            asm(offsetMod32, cache) uint { byte }
        ));
    }
}

public func bytestream_get64(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset+8 > bs.capacity) {
        return None;
    } else {
        return Some((
            bs with { currentOffset: bs.currentOffset+8 } with { cache: None<uint> },
            bytearray_get64(bs.contents, bs.currentOffset)
        ));
    }
}

public func bytestream_get256(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset+32 > bs.capacity) {
        return None;
    } else {
        return Some((
            bs with { currentOffset: bs.currentOffset+32 } with { cache: None<uint> },
            bytearray_get256(bs.contents, bs.currentOffset)
        ));
    }
}

public func bytestream_getN(bs: ByteStream, nbytes: uint) -> option<(ByteStream, ByteArray)> {
    if (bs.currentOffset + nbytes > bs.capacity) {
        return None;
    }

    return Some((
        bs with { currentOffset: bs.currentOffset + nbytes },
        bytearray_extract(bs.contents, bs.currentOffset, nbytes)
    ));
}

public func bytestream_getRemainingBytes(bs: ByteStream) -> ByteArray {
    return bytearray_extract(
        bs.contents,
        bs.currentOffset,
        bs.capacity - bs.currentOffset
    );
}
