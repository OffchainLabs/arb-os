//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;
import type MarshalledBytes;

import func bytearray_new(size: uint) -> ByteArray;
import func bytearray_unmarshalBytes(mbytes: MarshalledBytes) -> ByteArray;
import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, idx: uint) -> uint;
import func bytearray_setByte(ba: ByteArray, idx: uint, val: uint) -> ByteArray;
import func bytearray_get64(ba: ByteArray, idx: uint) -> uint;
import func bytearray_set64(ba: ByteArray, idx: uint, val: uint) -> ByteArray;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytearray_set256(ba: ByteArray, offset: uint, value: uint) -> ByteArray;

import func keccak256(ba: ByteArray, offset: uint, nbytes: uint) -> bytes32;
import impure func initKeccakConstants();
import impure func keccak_permutation(state: [25]uint) -> [25]uint;


impure func main() {
    initKeccakConstants();
    if let Some(x) = tests() {
	    asm(x,) { log };
	} else {
	    asm(666,) { log };
	}
}

func tests() -> option<bytes32> {
    //let acc = newfixedarray(25, 0)
    //    with { [0] = 1 }
    //    with { [16] = 0x8000000000000000 };
    //let accOut = keccak_permutation(acc);
    //return Some(accOut[0]);

	let ba = bytearray_new(0);
	let kecEmpty = keccak256(ba, 0, 0);
    if (kecEmpty != bytes32(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470)) {
		return Some(bytes32(1));
	}

    ba = bytearray_new(0);
    ba = bytearray_setByte(ba, 0, 0xcc);
    let kecCC = keccak256(ba, 0, 1);
    if (kecCC != bytes32(0xeead6dbfc7340a56caedc044696a168870549a6a7f6f56961e84a54bd9970b8a)) {
        return Some(bytes32(2));
    }

    ba = bytearray_new(0);
    ba = bytearray_setByte(ba, 0, 0xcc);
    ba = bytearray_setByte(ba, 1, 0xaa);
    let kecCCAA = keccak256(ba, 0, 2);
    if (kecCCAA != bytes32(0x33f234f4a499894af4036ace8c63b93a0bb7685472d79f3a9808cf95ed7047b4)) {
        return Some(bytes32(3));
    }

	return Some(bytes32(0));
}

func setupFromUnmarshal() -> ByteArray {
	let marshalledStruct = unsafecast<MarshalledBytes>((
		67,
		(
			(
				(
					null,
					0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,
				),
				0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f,
			),
			0x4041420000000000000000000000000000000000000000000000000000000000,
		),
	));
	return bytearray_unmarshalBytes(marshalledStruct);
}