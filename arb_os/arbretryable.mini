//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use chainParameters::chainParams_getOrDie;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_stackDepth;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_transferEthFromCurrent;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallFrame_getMemory;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::getRetryBufferInCurrentContext;
use evmCallStack::setRetryBufferInCurrentContext;

use evmOps::evmOp_log2;
use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_revertIfStatic;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_copy;

use gasAccounting::getRetryableTxPrice;

use retrybuffer::retryBuffer_getLifetime;
use retrybuffer::retryBuffer_getTxTimeout;
use retrybuffer::redeemRetryableTxInTx;
use retrybuffer::retryBuffer_getTxKeepalivePrice;
use retrybuffer::retryBuffer_keepalive;
use retrybuffer::retryBuffer_getBeneficiary;
use retrybuffer::retryBuffer_delete;
use retrybuffer::serializeAllRetryables;


public view write throw func arbretryable_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if bytearray_size(calldata) < 4 {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let funcCode = (bytearray_get256(calldata, 0) >> 224);
        if funcCode == const::funcCode_ArbRetryableTx_redeem {
            arbRetryable_redeem(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_getLifetime {
            arbRetryable_getLifetime(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_getTimeout {
            arbRetryable_getTimeout(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_getKeepalivePrice {
            arbRetryable_getKeepalivePrice(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_keepalive {
            arbRetryable_keepalive(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_getBeneficiary {
            arbRetryable_getBeneficiary(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_cancel {
            arbRetryable_cancel(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_getSubmissionPrice {
            arbRetryable_getSubmissionPrice(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbRetryableTx_serializeAllRetryables {
            arbRetryable_serializeAllRetryables(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownPc(1, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(27);
    }
}

// function redeem(bytes32 txId) external;
view write throw func arbRetryable_redeem(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(10, 0, 0);
    }

    // This can only be called directly from L1. Revert if called from L2.
    if evmCallStack_stackDepth() != 1 {
        evmOp_revert_knownPc(11, 0, 0);
    }

    let txId = bytearray_get256(calldata, 4);
    let (success, returnData) = redeemRetryableTxInTx(txId);
    if success {
        arbRetryable_emitRedeemed(topFrame, txId);
        if evmCallStack_setTopFrameMemory(returnData) {
            evmOp_return(0, bytearray_size(returnData));
        } else {
            evmOp_revert_knownPc(12, 0, 0);
        }
    } else {
        if evmCallStack_setTopFrameMemory(returnData) {
            evmOp_revert_knownPc(13, 0, bytearray_size(returnData));
        } else {
            evmOp_revert_knownPc(14, 0, 0);
        }
    }
}

// function getTimeout(bytes32 ticketId) external view returns(uint);
view write throw func arbRetryable_getTimeout(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(20, 0, 0);
    }
    let txId = bytearray_get256(calldata, 4);

    let timeout = retryBuffer_getTxTimeout(
        getRetryBufferInCurrentContext(),
        txId
    );
    let mem = bytearray_set256(bytearray_new(0), 0, timeout);
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(21, 0, 0);
    }
}

// function getLifetime() external view returns(uint);
view write throw func arbRetryable_getLifetime(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(30, 0, 0);
    }

    let mem = bytearray_set256(bytearray_new(0), 0, retryBuffer_getLifetime(getRetryBufferInCurrentContext()));
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(21, 0, 0);
    }
}

// function getKeepalivePrice(bytes32 ticketId) external view returns(uint, uint);
view write throw func arbRetryable_getKeepalivePrice(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(40, 0, 0);
    }
    let txId = bytearray_get256(calldata, 4);
    if let Some(res) = retryBuffer_getTxKeepalivePrice(getRetryBufferInCurrentContext(), txId) {
        let (price, nextUpdate) = res;
        let mem = bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, price),
            32,
            nextUpdate
        );
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 64);
        } else {
            evmOp_revert_knownPc(41, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(42, 0, 0);
    }
}

// function keepalive(bytes32 ticketId) external payable returns(uint);
view write throw func arbRetryable_keepalive(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(50, 0, 0);
    }
    let callvalue = evmCallFrame_getCallvalue(topFrame);
    let txId = bytearray_get256(calldata, 4);

    let rbuf = getRetryBufferInCurrentContext();
    if let Some(res) = retryBuffer_getTxKeepalivePrice(rbuf, txId) {
        let (keepalivePrice, _) = res;
        if callvalue != keepalivePrice {
            evmOp_revert_knownPc(51, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(52, 0, 0);
    }
    if callvalue > 0 {
        if evmCallStack_transferEthFromCurrent(
            address(chainParams_getOrDie(const::Atom_Param_NetworkFeeRecipient)),
            callvalue
        ) == None<()> {
            evmOp_revert_knownPc(53, 0, 0);
        }
    }

    if let Some(res) = retryBuffer_keepalive(rbuf, txId) {
        let (*rbuf, newTimeout) = res;
        setRetryBufferInCurrentContext(rbuf);
        if arbRetryable_emitLifetimeExtended(topFrame, txId, newTimeout) == None<()> {
            evmOp_revert_knownPc(54, 0, 0);
        }
        let mem = bytearray_set256(bytearray_new(0), 0, newTimeout);
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownPc(55, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(56, 0, 0);
    }
}

// function getBeneficiary(bytes32 ticketId) external view returns (address);
view write throw func arbRetryable_getBeneficiary(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(60, 0, 0);
    }
    let txId = bytearray_get256(calldata, 4);
    if let Some(bene) = retryBuffer_getBeneficiary(getRetryBufferInCurrentContext(), txId) {
        let mem = bytearray_set256(bytearray_new(0), 0, uint(bene));
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownPc(61, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(62, 0, 0);
    }
}

// function cancel(bytes32 ticketId) external;
view write throw func arbRetryable_cancel(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(70, 0, 0);
    }
    let txId = bytearray_get256(calldata, 4);

    let rbuf = getRetryBufferInCurrentContext();
    if let Some(bene) = retryBuffer_getBeneficiary(rbuf, txId) {
        let caller = evmCallFrame_getCaller(topFrame);
        if (caller != bene) && (caller != address(0)) {
            evmOp_revert_knownPc(71, 0, 0);
        }

        if let Some(updatedRbuf) = retryBuffer_delete(rbuf, txId, true) {
            setRetryBufferInCurrentContext(updatedRbuf);
            arbRetryable_emitCanceled(topFrame, txId);
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownPc(72, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(73, 0, 0);
    }
}

// function getSubmissionPrice(uint calldataSize) external view returns (uint, uint);
view write throw func arbRetryable_getSubmissionPrice(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(80, 0, 0);
    }
    let dataSize = bytearray_get256(calldata, 4);
    let (price, nextUpdate) = getRetryableTxPrice(dataSize);

    let mem = bytearray_set256(
        bytearray_set256(bytearray_new(0), 0, price),
        32,
        nextUpdate
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 64);
    } else {
        evmOp_revert_knownPc(81, 0, 0);
    }
}

// function serializeAllRetryables() external view returns(bytes memory);
view write throw func arbRetryable_serializeAllRetryables(_topFrame: EvmCallFrame, _calldata: ByteArray) {
    let ret = serializeAllRetryables(getRetryBufferInCurrentContext());
    ret = bytearray_copy(
        ret,
        0,
        bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 32),
            32,
            bytearray_size(ret),
        ),
        64,
        bytearray_size(ret)
    );
    let retSize = bytearray_size(ret);
    if retSize % 32 > 0 {
        // Round up to the next multiple of 32 bytes
        ret = bytearray_extract(ret, 0, retSize + 32 - (retSize % 32));
    }
    if evmCallStack_setTopFrameMemory(ret) {
        evmOp_return(0, bytearray_size(ret));
    } else {
        evmOp_revert_knownPc(90, 0, 0);
    }
}


// event TicketCreated(bytes32 indexed ticketId);
view write throw func _arbRetryable_emitTicketCreated(_topFrame: EvmCallFrame, txId: uint) {
    evmOp_log2(0, 0, const::eventTopic_ArbRetryableTx_TicketCreated, txId);
}

// event LifetimeExtended(bytes32 indexed ticketId, uint newTimeout);
view write throw func arbRetryable_emitLifetimeExtended(topFrame: EvmCallFrame, txId: uint, newTimeout: uint) -> option<()> {
    let savedMem = evmCallFrame_getMemory(topFrame);
    let mem = bytearray_set256(bytearray_new(0), 0, newTimeout);
    if ! evmCallStack_setTopFrameMemory(mem) {
       return None;
    }
    evmOp_log2(0, 32, const::eventTopic_ArbRetryableTx_LifetimeExtended, txId);
    if evmCallStack_setTopFrameMemory(savedMem) {
        Some(())
    } else {
        None
    }
}

// event Redeemed(bytes32 indexed ticketId);
view write throw func arbRetryable_emitRedeemed(_topFrame: EvmCallFrame, txId: uint) {
    evmOp_log2(0, 0, const::eventTopic_ArbRetryableTx_Redeemed, txId);
}

// event Canceled(bytes32 indexed ticketId);
view write throw func arbRetryable_emitCanceled(_topFrame: EvmCallFrame, txId: uint) {
    evmOp_log2(0, 0, const::eventTopic_ArbRetryableTx_Canceled, txId);
}
