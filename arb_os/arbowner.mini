//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use accounts::account_setContractInfo;

use chainParameters::chainParams_getOwner;
use chainParameters::chainParams_setOwner;
use chainParameters::chainParams_setSecondsPerSend;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallStack_setAccount;
use evmCallStack::evmCallStack_setTopFrameMemory;

use evmOps::evmOp_return;
use evmOps::evmOp_revert;
use evmOps::evmOp_revert_knownCodePc;

use pluggables::ModuleFunction;
use pluggables::installPluggable;
use pluggables::callPluggable;
use pluggables::bindContractAddressToPluggable;

use gasAccounting::gasAccounting_addToReserveInCurrentContext;
use gasAccounting::gasAccounting_setFeesEnabled;
use gasAccounting::gasAccounting_getFeeRecipients;
use gasAccounting::gasAccounting_setFeeRecipients;
use gasAccounting::setFairGasPriceSender;
use gasAccounting::setGasAccountingParams;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;

use std::avmcodebuilder::AvmCodeBuilder;
use std::avmcodebuilder::avmCodeBuilder_new;
use std::avmcodebuilder::avmCodeBuilder_append;
use std::avmcodebuilder::avmCodeBuilder_finish;

use std::bytestream::bytestream_new;

use std::storageMap::storageMap_new;


var upgradeInProgress: option<AvmCodeBuilder>;

public impure func arbowner_init() {
    upgradeInProgress = None<AvmCodeBuilder>;
}

public impure func arbowner_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        // make sure the caller is either address zero or the chain's owner
        let caller = evmCallFrame_getCaller(topFrame);
        if ( (caller != address(0)) && (Some(caller) != chainParams_getOwner()) ) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 0, 0, 0);
        }

        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 1, 0, 0);
        }
        let funcCode = asm(224, bytearray_get256(calldata, 0)) uint { shr };
        if (funcCode == 0xe3a0a148) {
            arbowner_giveOwnership(topFrame, calldata);
        } elseif (funcCode == 0x31acdf5e) {
            arbowner_startCodeUpload(topFrame, calldata);
        } elseif (funcCode == 0x56331f75) {
            arbowner_continueCodeUpload(topFrame, calldata);
        } elseif (funcCode == 0xfbb53a17) {
           arbowner_finishCodeUploadAsArbosUpgrade(topFrame, calldata);
        } elseif (funcCode == 0xf4f4e136) {
           arbowner_finishCodeUploadAsPluggable(topFrame, calldata);
        } elseif (funcCode == 0xc3bf429d) {
            arbowner_addToReserveFunds(topFrame, calldata);
        } elseif (funcCode == 0xa901dd92) {
            arbowner_setFeesEnabled(topFrame, calldata);
        } elseif (funcCode == 0x08df6923) {
            arbowner_getFeeRecipients(topFrame, calldata);
        } elseif (funcCode == 0xc6cabb40) {
            arbowner_setFeeRecipients(topFrame, calldata);
        } elseif (funcCode == 0xba7f4cc6) {
            arbowner_setFairGasPriceSender(topFrame, calldata);
        } elseif (funcCode == 0x29854f47) {
            arbowner_setSecondsPerSend(topFrame, calldata);
        } elseif (funcCode == 0x8ea93643) {
            arbowner_setGasAccountingParams(topFrame, calldata);
        } else {
            // unrecognized function code
            asm((111, funcCode),) { debugprint };
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 2, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(22);
    }
}

impure func arbowner_giveOwnership(topFrame: EvmCallFrame, calldata: ByteArray) {  // (address)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 10, 0, 0);
    }
    chainParams_setOwner(address(bytearray_get256(calldata, 4)));
    evmOp_return(0, 0);
}

impure func arbowner_addToReserveFunds(topFrame: EvmCallFrame, calldata: ByteArray) { // () payable
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 50, 0, 0);
    }
    let callvalue = evmCallFrame_getCallvalue(topFrame);
    if (callvalue > 0) {
        gasAccounting_addToReserveInCurrentContext(callvalue);
    }
    evmOp_return(0, 0);
}

impure func arbowner_setFeesEnabled(topFrame: EvmCallFrame, calldata: ByteArray) { // (bool)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 200, 0, 0);
    }
    gasAccounting_setFeesEnabled(bytearray_get256(calldata, 4) != 0);
    evmOp_return(0, 0);
}

impure func arbowner_getFeeRecipients(topFrame: EvmCallFrame, calldata: ByteArray) { // () -> (address, address)
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 100, 0, 0);
    }

    let (r1, r2) = gasAccounting_getFeeRecipients();
    let mem = bytearray_set256(
        bytearray_set256(bytearray_new(0), 0, uint(r1)),
        32,
        uint(r2)
    );
    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, 64);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 101, 0, 0);
    }
}

impure func arbowner_setFeeRecipients(topFrame: EvmCallFrame, calldata: ByteArray) { // (address, address)
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 110, 0, 0);
    }
    let recipient1 = address(bytearray_get256(calldata, 4));
    let recipient2 = address(bytearray_get256(calldata, 36));
    gasAccounting_setFeeRecipients(recipient1, recipient2);
    evmOp_return(0, 0);
}

impure func arbowner_setFairGasPriceSender(topFrame: EvmCallFrame, calldata: ByteArray) { // (address)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 210, 0, 0);
    }
    setFairGasPriceSender(address(bytearray_get256(calldata, 4)));
    evmOp_return(0, 0);
}

impure func arbowner_setSecondsPerSend(topFrame: EvmCallFrame, calldata: ByteArray) {  // (uint)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 120, 0, 0);
    }
    if (chainParams_setSecondsPerSend(bytearray_get256(calldata, 4)) == Some(())) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 121, 0, 0);
    }
}

impure func arbowner_startCodeUpload(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 20, 0, 0);
    }
    upgradeInProgress = Some(avmCodeBuilder_new(false));
    evmOp_return(0, 0);
}

impure func arbowner_continueCodeUpload(topFrame: EvmCallFrame, calldata: ByteArray) { // (bytes)
    if (bytearray_size(calldata) < 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 30, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        let nbytes = bytearray_get256(calldata, 36);
        let marshalledCode = bytearray_extract(calldata, 68, nbytes);
        if let Some(updated) = avmCodeBuilder_append(upgrade, bytestream_new(marshalledCode)) {
            upgradeInProgress = Some(updated);
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
    }
}

impure func arbowner_finishCodeUploadAsArbosUpgrade(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 40, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        asm(avmCodeBuilder_finish(upgrade), 0) { jump };  // jump to the new code
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 42, 0, 0);
    }
}

impure func arbowner_finishCodeUploadAsPluggable(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 50, 0, 0);
    }
    let id = bytearray_get256(calldata, 4);
    let keepState = bytearray_get256(calldata, 36) != 0;
    if let Some(upgrade) = upgradeInProgress {
        if let Some(_) = installPluggable(id, unsafecast<ModuleFunction>(avmCodeBuilder_finish(upgrade)), keepState) {
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 51, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 52, 0, 0);
    }
}

impure func arbowner_bindAddressToPluggable(topFrame: EvmCallFrame, calldata: ByteArray) { // (address, uint)
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 60, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let pluggableId = bytearray_get256(calldata, 36);

    let acct = evmCallFrame_getAccount(topFrame, addr);
    acct = bindContractAddressToPluggable(acct, addr, pluggableId);
    let success = evmCallStack_setAccount(addr, acct);
    if (success) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 61, 0, 0);
    }
}

impure func arbowner_setGasAccountingParams(topFrame: EvmCallFrame, calldata: ByteArray) { // (uint, uint, uint)
    if (bytearray_size(calldata) != (4+3*32)) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 130, 0, 0);
    }
    let speedLimitPerBlock = bytearray_get256(calldata, 4);
    let speedLimitPerSecond = speedLimitPerBlock * const::SecondsPerBlockDenominator / const::SecondsPerBlockNumerator;
    if (setGasAccountingParams(
            speedLimitPerSecond,
            bytearray_get256(calldata, 4+32),
            bytearray_get256(calldata, 4+2*32),
        )
    ) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 131, 0, 0);
    }
}







