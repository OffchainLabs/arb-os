//
// Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::Account;
use accounts::account_getBalance;
use accounts::accountStore_forall;
use accounts::accountStore_sumOfAllEscrowBalances;

use chainParameters::chainParams_get;
use chainParameters::chainParams_set;
use chainParameters::chainParams_create;
use chainParameters::chainParams_serializeAllParams;
use chainParameters::addChainOwner;
use chainParameters::removeChainOwner;
use chainParameters::hasChainOwnerPrivileges;
use chainParameters::serializedListOfChainOwners;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_stackDepth;
use evmCallStack::evmCallStack_returnFromCall;
use evmCallStack::evmCallStack_transferEthFromCurrent;
use evmCallStack::evmCallStack_getAccountStoreInCurrentContext;
use evmCallStack::evmCallStack_changeRunningAs;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_revert_knownCodePc;
use evmOps::evmOp_revertIfStatic;
use evmOps::doCreationOpcode;

use gasAccounting::setFairGasPriceSender;
use gasAccounting::isFairGasPriceSender;
use gasAccounting::getSerializedFairGasPriceSenders;
use gasAccounting::allowedSenders_allowAll;
use gasAccounting::allowedSenders_allowNone;
use gasAccounting::allowedSenders_contains;
use gasAccounting::allowedSenders_add;
use gasAccounting::allowedSenders_remove;
use gasAccounting::allowedSenders_serialize;
use gasAccounting::getAddressForReserveFundsDeposit;
use gasAccounting::setL1GasPriceEstimate;

use inbox::addressRemapExceptions_set;
use inbox::isL1MappingException;
use inbox::serializeAllRemapExceptions;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_copy;

use std::avmcodebuilder::AvmCodeBuilder;
use std::avmcodebuilder::avmCodeBuilder_new;
use std::avmcodebuilder::avmCodeBuilder_append;
use std::avmcodebuilder::avmCodeBuilder_getCodeHash;
use std::avmcodebuilder::avmCodeBuilder_finish;

use std::bytestream::bytestream_new;

use std::rlp::keccakOfRlpEncodedUintPair;


var upgradeInProgress: option<AvmCodeBuilder>;
var previousArbosUpgradeHash: bytes32;

public write func arbowner_init() {
    upgradeInProgress = None<AvmCodeBuilder>;
    previousArbosUpgradeHash = bytes32(0);
}

public view write throw func arbowner_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        // make sure the caller is either address zero or the chain's owner
        let caller = evmCallFrame_getCaller(topFrame);
        revertIfNotOwner(caller);

        let calldata = evmCallFrame_getCalldata(topFrame);
        if bytearray_size(calldata) < 4 {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 1, 0, 0);
        }
        let funcCode = (bytearray_get256(calldata, 0) >> 224);
        if funcCode == const::funcCode_ArbOwner_startCodeUpload {
            arbowner_startCodeUpload(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_startCodeUploadWithCheck {
            arbowner_startCodeUploadWithCheck(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_continueCodeUpload {
            arbowner_continueCodeUpload(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getUploadedCodeHash {
            arbowner_getUploadedCodeHash(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_finishCodeUploadAsArbosUpgrade {
           arbowner_finishCodeUploadAsArbosUpgrade(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getLastUpgradeHash {
           arbowner_getLastUpgradeHash(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_addToReserveFunds {
            arbowner_addToReserveFunds(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getChainParameter {
            arbowner_getChainParameter(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_setChainParameter {
            arbowner_setChainParameter(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_createChainParameter {
            arbowner_createChainParameter(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_serializeAllParameters {
            arbowner_serializeAllParameters(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getTotalOfEthBalances {
            arbowner_getTotalOfEthBalances(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_deployContract {
            arbowner_deployContract(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_allowAllSenders {
            arbowner_allowAllSenders(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_allowOnlyOwnerToSend {
            arbowner_allowOnlyOwnerToSend(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_isAllowedSender {
            arbowner_isAllowedSender(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_addAllowedSender {
            arbowner_addAllowedSender(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_removeAllowedSender {
            arbowner_removeAllowedSender(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getAllAllowedSenders {
            arbowner_getAllAllowedSenders(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_setL1GasPriceEstimate {
            arbowner_setL1GasPriceEstimate(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_setFairGasPriceSender {
            arbowner_setFairGasPriceSender(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_isFairGasPriceSender {
            arbowner_isFairGasPriceSender(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getAllFairGasPriceSenders {
            arbowner_getAllFairGasPriceSenders(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_addChainOwner {
            arbowner_addChainOwner(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_removeChainOwner {
            arbowner_removeChainOwner(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_isChainOwner {
            arbowner_isChainOwner(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getAllChainOwners {
            arbowner_getAllChainOwners(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_addMappingException {
            arbowner_addMappingException(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_removeMappingException {
            arbowner_removeMappingException(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_isMappingException {
            arbowner_isMappingException(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbOwner_getAllMappingExceptions {
            arbowner_getAllMappingExceptions(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 2, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(22);
    }
}

public view write throw func revertIfNotOwner(addr: address) {
    if ! hasChainOwnerPrivileges(addr) {
        evmOp_revert_knownPc(6666666, 0, 0);
    }
}

// function addToReserveFunds() external payable;
view write throw func arbowner_addToReserveFunds(topFrame: EvmCallFrame, calldata: ByteArray) { // () payable
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 50, 0, 0);
    }
    let callvalue = evmCallFrame_getCallvalue(topFrame);
    if callvalue > 0 {
        if evmCallStack_transferEthFromCurrent(getAddressForReserveFundsDeposit(), callvalue) == None<()> {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 51, 0, 0);
        }
    }
    evmOp_return(0, 0);
}

// function startCodeUpload() external;
view write throw func arbowner_startCodeUpload(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(20, 0, 0);
    }
    upgradeInProgress = Some(avmCodeBuilder_new(false));
    evmOp_return(0, 0);
}

// function startCodeUploadWithCheck(bytes32 oldCodeHash) external;
view write throw func arbowner_startCodeUploadWithCheck(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(20, 0, 0);
    }
    let oldCodeHash = bytes32(bytearray_get256(calldata, 4));
    if (oldCodeHash == bytes32(0)) || (oldCodeHash == previousArbosUpgradeHash) {
        upgradeInProgress = Some(avmCodeBuilder_new(false));
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownPc(21, 0, 0);
    }
}

// function continueCodeUpload(bytes calldata marshalledCode) external;
view write throw func arbowner_continueCodeUpload(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) < 68 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 30, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        let nbytes = bytearray_get256(calldata, 36);
        let marshalledCode = bytearray_extract(calldata, 68, nbytes);
        if let Some(updated) = avmCodeBuilder_append(upgrade, bytestream_new(marshalledCode)) {
            upgradeInProgress = Some(updated);
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
    }
}

// function getUploadedCodeHash() external view returns(bytes32);
view write throw func arbowner_getUploadedCodeHash(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 140, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        let codeHash = avmCodeBuilder_getCodeHash(upgrade);
        if evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, uint(codeHash))) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 141, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 142, 0, 0);
    }
}

// function finishCodeUploadAsArbosUpgrade(bytes32 newCodeHash, bytes32 oldCodeHash) external;
view write throw func arbowner_finishCodeUploadAsArbosUpgrade(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 40, 0, 0);
    }

    // This can only be called directly from L1. Revert if called from L2.
    if evmCallStack_stackDepth() != 1 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 41, 0, 0);
    }

    if let Some(upgrade) = upgradeInProgress {
        let newCodeHash = bytes32(bytearray_get256(calldata, 4));
        let oldCodeHash = bytes32(bytearray_get256(calldata, 36));
        if avmCodeBuilder_getCodeHash(upgrade) != newCodeHash {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 42, 0, 0);
        }
        if (oldCodeHash != bytes32(0)) && (oldCodeHash != previousArbosUpgradeHash) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 43, 0, 0);
        }
        let upgradeCodePoint = unsafecast<view write func()>(avmCodeBuilder_finish(upgrade));
        upgradeInProgress = None<AvmCodeBuilder>;
        previousArbosUpgradeHash = newCodeHash;
        let _ = evmCallStack_returnFromCall(const::TxResultCode_success, 0, 0, Some(upgradeCodePoint));
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 44, 0, 0);
    }
}

// function getChainParameter(uint which) external view returns(uint);
view write throw func arbowner_getChainParameter(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 70, 0, 0);
    }
    let paramId = bytearray_get256(calldata, 4);
    if let Some(value) = chainParams_get(paramId) {
        let mem = bytearray_set256(bytearray_new(0), 0, value);
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 71, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 72, 0, 0);
    }
}

// function setChainParameter(uint which, uint value) external;
view write throw func arbowner_setChainParameter(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 80, 0, 0);
    }
    let paramId = bytearray_get256(calldata, 4);
    let newValue = bytearray_get256(calldata, 36);
    chainParams_set(paramId, newValue);
    evmOp_return(0, 0);
}

view write throw func arbowner_createChainParameter(_topFrame: EvmCallFrame, calldata: ByteArray) { // (uint, uint)
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 85, 0, 0);
    }
    let paramId = bytearray_get256(calldata, 4);
    let newValue = bytearray_get256(calldata, 36);
    chainParams_create(paramId, newValue);
    evmOp_return(0, 0);
}

// function getTotalOfEthBalances() external view returns(uint);
view write throw func arbowner_getTotalOfEthBalances(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 150, 0, 0);
    }
    let acctStore = evmCallStack_getAccountStoreInCurrentContext();
    let total = accountStore_forall::<uint>(
        acctStore,
        closure(acct: Account, balance: uint) -> uint {
            balance + account_getBalance(acct)
        },
        0
    );
    total = total + accountStore_sumOfAllEscrowBalances(acctStore);
    if evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, total)) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 151, 0, 0);
    }
}

// function deployContract(bytes calldata constructorData, address deemedSender, uint deemedNonce) external payable returns(address);
view write throw func arbowner_deployContract(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    let calldataSize = bytearray_size(calldata);
    if calldataSize < 4+4*32 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 160, 0, 0);
    }
    let deemedSender = address(bytearray_get256(calldata, 4+32));
    let deemedNonce = bytearray_get256(calldata, 4+2*32);
    let constructorDataSize = bytearray_get256(calldata, 4+3*32);
    if calldataSize != 4 + 32 * (4 + (constructorDataSize+31)/32) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 161, 0, 0);
    }
    let constructorData = bytearray_extract(calldata, 4+4*32, constructorDataSize);
    let callvalue = evmCallFrame_getCallvalue(topFrame);

    let deployAddress = address(keccakOfRlpEncodedUintPair(uint(deemedSender), deemedNonce));

    // The current account is supposed to pay for callvalue of the call, but after we change runningAs below,
    //     the callvalue will be taken from deemedSender. So we transfer the callvalue from the current account
    //     to deemedSender here, to compensate.
    if evmCallStack_transferEthFromCurrent(deemedSender, callvalue) == None<()> {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 162, 0, 0);
    }

    if evmCallStack_changeRunningAs(deemedSender) == None<()> {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 163, 0, 0);
    }
    deployAddress = doCreationOpcode(callvalue, constructorData, deployAddress);
    if evmCallStack_changeRunningAs(address(const::Address_ArbOwner)) == None<()> {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 164, 0, 0);
    }
    if deployAddress == address(0) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 165, 0, 0);
    }

    if evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, uint(deployAddress))) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 166, 0, 0);
    }
}

// function serializeAllParameters() external view returns(bytes memory);
view write throw func arbowner_serializeAllParameters(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(170, 0, 0);
    }
    let serialized = chainParams_serializeAllParams();
    let serSize = bytearray_size(serialized);
    let mem = bytearray_copy(
        serialized,
        0,
        bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 32),
            32,
            serSize,   // no need to round up, because serSize is already a multiple of 32
        ),
        64,
        serSize,
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 64+serSize);
     } else {
        evmOp_revert_knownPc(171, 0, 0);
    }
}

// function isFairGasPriceSender(address addr) external view returns(bool);
view write throw func arbowner_isFairGasPriceSender(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(170, 0, 0);
    }
    let mem = bytearray_set256(
        bytearray_new(0),
        0,
        uint(isFairGasPriceSender(address(bytearray_get256(calldata, 4)))),
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(171, 0, 0);
    }
}

// function getAllFairGasPriceSenders() external view returns(bytes memory);
view write throw func arbowner_getAllFairGasPriceSenders(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(180, 0, 0);
    }
    if let Some(serialized) = getSerializedFairGasPriceSenders() {
        let mem = bytearray_copy(
            serialized,
            0,
            bytearray_set256(
                bytearray_set256(
                    bytearray_new(0),
                    0,
                    32,
                ),
                32,
                bytearray_size(serialized),
            ),
            64,
            bytearray_size(serialized),  // don't need to round up, because already a multiple of 32
        );
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, bytearray_size(mem));
        } else {
            evmOp_revert_knownPc(181, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(182, 0, 0);
    }
}

// function allowAllSenders() external;
view write throw func arbowner_allowAllSenders(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(190, 0, 0);
    }
    allowedSenders_allowAll();
    evmOp_return(0, 0);
}

// function allowOnlyOwnerToSend() external;
view write throw func arbowner_allowOnlyOwnerToSend(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(200, 0, 0);
    }
    allowedSenders_allowNone();
    evmOp_return(0, 0);
}

// function isAllowedSender(address addr) external view returns(bool);
view write throw func arbowner_isAllowedSender(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(210, 0, 0);
    }
    let mem = bytearray_set256(
        bytearray_new(0),
        0,
        uint(allowedSenders_contains(address(bytearray_get256(calldata, 4))))
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(211, 0, 0);
    }
}

// function addAllowedSender(address addr) external;
view write throw func arbowner_addAllowedSender(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(220, 0, 0);
    }
    allowedSenders_add(address(bytearray_get256(calldata, 4)));
    evmOp_return(0, 0);
}

// function removeAllowedSender(address addr) external;
view write throw func arbowner_removeAllowedSender(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(230, 0, 0);
    }
    allowedSenders_remove(address(bytearray_get256(calldata, 4)));
    evmOp_return(0, 0);
}

// function getAllAllowedSenders() external view returns(bytes memory);
view write throw func arbowner_getAllAllowedSenders(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(240, 0, 0);
    }
    if let Some(serialized) = allowedSenders_serialize() {
        let size = bytearray_size(serialized);
        let mem = bytearray_copy(
            serialized,
            0,
            bytearray_set256(
                bytearray_set256(bytearray_new(0), 0, 32),
                32,
                size,    // no need to round up, because size is already a multiple of 32
            ),
            64,
            size,
        );
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 64+size);
        } else {
            evmOp_revert_knownPc(241, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(242, 0, 0);
    }
}

// function setL1GasPriceEstimate(uint priceInGwei) external;
view write throw func arbowner_setL1GasPriceEstimate(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(250, 0, 0);
    }
    let newGasPrice = bytearray_get256(calldata, 4);
    setL1GasPriceEstimate(newGasPrice * (1000 * 1000 * 1000));  // convert to wei
    evmOp_return(0, 0);
}

// function setFairGasPriceSender(address addr, bool isFairGasPriceSender) external;
view write throw func arbowner_setFairGasPriceSender(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 210, 0, 0);
    }
    setFairGasPriceSender(address(bytearray_get256(calldata, 4)), bytearray_get256(calldata, 36)!=0);
    evmOp_return(0, 0);
}

// function getLastUpgradeHash() external view returns(bytes32);
view write throw func arbowner_getLastUpgradeHash(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(190, 0, 0);
    }
    let mem = bytearray_set256(bytearray_new(0), 0, uint(previousArbosUpgradeHash));
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(191, 0, 0);
    }
}

// function addChainOwner(address newOwner) external;
view write throw func arbowner_addChainOwner(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(190, 0, 0);
    }
    let newOwner = address(bytearray_get256(calldata, 4));
    addChainOwner(newOwner);
    evmOp_return(0, 0);
}

// function removeChainOwner(address ownerToRemove) external;
view write throw func arbowner_removeChainOwner(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(200, 0, 0);
    }
    let ownerToRemove = address(bytearray_get256(calldata, 4));
    if hasChainOwnerPrivileges(ownerToRemove) {
        removeChainOwner(ownerToRemove);
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownPc(201, 0, 0);
    }
}

// function isChainOwner(address addr) external view returns(bool);
view write throw func arbowner_isChainOwner(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(210, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let mem = bytearray_set256(
        bytearray_new(0),
        0,
        if hasChainOwnerPrivileges(addr) { 1 } else { 0 },
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(211, 0, 0);
    }
}

// function getAllChainOwners() external view returns(bytes memory);
view write throw func arbowner_getAllChainOwners(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(220, 0, 0);
    }
    let serialized = serializedListOfChainOwners();
    let mem = bytearray_copy(
        serialized,
        0,
        bytearray_set256(
            bytearray_set256(
                bytearray_new(0),
                0,
                32,
            ),
            32,
            bytearray_size(serialized),
        ),
        64,
        bytearray_size(serialized),  // don't need to round up, because already a multiple of 32
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, bytearray_size(mem));
    } else {
        evmOp_revert_knownPc(221, 0, 0);
    }
}

//  function addMappingException(uint from, uint to) external;
view write throw func arbowner_addMappingException(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(230, 0, 0);
    }
    let from = bytearray_get256(calldata, 4);
    let to = bytearray_get256(calldata, 36);
    addressRemapExceptions_set(
        if from == const::WildcardForAddress { None } else { Some(address(from)) },
        if to   == const::WildcardForAddress { None } else { Some(address(to  )) },
        true,
    );
    evmOp_return(0, 0);
}

//  function removeMappingException(uint from, uint to) external;
view write throw func arbowner_removeMappingException(_topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(240, 0, 0);
    }
    let from = bytearray_get256(calldata, 4);
    let to = bytearray_get256(calldata, 36);
    addressRemapExceptions_set(
        if from == const::WildcardForAddress { None } else { Some(address(from)) },
        if to   == const::WildcardForAddress { None } else { Some(address(to  )) },
        false,
    );
    evmOp_return(0, 0);
}

//  function isMappingException(uint from, uint to) external view returns(bool);
view write throw func arbowner_isMappingException(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(240, 0, 0);
    }
    let from = bytearray_get256(calldata, 4);
    let to = bytearray_get256(calldata, 36);
    let result = isL1MappingException(
        if from == const::WildcardForAddress { None } else { Some(address(from)) },
        if to   == const::WildcardForAddress { None } else { Some(address(to  )) },
    );
    let mem = bytearray_new(0);
    if result {
        mem = bytearray_set256(mem, 0, 1);
    }
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(241, 0, 0);
    }
}

//  function getAllMappingExceptions() external view returns (bytes memory);
view write throw func arbowner_getAllMappingExceptions(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(250, 0, 0);
    }

    let serialized = serializeAllRemapExceptions();
    let mem = bytearray_copy(
        serialized,
        0,
        bytearray_set256(
            bytearray_set256(
                bytearray_new(0),
                0,
                32,
            ),
            32,
            bytearray_size(serialized),
        ),
        64,
        bytearray_size(serialized),  // don't need to round up, because already a multiple of 32
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, bytearray_size(mem));
    } else {
        evmOp_revert_knownPc(251, 0, 0);
    }
}
