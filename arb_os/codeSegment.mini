//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteStream;

import func bytestream_atEof(bs: ByteStream) -> bool;
import func bytestream_bytesReadSoFar(bs: ByteStream) -> uint;
import func bytestream_bytesRemaining(bs: ByteStream) -> uint;
import func bytestream_truncate(bs: ByteStream, nbytes: uint) -> ByteStream;
import func bytestream_getByte(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_get64(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_getUint(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_skipBytes(bs: ByteStream, nbytes: uint) -> option<ByteStream>;

import func evmOp_address();
import func evmOp_balance();
import func evmOp_call();
import func evmOp_callcode();
import func evmOp_calldatacopy();
import func evmOp_calldataload();
import func evmOp_calldatasize();
import func evmOp_caller();
import func evmOp_callvalue();
import func evmOp_codecopy();
import func evmOp_codesize();
import func evmOp_delegatecall();
import func evmOp_extcodesize();
import func evmOp_extcodecopy();
import func evmOp_getjumpaddr();
import func evmOp_log0();
import func evmOp_log1();
import func evmOp_log2();
import func evmOp_log3();
import func evmOp_log4();
import func evmOp_msize();
import func evmOp_mload();
import func evmOp_mstore();
import func evmOp_mstore8();
import func evmOp_number();
import func evmOp_origin();
import func evmOp_return();
import func evmOp_returndatasize();
import func evmOp_returndatacopy();
import func evmOp_revert();
import func evmOp_selfdestruct();
import func evmOp_sha3();
import func evmOp_sload();
import func evmOp_sstore();
import func evmOp_sloadbytes();
import func evmOp_sstorebytes();
import func evmOp_ssize();
import func evmOp_staticcall();
import func evmOp_stop();
import func evmOp_timestamp();
import func evmOp_txexecgas();
import func evmOp_create();


// An AVM CodePoint, that is, a place that AVM code can jump to, is represented as a func()
type AvmCodePoint = func()

impure func pushInstruction(opcode: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, restOfCode) AvmCodePoint { pushinsn };
}

impure func pushInstructionImm(opcode: uint, val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, val, restOfCode) AvmCodePoint { pushinsnimm };
}

impure func pushValue(val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push a noop (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(0x3b, val, restOfCode) AvmCodePoint { pushinsnimm };
}

public impure func translateEvmCodeSegment(
    bs: ByteStream
) -> option<(AvmCodePoint, map<uint, AvmCodePoint>)> {
    // Given the EVM bytecode for a contract, generate the equivalent AVM code.
    // If this succeeds, it will return a pair:
    //       * CodePoint to jump to, to start executing the contract
    //       * mapping from valid EVM jump destinations to corresponding AVM CodePoints
    // This operates recursively, building the compiled code from the end back toward the beginning.

    if (bytestream_atEof(bs)) {
        // Base case of the recursion.
        // Return a minimal code segment that just contains a panic instruction.
        // The panic prevents execution from "falling off the end" of the resulting segment.
        return Some((
            asm() AvmCodePoint { errcodept }, 
            newmap<uint, AvmCodePoint>
        ));
    }

    // Read in the first opcode in the code.
    let (ubs, opcode) = bytestream_getByte(bs)?;
    bs = ubs;

    if ((opcode >= 0x60) && (opcode <= 0x7f)) {
        // it's a pushN instruction; unmarshal the immediate value and push it
        let bytesRemaining = opcode - 0x5f;
        let imm = 0;
        while (bytesRemaining > 0) {
            let (ubs, val) = bytestream_getByte(bs)?;
            bs = ubs;
            imm = 256*imm + val;
            bytesRemaining = bytesRemaining-1;
        }
        let numBytesRead = bytestream_bytesReadSoFar(bs);

        // Recursively generate code for everything after this instruction.
        let (restOfCode, evmJumpTable) = translateEvmCodeSegment(bs)?;

            // for debugging, uncomment this to get a debugprint before each EVM instruction
            // restOfCode = pushInstructionImm(0x90, (42, numBytesRead, opcode), restOfCode);

        // Now prepend the current operation onto the front of the generated code.
        return Some((pushValue(imm, restOfCode), evmJumpTable));
    } 

    // The rest of the instructions are all a single byte. So we'll generate code for the rest of
    // the program, then prepend whatever is needed to implement the current opcode.
    let (restOfCode, evmJumpTable) = translateEvmCodeSegment(bs)?;

    let numBytesRead = bytestream_bytesReadSoFar(bs);
        // for debugging, uncomment this to get a debugprint before each EVM instruction
        // restOfCode = pushInstructionImm(0x90, (42, numBytesRead, opcode), restOfCode);

    if (opcode < 0x80) {
        if (opcode < 0x40) {
            if (opcode < 0x20) {
                if (opcode < 0x10) {
                    if (opcode < 0x04) {
                        if (opcode == 0x00) { // STOP
                            return pushEvmInsnCall(evmOp_stop, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x01) { // ADD
                            return Some((pushInstruction(0x01, restOfCode), evmJumpTable));
                        } elseif (opcode == 0x02) { // MUL
                            return Some((pushInstruction(0x02, restOfCode), evmJumpTable));
                        } elseif (opcode == 0x03) { // SUB
                            return Some((pushInstruction(0x03, restOfCode), evmJumpTable));
                        }
                    } else {
                        if ( (opcode >= 0x04) && (opcode <= 0x09) ) { // DIV, MOD, SDIV, SMOD, ADDMOD, MULMOD
                            return pushEvmInsnDenomCheck(opcode, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x0a) { // EXP
                            return Some((pushInstruction(0x0a, restOfCode), evmJumpTable));
                        } elseif (opcode == 0x0b) { // SIGNEXTEND
                            return Some((pushInstruction(0x1b, restOfCode), evmJumpTable));  // note diff opcode
                        }
                    }
                } else {
                    if ( (opcode >= 0x10) && (opcode <= 0x1a) ) {
                        return Some((pushInstruction(opcode, restOfCode), evmJumpTable));
                    } elseif (opcode == 0x1b) { // SHL
                        return Some((

                            pushInstructionImm(
                                0x0a, 2,   // [2] exp
                                pushInstruction(
                                    0x02, // mul
                                    restOfCode
                                )
                            ),
                            evmJumpTable
                        ));
                    } elseif (opcode == 0x1c) { // SHR
                        return Some((
                            pushInstructionImm(
                                0x0a, 2,   // [2] exp
                                pushInstruction(
                                    0x43, // swap1
                                    pushInstruction(
                                        0x04, // div
                                        restOfCode
                                    )
                                )
                            ),
                            evmJumpTable
                        ));
                    } elseif (opcode == 0x1d) { // SHA
                        return Some((
                            pushInstructionImm(
                                0x0a, 2,   // [2] exp
                                pushInstruction(
                                    0x43, // swap1
                                    pushInstruction(
                                        0x05, // sdiv
                                        restOfCode
                                    )
                                )
                            ),
                            evmJumpTable
                        ));
                    }
                }
            } else {
                if (opcode < 0x37 ) {
                    if (opcode < 0x33) {
                        if (opcode == 0x20) { // SHA3
                            return pushEvmInsnCall(evmOp_sha3, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x30) { // ADDRESS
                            return pushEvmInsnCall(evmOp_address, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x31) { // BALANCE
                            return pushEvmInsnCall(evmOp_balance, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x32) { // ORIGIN
                            return pushEvmInsnCall(evmOp_origin, restOfCode, evmJumpTable);
                        }
                    } else {
                        if (opcode == 0x33) { // CALLER
                            return pushEvmInsnCall(evmOp_caller, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x34) { // CALLVALUE
                            return pushEvmInsnCall(evmOp_callvalue, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x35) { // CALLDATALOAD
                            return pushEvmInsnCall(evmOp_calldataload, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x36) { // CALLDATASIZE
                            return pushEvmInsnCall(evmOp_calldatasize, restOfCode, evmJumpTable);
                        }
                    }
                } else {
                    if (opcode < 0x3b) {
                        if (opcode == 0x37) { // CALLDATACOPY
                            return pushEvmInsnCall(evmOp_calldatacopy, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x38) { // CODESIZE
                            return pushEvmInsnCall(evmOp_codesize, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x39) { // CODECOPY
                            return pushEvmInsnCall(evmOp_codecopy, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x3a) { // GASPRICE
                            return Some((pushValue(1, restOfCode), evmJumpTable));
                        }
                    } else {
                        if (opcode == 0x3b) { // EXTCODESIZE
                            return pushEvmInsnCall(evmOp_extcodesize, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x3c) { // EXTCODECOPY
                            return pushEvmInsnCall(evmOp_extcodecopy, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x3d) { // RETURNDATASIZE
                            return pushEvmInsnCall(evmOp_returndatasize, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x3e) { // RETURNDATACOPY
                            return pushEvmInsnCall(evmOp_returndatacopy, restOfCode, evmJumpTable);
                        }
                    }
                }
            }
        } else {
            if (opcode < 0x53) {
                if (opcode < 0x45) {
                    if (opcode < 0x43) {
                        if (opcode == 0x40) { // BLOCKHASH
                            return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                        } elseif (opcode == 0x41) { // COINBASE
                            return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                        } elseif (opcode == 0x42) { // TIMESTAMP
                            return pushEvmInsnCall(evmOp_timestamp, restOfCode, evmJumpTable);
                        }
                    } else {
                        if (opcode == 0x43) { // NUMBER
                            return pushEvmInsnCall(evmOp_number, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x44) { // DIFFICULTY
                            return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                        }
                    }
                } else {
                    if (opcode == 0x45) { // GASLIMIT
                        return Some((pushValue(10000000000, restOfCode), evmJumpTable));
                    } elseif (opcode == 0x50) { // POP
                        return Some((pushInstruction(0x30, restOfCode), evmJumpTable)); // pop
                    } elseif (opcode == 0x51) { // MLOAD
                        return pushEvmInsnCall(evmOp_mload, restOfCode, evmJumpTable);
                    } elseif (opcode == 0x52) { // MSTORE
                        return pushEvmInsnCall(evmOp_mstore, restOfCode, evmJumpTable);
                    }
                }
            } else {
                if (opcode < 0x58) {
                    if (opcode < 0x56) {
                        if (opcode == 0x53) { // MSTORE8
                            return pushEvmInsnCall(evmOp_mstore8, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x54) { // SLOAD
                            return pushEvmInsnCall(evmOp_sload, restOfCode, evmJumpTable);
                        } elseif (opcode == 0x55) { // SSTORE
                            return pushEvmInsnCall(evmOp_sstore, restOfCode, evmJumpTable);
                        }
                    } else {
                        if (opcode == 0x56) { // JUMP
                            return pushEvmInsnCall(
                                evmOp_getjumpaddr,
                                pushInstruction(0x34, restOfCode), // jump
                                evmJumpTable
                            );
                        } elseif (opcode == 0x57) { // JUMPI
                            if let Some(res) = pushEvmInsnCall(
                                evmOp_getjumpaddr,
                                pushInstruction(0x34, restOfCode), // jump
                                evmJumpTable
                            ) {
                                let (doJump, _) = res;
                                return Some((
                                    pushInstruction(
                                        0x43,  // swap1
                                        pushInstructionImm(
                                            0x35, // cjump
                                            doJump,
                                            pushInstruction(
                                                0x30, // pop
                                                pushInstructionImm(
                                                    0x34,  // jump
                                                    restOfCode,
                                                    doJump,
                                                )
                                            )
                                        )
                                    ),
                                    evmJumpTable
                                ));
                            } else {
                                panic; // should never happen; pushEvmInsnCall always returns Some
                            }
                        }
                    }
                } else {
                    if (opcode == 0x58) {  // GETPC
                        return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                    } elseif (opcode == 0x59) { // MSIZE
                        return pushEvmInsnCall(evmOp_msize, restOfCode, evmJumpTable);
                    } elseif (opcode == 0x5a) { // GAS
                        return Some((pushInstruction(0x76, restOfCode), evmJumpTable));
                    } elseif (opcode == 0x5b) { // JUMPDEST
                        return Some((
                            restOfCode,
                            evmJumpTable with {
                                [numBytesRead-1] = restOfCode
                            }
                        ));
                    }
                }
            }
        }
    } else {
        if (opcode < 0xe1) {
            if (opcode < 0x93) {
                if (opcode < 0x90) {
                    if (opcode == 0x80) {  // DUP1 -- note that DUPn in EVM corresponds to DUP(n-1) in AvmCodePoint
                        return Some((pushInstruction(0x40, restOfCode), evmJumpTable));  // dup0
                    } elseif (opcode == 0x81) {  // DUP2
                        return Some((pushInstruction(0x41, restOfCode), evmJumpTable));  // dup1
                    } elseif (opcode == 0x82) {  // DUP3
                        return Some((pushInstruction(0x42, restOfCode), evmJumpTable));  // DUP2
                    } elseif ( (opcode >= 0x83) && (opcode <= 0x8f) ) {
                        return Some((pushDupn(opcode-0x80, restOfCode), evmJumpTable));
                    }
                } else {
                    if (opcode == 0x90) {  // SWAP1
                        return Some((pushInstruction(0x43, restOfCode), evmJumpTable));  // swap1
                    } elseif (opcode == 0x91) {  // SWAP2
                        return Some((pushInstruction(0x44, restOfCode), evmJumpTable));  // swap2
                    } elseif ( (opcode >= 0x92) && (opcode <= 0x9f) ) {
                        return Some((pushSwapn(opcode-0x8f, restOfCode), evmJumpTable));
                    }
                }
            } else {
                if (opcode < 0xa3) {
                    if (opcode == 0xa0) { // LOG0
                        return pushEvmInsnCall(evmOp_log0, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xa1) { // LOG1
                        return pushEvmInsnCall(evmOp_log1, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xa2) { // LOG2
                        return pushEvmInsnCall(evmOp_log2, restOfCode, evmJumpTable);
                    }
                } else {
                    if (opcode == 0xa3) { // LOG3
                        return pushEvmInsnCall(evmOp_log3, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xa4) { // LOG0
                        return pushEvmInsnCall(evmOp_log4, restOfCode, evmJumpTable);
                    }
                }
            }
        } else {
            if (opcode < 0xf4) {
                if (opcode < 0xf0) {
                    if (opcode == 0xe1) { // SLOADBYTES
                        return pushEvmInsnCall(evmOp_sloadbytes, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xe2) { // SSTOREBYTES
                        return pushEvmInsnCall(evmOp_sstorebytes, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xe3) { // SSIZE
                        return pushEvmInsnCall(evmOp_ssize, restOfCode, evmJumpTable);
                    }
                } else {
                    if (opcode == 0xf0) {  // CREATE
                        return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                    } elseif (opcode == 0xf1) { // CALL
                        return pushEvmInsnCall(evmOp_call, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xf2) { // CALLCODE
                        return pushEvmInsnCall(evmOp_ssize, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xf3) { // RETURN
                        return pushEvmInsnCall(evmOp_return, restOfCode, evmJumpTable);
                    }
                }
            } else {
                if (opcode < 0xfc) {
                    if (opcode == 0xf4) { // DELEGATECALL
                        return pushEvmInsnCall(evmOp_delegatecall, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xf5) {  // CREATE2
                        return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
                    } elseif (opcode == 0xfa) { // STATICCALL
                        return pushEvmInsnCall(evmOp_staticcall, restOfCode, evmJumpTable);
                    }
                } else {
                    if (opcode == 0xfc) { // TXEXECGAS
                        return pushEvmInsnCall(evmOp_txexecgas, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xfd) { // REVERT
                        return pushEvmInsnCall(evmOp_revert, restOfCode, evmJumpTable);
                    } elseif (opcode == 0xfe) { // INVALID
                        let (doCall, jumpTable) = pushEvmInsnCall(
                            evmOp_revert,
                            restOfCode,
                            evmJumpTable
                        )?;
                        return Some((
                            pushValue(
                                0,
                                pushValue(
                                    0,
                                    doCall
                                )
                            ),
                            jumpTable
                        ));
                    } elseif (opcode == 0xff) { // SELFDESTRUCT
                        return pushEvmInsnCall(evmOp_selfdestruct, restOfCode, evmJumpTable);
                    }
                }
            }
        }
    }

    // opcode was not found, so return failure
    return None<(AvmCodePoint, map<uint, AvmCodePoint>)>;
}

impure func pushEvmInsnDenomCheck(
    opcode: uint, 
    restOfCode: AvmCodePoint,
    evmJumpTable: map<uint, AvmCodePoint>
) -> option<(AvmCodePoint, map<uint, AvmCodePoint>)> {
    // Deal with the EVM instructions that can "divide by zero" or the equivalent.
    // EVM defines these to return zero if the denominator is zero.
    // So we need to generate a little conditional to handle the special case.
    let doTheOp = pushInstruction(opcode, restOfCode);
    return Some((
        pushInstruction(
            0x41,  // dup1
            pushInstructionImm(
                0x35,  // cjump
                doTheOp,
                pushInstruction(
                    0x73,  // error
                    doTheOp
                )
            )
        ),
        evmJumpTable
    ));
}

impure func pushDupn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a dupN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    // Note that N here uses the AVM semantics, which is off-by-one from the EVM semantics.
    if (n == 2) {
        return pushInstruction(0x42, restOfCode);  //dup2
    } else {
        return pushInstruction(
            0x38,  // auxpush,
            pushDupn(
                n-1,
                pushInstruction(
                    0x39,  // auxpop
                    pushInstruction(
                        0x43,  // swap1
                        restOfCode
                    )
                )
            )
        );
    }
}

impure func pushSwapn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a swapN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    if (n == 2) {
        return pushInstruction(0x44, restOfCode);  // swap2
    } else {
        return pushInstruction(
            0x43, // swap1
            pushInstruction(
                0x38, // auxpush
                pushSwapn(
                    n-1,
                    pushInstruction(
                        0x39, // auxpop
                        pushInstruction(
                            0x43, // swap1
                            restOfCode
                        )
                    )
                )
            )
        );
    }
}

impure func pushEvmInsnCall(
    evmOp: func(), 
    restOfCode: AvmCodePoint,
    evmJumpTable: map<uint, AvmCodePoint>
) -> option<(AvmCodePoint, map<uint, AvmCodePoint>)> {
    // Some EVM instructions compile to a procedure call to some Mini code.
    // Generate the appropriate procedure call.
    // Note that the EVM code will already have put the args to the call on the stack,
    //     and the Mini code will leave return values on the stack.
    return Some((
        pushValue(
            restOfCode,  // push return address
            pushInstructionImm(
                0x34, // jump
                evmOp,
                restOfCode
            )
        ),
        evmJumpTable,
    ));
}

func isKnownOpcode(opcode: uint) -> bool {  // return true iff opcode is a known EVM opcode
    return ( (opcode >= 0x00) && (opcode <= 0x0b) )
        || ( (opcode >= 0x10) && (opcode <= 0x1d) )
        || (opcode == 0x20)
        || ( (opcode >= 0x30) && (opcode <= 0x45) )
        || ( (opcode >= 0x50) && (opcode <= 0x5b) )
        || ( (opcode >= 0x60) && (opcode <= 0xa4) )
        || ( (opcode >= 0xf0) && (opcode <= 0xf5) )
        || (opcode == 0xfa)
        || ( (opcode == 0xfd) && (opcode <= 0xff) );
}
