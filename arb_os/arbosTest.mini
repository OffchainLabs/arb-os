//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_get64;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_copy;

use std::bytestream::bytestream_new;

use std::storageMap::storageMap_serialize;
use std::storageMap::storageMap_deserialize;
use std::storageMap::storageMap_new;
use std::storageMap::storageMap_set;

use accounts::Account;
use accounts::pristineAccount;
use accounts::account_setContractInfo;
use accounts::account_setStorageCell;
use accounts::account_setStorage;
use accounts::account_getAllStorage;
use accounts::account_getNextSeqNum;
use accounts::account_getEthBalance;
use accounts::account_setNextSeqNum;
use accounts::account_getBalance;
use accounts::account_addToEthBalance;
use accounts::account_deductFromEthBalance;
use accounts::accountStore_forall;
use accounts::accountStore_get;
use accounts::account_getSerializedEVMState;

use chainParameters::chainParams_getOrDie;

use std::codeSegment::translateEvmCodeSegment;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_revert_knownCodePc;
use evmOps::evmOp_revertIfStatic;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_setAccount;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallStack_getAccountInCurrentContext;
use evmCallStack::evmCallStack_setAccountInCurrentContext;
use evmCallStack::evmCallStack_getAccountStoreInCurrentContext;


public view write throw func arbosTest_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if bytearray_size(calldata) < 4 {
            evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 1, 0, 0);
        }
        let funcCode = getFuncCode(calldata);
        if funcCode == const::funcCode_ArbosTest_installAccount {
            arbosTest_installAccount(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_getMarshalledStorage {
            arbosTest_getMarshalledStorage(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_getAccountInfo {
            arbosTest_getAccountInfo(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_burnArbGas {
            arbosTest_burnArbGas(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_setNonce {
            arbosTest_setNonce(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_setBalance {
            arbosTest_setBalance(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_setCode {
            arbosTest_setCode(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_setState {
            arbosTest_setState(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_store {
            arbosTest_store(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_getAllAccountAddresses {
            arbosTest_getAllAccountAddresses(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_getAllAccountHashes {
            arbosTest_getAllAccountHashes(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbosTest_getSerializedEVMState {
            arbosTest_getSerializedEVMState(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 2, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(19);
    }
}

func getFuncCode(ba: ByteArray) -> uint {
    bytearray_get256(ba, 0) >> 224
}

view write throw func arbosTest_installAccount(topFrame: EvmCallFrame, calldata: ByteArray) { // (bool, uint, uint, bytes, bytes)
    evmOp_revertIfStatic();

    // Verify that this has been called by address zero.
    // This ensures that this method can only be called (1) in testing, or (2) by the EthBridge.
    let caller = evmCallFrame_getCaller(topFrame);
    if caller != address(0) {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 10, 0, 0);
    }

    if bytearray_size(calldata) <= 4+5*32 {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 11, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let isEOA = bytearray_get256(calldata, 4+32) != 0;
    let balance = bytearray_get256(calldata, 4+2*32);
    let nonce = bytearray_get256(calldata, 4+3*32);

    let acct = pristineAccount(addr) with {
        ethBalance: balance
    } with {
        nextSeqNum: nonce
    };

    if ! isEOA {
        let codeSize = bytearray_get256(calldata, 4+6*32);
        let code = bytearray_extract(calldata, 4+7*32, codeSize);
        let storageOffset = 4 + 7*32 + 32*((codeSize+31)/32);
        let storageSize = bytearray_get256(calldata, storageOffset);
        let marshalledStorage = bytearray_extract(calldata, storageOffset+32, storageSize);

        if let Some(initStorage) = storageMap_deserialize(marshalledStorage) {
            let (startCodePoint, evmJumpTable, _) = translateEvmCodeSegment(bytestream_new(code), false);
            acct = account_setContractInfo(
                acct,
                code,
                evmJumpTable,
                startCodePoint,
                initStorage,
                false,
            );
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 12, 0, 0);
        }
    }

    if evmCallStack_setAccount(addr, acct) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 13, 0, 0);
    }
}

view write throw func arbosTest_getMarshalledStorage(topFrame: EvmCallFrame, calldata: ByteArray) { // (address) -> bytes
    // Return the marshalled storage for the contract at addr. Revert if no contract at that address.
    let caller = evmCallFrame_getCaller(topFrame);
    if caller != address(0) {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 20, 0, 0);
    }

    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 21, 0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    if let Some(storage) = account_getAllStorage(evmCallFrame_getAccount(topFrame, addr)) {
        let marshalledStorage = storageMap_serialize(storage);
        let msSize = bytearray_size(marshalledStorage);
        let mem = bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 64),
            32,
            msSize
        );
        mem = bytearray_copy(marshalledStorage, 0, mem, 64, msSize);
        if evmCallStack_setTopFrameMemory(mem) {
            evmOp_return(0, 64+msSize);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 22, 0, 0);
        }
    } else {
        evmOp_return(0, 0);  // tests expect a report of empty storage if there is no storage
    }
}

view write throw func arbosTest_getAccountInfo(topFrame: EvmCallFrame, calldata: ByteArray) { // (address) -> bytes
    // Return the balance, nonce, and marshalled storage for the contract at addr. Revert if no contract at that address.
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 20, 0, 0);
    }

    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 21, 0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    let acct = evmCallFrame_getAccount(topFrame, addr);
    let mem = bytearray_set256(
        bytearray_set256(bytearray_new(0), 0, account_getEthBalance(acct)),
        32,
        account_getNextSeqNum(acct),
    );
    if let Some(storage) = account_getAllStorage(acct) {
        let marshalledStorage = storageMap_serialize(storage);
        let msSize = bytearray_size(marshalledStorage);
        mem = bytearray_copy(marshalledStorage, 0, mem, 64, msSize);
    }
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, bytearray_size(mem));
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 22, 0, 0);
    }
}

view write throw func arbosTest_burnArbGas(_topFrame: EvmCallFrame, calldata: ByteArray) {
    // Burn a specified amount of ArbGas
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownCodePc(address(const::Address_ArbosTest), 30, 0, 0);
    }
    let gasToBurn = bytearray_get256(calldata, 4) * chainParams_getOrDie(const::Atom_Param_AvmGasPerArbGas);
    let gasLeft = getGas();
    if gasToBurn >= gasLeft {
        gasToBurn = gasLeft - 1;
    }
    setGas(gasLeft - gasToBurn);
    evmOp_return(0, 0);
}

view write throw func arbosTest_setNonce(topFrame: EvmCallFrame, calldata: ByteArray) {
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownPc(40, 0, 0);
    }
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(41, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let newNonce = bytearray_get256(calldata, 36);
    evmCallStack_setAccountInCurrentContext(
        addr,
        account_setNextSeqNum(
            evmCallStack_getAccountInCurrentContext(addr),
            newNonce,
        ),
    );
    evmOp_return(0, 0);
}

view write throw func arbosTest_setBalance(topFrame: EvmCallFrame, calldata: ByteArray) {
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownPc(50, 0, 0);
    }
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(51, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let newBalance = bytearray_get256(calldata, 36);
    let account =  evmCallStack_getAccountInCurrentContext(addr);
    let oldBalance = account_getBalance(account);
    if oldBalance <= newBalance {
        account = account_addToEthBalance(account, newBalance - oldBalance);
    } else {
        if let Some(resaccount) = account_deductFromEthBalance(account, oldBalance - newBalance) {
            account = resaccount;
        } else {
            evmOp_revert_knownPc(52, 0, 0);
        }
    }
    evmCallStack_setAccountInCurrentContext(addr, account);
    evmOp_return(0, 0);
}

view write throw func arbosTest_setCode(topFrame: EvmCallFrame, calldata: ByteArray) {
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownPc(60, 0, 0);
    }
    if bytearray_size(calldata) < 4+3*32 {
        evmOp_revert_knownPc(61, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let account =  evmCallStack_getAccountInCurrentContext(addr);

    let codeSize = bytearray_get256(calldata, 4+2*32);
    if bytearray_size(calldata) < 4 + 3*32 + codeSize {
        evmOp_revert_knownPc(62, 0, 0);
    }
    let code = bytearray_extract(calldata, 4+3*32, codeSize);

    let (startCodePoint, evmJumpTable, _) = translateEvmCodeSegment(bytestream_new(code), false);

    account = account_setContractInfo(
        account,
        code,
        evmJumpTable,
        startCodePoint,
        if let Some(storage) = account_getAllStorage(account) {
            storage
        } else {
            storageMap_new()
        },
        false,
    );

    evmCallStack_setAccountInCurrentContext(addr, account);
    evmOp_return(0, 0);
}

view write throw func arbosTest_setState(topFrame: EvmCallFrame, calldata: ByteArray) {
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownPc(70, 0, 0);
    }
    if bytearray_size(calldata) < 4+3*32 {
        evmOp_revert_knownPc(71, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let account =  evmCallStack_getAccountInCurrentContext(addr);

    let storageSize = bytearray_get256(calldata, 4 + 2*32);
    if bytearray_size(calldata) < 4+3*32 + storageSize {
        evmOp_revert_knownPc(72, 0, 0);
    }
    let stateStorage = bytearray_extract(calldata, 4 + 3*32, storageSize);

    if let Some(storage) = storageMap_deserialize(stateStorage) {
        account = account_setStorage(account, storage);
    } else {
        evmOp_revert_knownPc(73, 0, 0);
    }
    evmCallStack_setAccountInCurrentContext(addr, account);
    evmOp_return(0, 0);
}

view write throw func arbosTest_store(topFrame: EvmCallFrame, calldata: ByteArray) {
    if evmCallFrame_getCaller(topFrame) != address(0) {
        evmOp_revert_knownPc(80, 0, 0);
    }
    if bytearray_size(calldata) != 4+3*32 {
        evmOp_revert_knownPc(81, 0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    let account =  evmCallStack_getAccountInCurrentContext(addr);

    let key = bytearray_get256(calldata, 4+32);
    let val = bytearray_get256(calldata, 4+32*2);
    account = if let Some(resaccount) = account_setStorageCell(account, key, val) {
        resaccount
    } else {
        let storage = storageMap_new();
        storage = storageMap_set(storage, key, val);
        account_setStorage(account, storage)
    };
    evmCallStack_setAccountInCurrentContext(addr, account);

    evmOp_return(0, 0);
}

view write throw func arbosTest_getAllAccountAddresses(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(90, 0, 0);
    }

    let ret = accountStore_forall::<ByteArray>(
        evmCallStack_getAccountStoreInCurrentContext(),
        throw closure(acct: Account, state: ByteArray) -> ByteArray {
            bytearray_set256(state, bytearray_size(state), uint(acct.addr))
        },
        bytearray_new(0),
    );
    ret = bytearray_copy(
        ret,
        0,
        bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 32),
            32,
            bytearray_size(ret),
        ),
        64,
        bytearray_size(ret)
    );
    if evmCallStack_setTopFrameMemory(ret) {
        evmOp_return(0, bytearray_size(ret));
    } else {
        evmOp_revert_knownPc(91, 0, 0);
    }
}

view write throw func arbosTest_getAllAccountHashes(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(100, 0, 0);
    }

    let ret = accountStore_forall::<ByteArray>(
        evmCallStack_getAccountStoreInCurrentContext(),
        throw closure(acct: Account, state: ByteArray) -> ByteArray {
            bytearray_set256(state, bytearray_size(state), uint(hash(acct)))
        },
        bytearray_new(0),
    );
    ret = bytearray_copy(
        ret,
        0,
        bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 32),
            32,
            bytearray_size(ret),
        ),
        64,
        bytearray_size(ret)
    );
    if evmCallStack_setTopFrameMemory(ret) {
        evmOp_return(0, bytearray_size(ret));
    } else {
        evmOp_revert_knownPc(101, 0, 0);
    }
}

view write throw func arbosTest_getSerializedEVMState(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(110, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let ret = account_getSerializedEVMState(
        accountStore_get(evmCallStack_getAccountStoreInCurrentContext(), addr)
    );
    ret = bytearray_copy(
        ret,
        0,
        bytearray_set256(
            bytearray_set256(bytearray_new(0), 0, 32),
            32,
            bytearray_size(ret),
        ),
        64,
        bytearray_size(ret)
    );
    if evmCallStack_setTopFrameMemory(ret) {
        evmOp_return(0, bytearray_size(ret));
    } else {
        evmOp_revert_knownPc(111, 0, 0);
    }
}
