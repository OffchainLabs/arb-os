//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytestream::ByteStream;

use std::bytearray::bytearray_getByte;
use std::bytestream::bytestream_new;
use std::bytestream::bytestream_getN;
use std::bytestream::bytestream_get256;
use std::bytestream::bytestream_skipBytes;
use std::bytestream::bytestream_bytesReadSoFar;
use std::bytestream::bytestream_getCalldataUnits;
use std::bytestream::bytestream_atEof;

use chainParameters::chainParams_getDefaultAggregator;

use inbox::IncomingRequest;

use std::rlp::rlp_decodeUint;


type MessageBatch = struct {
    template: IncomingRequest,
    stream: ByteStream,
    nested: bool,
    numSoFar: uint,
};

public func messageBatch_tryNew(msg: IncomingRequest) -> option<MessageBatch> {
    if ((msg.kind == const::L1MessageType_L2) || (msg.kind == const::L1MessageType_L2ForGasEstimation))
                  && (bytearray_getByte(msg.msgData, 0) == const::L2MessageType_batch) {
        let stream = bytestream_new(msg.msgData);
        stream = bytestream_skipBytes(stream, 1)?;    // skip past type byte in message

        // aggregator credit goes to the original aggregator of the request, if any, otherwise to sender of request
        let (aggregator, gasEstimationParams) = if msg.kind == const::L1MessageType_L2 {
            let agg = msg.sender;
            if let Some(aggInfo) = msg.aggregator {
                if let Some(agg2) = aggInfo.aggregator {
                    agg = agg2;
                }
            }
            (agg, None)
        } else {
            let (*stream, agg) = bytestream_get256(stream)?;
            let (*stream, limit) = bytestream_get256(stream)?;
            (
                address(agg),
                Some(struct {
                    computeGasLimit: limit,
                    ignoreGasPrice: false,
                    ignoreMaxGas: false,
                })
            )
        };

        let nested = msg.provenance.parentRequestId != 0;
        Some(
            struct {
                template: {
                    set msg.provenance = struct {
                        l1SeqNum: msg.provenance.l1SeqNum,
                        parentRequestId: msg.requestId,
                        indexInParent: 0,
                    };
                    set msg.aggregator = Some(struct {
                        aggregator: Some(aggregator),
                        calldataUnits: 0,
                    });
                    set msg.gasEstimationParams = gasEstimationParams;
                    msg
                },
                stream: stream,
                nested: nested,
                numSoFar: 0,
            }
        )
    } else {
        // it's not a batch
        None
    }
}

public view func messageBatch_get(batch: MessageBatch) -> option<(IncomingRequest, MessageBatch)> {
    // returns next message in the batch (and updated batch), or None if no more messages in batch
    let (stream, l2MsgLength) = rlp_decodeUint(batch.stream)?;

    if let Some(res) = bytestream_getN(stream, l2MsgLength) {
        let streamBeforeCalldata = stream;
        let (*stream, extractedL2data) = res;

        Some((
            {
                let request = batch.template;
                set request.msgData = extractedL2data;
                set request.requestId = uint(hash(bytes32(batch.template.requestId), bytes32(batch.numSoFar)));
                set request.provenance.indexInParent = batch.numSoFar;
                set request.aggregator = Some(struct {
                    aggregator: (batch.template.aggregator?).aggregator,
                    calldataUnits: bytestream_getCalldataUnits(
                        streamBeforeCalldata,
                        bytestream_bytesReadSoFar(stream) - bytestream_bytesReadSoFar(streamBeforeCalldata),
                    ),
                });
                if l2MsgLength == 0 // The aggregator is signaling an end of block
                        && request.sender == chainParams_getDefaultAggregator() // They are the default aggregator
                        && !batch.nested // This isn't a nested batch
                        && bytestream_atEof(stream) // This is the end of the batch
                {
                    set request.kind = const::L1MessageType_endOfBlock;
                }
                request
            },
            {
                let tmpBatch = batch;
                set tmpBatch.stream = stream;
                set tmpBatch.numSoFar = tmpBatch.numSoFar + 1;
                tmpBatch
            }
        ))
    } else {
        None
    }
}
