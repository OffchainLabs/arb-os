//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type MarshalledBytes;
import type ByteArray;
import type ByteStream;

import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, offset: uint) -> uint;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytearray_setByte(ba: ByteArray, offset: uint, val: uint) -> ByteArray;
import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytearray_marshalFull(ba: ByteArray) -> MarshalledBytes;
import func bytearray_extract(ba: ByteArray, offset: uint, nbytes: uint) -> ByteArray;
import func bytestream_new(ba: ByteArray) -> ByteStream;
import func bytestream_get64(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_getN(bs: ByteStream, nbytes: uint) -> option<(ByteStream, ByteArray)>;
import func bytestream_skipBytes(bs: ByteStream, nbytes: uint) -> option<ByteStream>;
import func marshalledBytes_firstByte(mb: MarshalledBytes) -> uint;
import func marshalledBytes_hash(mb: MarshalledBytes) -> bytes32;


// This structure defines an incoming request.
// It is declared identically in inbox.mini and elsewhere.
type IncomingRequest = struct {
    kind: uint,               // type of message
    blockNumber: uint,        // block number of the L1 block
    timestamp: uint,          // timestamp of the L1 block
    sender: address,          // address of the sender
    requestId: uint,
    msgData: MarshalledBytes  // kind-specific data, as a marshalled bytearray
}

type MessageBatch = struct {
    template: IncomingRequest,
    stream: ByteStream,
    numSoFar: uint,
}

public func messageBatch_tryNew(msg: IncomingRequest) -> option<MessageBatch> {
    if ( (msg.kind == 3) && (marshalledBytes_firstByte(msg.msgData) == 3) ) {
        let stream = bytestream_new(bytearray_unmarshalBytes(msg.msgData));
        stream = bytestream_skipBytes(stream, 1)?;
        return Some(
            struct {
                template: msg,
                stream: stream,
                numSoFar: 0,
            }
        );
    } else {
        // it's not a batch
        return None;
    }
}

public func messageBatch_get(batch: MessageBatch) -> option<(IncomingRequest, MessageBatch)> {
    // returns next message in the batch (and updated batch), or None if no more messages in batch
    let (stream, l2MsgLength) = bytestream_get64(batch.stream)?;
    let (bs, extractedL2data) = bytestream_getN(stream, l2MsgLength)?;
    stream = bs;

    return Some((
        batch.template with {
            msgData: bytearray_marshalFull(extractedL2data)
        } with {
            requestId: uint(hash(bytes32(batch.template.requestId), bytes32(batch.numSoFar)))
        },
        batch with {
            stream: stream
        } with {
            numSoFar: batch.numSoFar + 1
        }
    ));
}
