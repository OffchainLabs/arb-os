//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use chainParameters::chainParams_chainId;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_copy;
use std::bytearray::bytearray_getCalldataUnits;

use std::bytestream::ByteStream;
use std::bytestream::bytestream_new;
use std::bytestream::bytestream_getByte;
use std::bytestream::bytestream_getN;
use std::bytestream::bytestream_getRemainingBytes;

use std::expandingIntArray::ExpandingIntArray;
use std::expandingIntArray::expandingIntArray_new;
use std::expandingIntArray::expandingIntArray_get;
use std::expandingIntArray::expandingIntArray_set;

use std::keccak::keccak256;

use std::rlp::rlp_encodeUint;

use accounts::safeGetGlobalAccountStore;
use accounts::accountStore_get;
use accounts::account_getNextSeqNum;
use accounts::account_getAggregatorDecompressionState;

use evmCallStack::evmCallStack_getAccount;
use evmCallStack::evmCallStack_addStorageCharge;
use inbox::IncomingRequest;
use gasAccounting::txFeeStats_zero;
use messages::TxRequestData;

use std::rlp::rlp_decodeAddress;
use std::rlp::rlp_decodeUint;
use std::rlp::rlp_encodeMessageInfo;

use signedTx::recoverSigner;

// The IndexedAddressTable creates a mapping from integer indices to addresses.
// This allows an address to be specified by giving an index, which is useful in compression.
type IndexedAddressTable = struct {
    byIndex: ExpandingIntArray,
    byAddress: map<address, uint>,
    size: uint
};

var globalIndexedAddressTable: IndexedAddressTable;

public write func decompression_init() {
    globalIndexedAddressTable = addressTable_new();
}

public view func getGlobalAddressTable() -> IndexedAddressTable {
    globalIndexedAddressTable
}

public write func setGlobalAddressTable(gat: IndexedAddressTable) {
    globalIndexedAddressTable = gat;
}

public func addressTable_new() -> IndexedAddressTable {
    struct {
        byIndex: expandingIntArray_set(expandingIntArray_new(), 0, 0),
        byAddress: newmap<address, uint> with { [address(0)] = 0 },
        size: 1
    }
}

public func addressTable_size(iat: IndexedAddressTable) -> uint {
    iat.size
}

public func addressTable_getByIndex(iat: IndexedAddressTable, index: uint) -> option<address> {
    if index >= iat.size {
        None
    } else {
        Some(address(expandingIntArray_get(iat.byIndex, index)))
    }
}

public func addressTable_getByAddress(iat: IndexedAddressTable, addr: address) -> option<uint> {
    iat.byAddress[addr]
}

public func addressTable_getByAddressAlloc(iat: IndexedAddressTable, addr: address) -> (
    IndexedAddressTable,   // updated table (unmodified if addr was already in the table)
    uint,                  // index corresponding to addr
    bool                   // true iff we allocated new space in the table for addr
) {
    // get the index corresponding to an address
    // if the address isn't in the table yet, add it to the table and return the resulting index
    if let Some(val) = iat.byAddress[addr] {
        (iat, val, false)
    } else {
        // allocate space in the table
        (
            {
                set iat.byIndex = expandingIntArray_set(iat.byIndex, iat.size, uint(addr));
                set iat.byAddress[addr] = iat.size;
                set iat.size = 1 + iat.size;
                iat
            },
            iat.size,
            true,
        )
    }
}

public view write func decompressAddress(
    stream: ByteStream,
    addIfNotInTable: bool,
) -> option<(ByteStream, address)> {
    // Returns None if insufficient data in stream
    // A compressed address is one of three things:
    //   * a single byte 0x80, which is interpreted as the null address
    //   * an RLP-encoding of a value 1-19 bytes in length, which is interpreted as an index into
    //           the IndexedAddressTable, or
    //   * an RLP-encoding of a 20-byte value which is interpreted as an address.
    // In the last case, the address is added to the globalIndexedAddressTable if it is not already there

    let (ustr, firstByte) = bytestream_getByte(stream)?;
    if firstByte == 0x80 {
        // return the updated stream
        Some((ustr, address(0)))
    } else if firstByte < 0x80 + 20 {
        // don't update the stream, because we want to re-start from the beginning
        let (*stream, decodedUint) = rlp_decodeUint(stream)?;
        Some((stream, addressTable_getByIndex(globalIndexedAddressTable, decodedUint)?))
    } else {
        let (*stream, addr) = rlp_decodeAddress(stream)?;
        if addIfNotInTable {
            let (giat, _, changed) = addressTable_getByAddressAlloc(globalIndexedAddressTable, addr);
            if (changed) {
                evmCallStack_addStorageCharge(2, None<(address, uint)>);   // charge current tx for 2 storage cells
                globalIndexedAddressTable = giat;
            }
        }

        Some((stream, addr))
    }
}

public func decompressTokenAmount(stream: ByteStream) -> option<(ByteStream, uint)> {
    let (*stream, base) = rlp_decodeUint(stream)?;
    Some(if base == 0 {
        (stream, 0)
    } else {
        let (*stream, sh) = bytestream_getByte(stream)?;
        (stream, base * asm(10, sh) uint { exp })
    })
}

public view write func decompressAndVerifyEcdsaSignedTx(
    ba: ByteArray,
    originalRequest: IncomingRequest
) -> option<TxRequestData> {
    let sz = bytearray_size(ba);
    if sz <= 66 {
        return None;
    }

    let r = bytearray_get256(ba, sz-65);
    let s = bytearray_get256(ba, sz-33);
    let v = bytearray_getByte(ba, sz-1);
    let body = bytearray_extract(ba, 1, sz-66);

    let (_, txRequest) = decompressTx(bytestream_new(body), None)?;

    let (seqNum, calldataUnitsDelta) = if originalRequest.kind == const::L1MessageType_L2ForGasEstimation {
        let realSnum = account_getNextSeqNum(accountStore_get(safeGetGlobalAccountStore(), originalRequest.sender));
        (
            realSnum,
            int(bytearray_getCalldataUnits(rlp_encodeUint(realSnum, bytearray_new(0), 0).0)) - int(16),
                            // subtract 16 because initial seqNum was 0, which RLP-encodes to [0x80], which costs 16
        )
    } else {
        (
            if let Some(sn) = txRequest.seqNum { sn } else { 0 },
            int(0)
        )
    };

    if v < 2 {
        // it's an EIP-155 signature, with the v value stored as 0/1 for space efficiency
        // recover the original v
        v = 35 + 2 * chainParams_chainId() + (1 - (v % 2));
    }
    let tx = struct {
        seqNum: seqNum,
        gasPrice: txRequest.gasPrice,
        gasLimit: txRequest.maxGas,
        to: txRequest.calleeAddr,
        value: txRequest.value,
        data: txRequest.calldata,
        v: v,
        r: r,
        s: s
    };
    let signer = if originalRequest.kind == const::L1MessageType_L2ForGasEstimation {
        originalRequest.sender
    } else {
        recoverSigner(tx)?
    };
    let encodedMessage = rlp_encodeMessageInfo(  // recompute the original message that the user must have signed
        tx.seqNum,
        tx.gasPrice,
        tx.gasLimit,
        tx.to,
        tx.value,
        tx.data,
        tx.v,
        tx.r,
        tx.s,
    );

    set originalRequest.sender = signer;
    set originalRequest.msgData = bytearray_copy(
        encodedMessage,
        0,
        bytearray_setByte(bytearray_new(0), 0, 4),
        1,
        bytearray_size(encodedMessage)
    );
    if calldataUnitsDelta != int(0) {
        if let Some(aggInfo) = originalRequest.aggregator {
            set originalRequest.aggregator = Some(aggInfo with { calldataUnits: uint(int(aggInfo.calldataUnits) + calldataUnitsDelta) });
        }
    }
    if originalRequest.kind == const::L1MessageType_L2ForGasEstimation {
        if tx.gasPrice == 0 || tx.gasPrice == ~0 {
            // gas estimation tx requested zero gas, so ignore gas funding and pay whatever price is necessary to run
            set originalRequest.gasEstimationParams = if let Some(gep) = originalRequest.gasEstimationParams {
                Some(gep with { ignoreGasPrice: true })
            } else {
                None
            };
            tx = tx with { gasPrice: ~0 };
        }
        if tx.gasLimit == 0 {
            // gas estimation tx requested zero maxGas, so ignore use max gas allowed
            set originalRequest.gasEstimationParams = if let Some(gep) = originalRequest.gasEstimationParams {
                Some(gep with { ignoreMaxGas: true })
            } else {
                None
            };
        }
    }

    Some(
        {
            set txRequest.caller = signer;
            set txRequest.gasPayer = signer;
            set txRequest.incomingRequest = if originalRequest.kind == const::L1MessageType_L2ForGasEstimation {
                originalRequest
            } else {
                originalRequest with {
                    requestId: uint(keccak256(encodedMessage, 0, bytearray_size(encodedMessage)))
                }
            };
            set txRequest.seqNum = Some(seqNum);
            txRequest
        }
    )
}

view write func decompressTx(
    stream: ByteStream,
    maybeSender: option<address>,   // tx sender, or None if the caller doesn't know the sender yet
) -> option<(ByteStream, TxRequestData)> {
    // decompress a compressed transaction, reading it from ByteStream
    // return None if insufficient data in the ByteStream
    // the TxRequestData we return will have an invalid dummy value in the incomingRequest field,
    //         and we'll assume the caller will supply that later
    //
    // caller will tell us the tx sender if it knows the sender
    // (knowing the sender lets us compress the sequence number more efficiently)
    // if we aren't given the sender address, we'll return a dummy value in that slot of the TxRequestData,
    //         and assume the caller will supply it later

    let funcTableEntry = None<FunctionTableEntry>;
    let (*stream, firstByte) = bytestream_getByte(stream)?;  // peek at first byte of stream
    if firstByte != 0xff {
        return None;     // this feature isn't fully tested, so disable it for now
    }
    let (sender, seqNum) = if let Some(senderAddr) = maybeSender {
        let (*stream, seqNumByte) = bytestream_getByte(stream)?;
        let dbSeqNum = account_getNextSeqNum(
            accountStore_get(
                safeGetGlobalAccountStore(),
                address(senderAddr)
            )
        );
        let seqNum = (dbSeqNum & ~0xff) | seqNumByte;
        if seqNum < dbSeqNum {
            seqNum = seqNum + 256;
        }
        (senderAddr, seqNum)
    } else {
        let (*stream, rawSeqNum) = rlp_decodeUint(stream)?;
        (address(0), rawSeqNum)
    };

    let (*stream, gasPrice) = rlp_decodeUint(stream)?;

    let gasLimit = if let Some(tableEntry) = funcTableEntry {
        tableEntry.maxGas
    } else {
        let (*stream, maxGas) = rlp_decodeUint(stream)?;
        maxGas
    };

    let (*stream, toAddr) = decompressAddress(stream, true)?;
    let value = 0;
    let calldata = if let Some(tableEntry) = funcTableEntry {
        if tableEntry.payable {
            let (*stream, val) = decompressTokenAmount(stream)?;
            value = val;
        }
        let calldata = bytestream_getRemainingBytes(stream);
        bytearray_copy(
            calldata,
            0,
            unsafecast<ByteArray>(tableEntry.callDataPrefix),
            4,
            bytearray_size(calldata),
        )
    } else {
        let (*stream, val) = decompressTokenAmount(stream)?;
        value = val;
        bytestream_getRemainingBytes(stream)
    };
    Some((
        stream,
        struct {
            maxGas: gasLimit,
            gasPrice: gasPrice,
            seqNum: Some(seqNum),
            caller: sender,
            calleeAddr: toAddr,
            gasPayer: sender,
            value: value,
            calldata: calldata,
            nonMutating: false,
            isConstructor: (toAddr == address(0)),
            incomingRequest: unsafecast<IncomingRequest>(0),  // caller will fill this in
            feeStats: txFeeStats_zero(),
            fromRetryable: None,
            originalCaller: sender,
        }
    ))
}

type FunctionTableEntry = struct {
    callDataPrefix: any,    //FIXME: really a ByteArray, but compiler previously didn't allow array of imported type
    maxGas: uint,
    payable: bool,
};

type FunctionTable = []FunctionTableEntry;

type AggregatorDecompressionState = struct {
    functionTable: FunctionTable,
};

public func parseAggregatorFunctionTable(
    contents: ByteArray
) -> option<AggregatorDecompressionState> {
    let stream = bytestream_new(contents);
    let (*stream, numEntries) = rlp_decodeUint(stream)?;

    if numEntries > 1024 {   // hard limit on table size is 1024 entries, currently
        return None;
    }
    let ret = newarray<FunctionTableEntry>(numEntries);
    let i = 0;
    while i < numEntries {  //FORLOOP
        let (ustr, funcCode) = bytestream_getN(stream, 4)?;
        stream = ustr;
        let (ustr, payableByte) = bytestream_getByte(stream)?;
        stream = ustr;
        let (ustr, maxGas) = rlp_decodeUint(stream)?;
        stream = ustr;
        ret = ret with {
            [i] = struct {
                callDataPrefix: funcCode,
                maxGas: maxGas,
                payable: (payableByte != 0)
            }
        };
        i = i+1;
    }

    Some(struct { functionTable: ret })
}

public view func functionTableSize(addr: address) -> option<uint> {
    let funcTable = (account_getAggregatorDecompressionState(evmCallStack_getAccount(addr)?)?).functionTable;
    Some(len(funcTable))
}

public view func getFromFunctionTable(addr: address, index: uint) -> option<(uint, bool, uint)> {
    let funcTable = (account_getAggregatorDecompressionState(evmCallStack_getAccount(addr)?)?).functionTable;
    if index < len(funcTable) {
        let tableEntry = funcTable[index];
        Some((
            bytearray_get256(unsafecast<ByteArray>(tableEntry.callDataPrefix), 0),
            tableEntry.payable,
            tableEntry.maxGas
        ))
    } else {
        None
    }
}

