//
// Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::AccountStore;
use std::bytearray::ByteArray;

use core::kvs::Kvs;
use core::kvs::builtin_kvsForall;

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_addToEscrowUpToMax;
use accounts::accountStore_payFullyFromEscrow;
use accounts::accountStore_payFromEscrow;
use accounts::accountStore_transferEthBalance;
use accounts::account_getEthBalance;
use accounts::account_getNextSeqNum;
use accounts::account_getAggregatorToPay;
use accounts::account_setBaseTxFeeL1Gas;

use arbstatistics::arbStatistics_addToStorage;
use arbstatistics::arbStatistics_addToGasUsed;

use chainParameters::chainParams_get;
use chainParameters::chainParams_getOrDie;

use evmCallStack::evmCallStack_getAccountInCurrentContext;
use evmCallStack::evmCallStack_setAccountInCurrentContext;

use messages::TxRequestData;

use std::fixedpoint::FixedPoint;
use std::fixedpoint::fixedPoint_new;
use std::fixedpoint::fixedPoint_mulByUintTrunc;
use std::fixedpoint::fixedPoint_plusOne;
use std::fixedpoint::fixedPoint_div;

use std::addressSet::SetOfAddresses;
use std::addressSet::setOfAddresses_emptySet;
use std::addressSet::setOfAddresses_all;
use std::addressSet::setOfAddresses_add;
use std::addressSet::setOfAddresses_remove;
use std::addressSet::setOfAddresses_contains;
use std::addressSet::setOfAddresses_serialize;

use std::safeMath::safeAdd;
use std::safeMath::safeSub;
use std::safeMath::safeMul;
use std::safeMath::safeAddInt;
use std::safeMath::safeSubInt;

use std::stack::Stack;
use std::stack::stack_new;
use std::stack::stack_push;
use std::stack::stack_pop;

use inbox::inbox_currentArbBlockNumber;
use inbox::inbox_currentTimestamp;


type GasAccountingInfo = struct {
    txState: option<TxGasState>,       // status of currently active tx (if there is one)
    feeConfig: FeeConfig,              // fee configuration
    currentPrices: GasPrices,          // current prices for resources
    gasRemainingThisBlock: uint,       // amount of gas remaining for this Arbitrum block
    congestionState: CongestionState,  // state of congestion pricing algorithm
    speedLimitPerSecond: uint,         // nominal ArbGas available for computation per second
    pricingParams: PricingParameters,  // parameters that affect pricing
    gasAllocatedToThisBlock: uint,     // total amount of gas allocated to the current Arbitrum block
    retryablePrices: RetryablePrices,  // prices of retryable txs
    allowedSenders: SetOfAddresses,    // who is allowed to send txs
}

var gasAccountingInfo: GasAccountingInfo;

type GasPrices = struct {    // all prices in this struct are denominated in wei
    perL1CalldataUnit: uint,
    perStorageCell: uint,
    perArbGasBase: uint,
    perArbGasCongestion: uint,
    perArbGasTotal: uint,       // perArbGasBase + perArbGasCongestion
}

type CongestionState = struct {
    gasPool: int,         // amount of gas available for use (note: signed value; if negative, we have overused gas)
    lastArbBlockNumSeen: uint,
    lastTimestampSeen: uint,
    congestionPriceWei: uint,
}

type PricingParameters = struct {
    l1GasPerL1CalldataUnit: uint,
    l1GasPerStorage: uint,
    arbGasDivisor: uint,      // base ArbGas price is L1 gas price / arbGasDivisor
}

type FeeConfig = struct {
    baseFeeMultiplier: FixedPoint,   // multiply base fee by this to get total fee
    shareForNetFee: FixedPoint,      // total fee times this == network fee
}

type TxGasState = struct {        // this is the gas state of the currently running transaction
    gasInReserve: uint,           // how much gas is being held in reserve
    gasReservedForStorage: uint,  // how much gas is being reserved to pay for storage
    originalMax: uint,            // the tx's original maxGas value
    price: uint,                  // price of gas for this tx, in wei per unit of gas
    weiHeldForGas: uint,          // amount of currency we're holding to cover the current tx's gas use
    refundTo: address,            // who gets a refund for unused gas at the end, if there is any
}

type GasUsage = struct {
    gasUsed: uint,
    gasPriceWei: uint,
}

type RetryablePrices = struct {
    perTx: uint,
    perCalldataByte: uint,      // charge per byte, rather than per unit, because this covers cost of storage
    nextUpdateTimestamp: uint,
}

public impure func gasAccounting_init() {    // initialize on boot, before we have gotten the chain init message
    initGasPriceEstimator();
    setupParameters(true);
}

public impure func gasAccounting_notifyParamsChanged() {
    setupParameters(false);
}

impure func setupParameters(isInit: bool) {
    let l1GasPerL1CalldataUnit = chainParams_getOrDie(const::Atom_Param_L1GasPerL1CalldataUnit);
    let l1GasPerStorage = chainParams_getOrDie(const::Atom_Param_L1GasPerStorage);
    let arbGasDivisor = chainParams_getOrDie(const::Atom_Param_ArbGasDivisor);
    let pricingParams = struct {
        l1GasPerL1CalldataUnit: l1GasPerL1CalldataUnit,
        l1GasPerStorage: l1GasPerStorage,
        arbGasDivisor: arbGasDivisor,
    };

    let congestionState = initCongestionState(isInit);

    let netFeeRate = fixedPoint_new(
        chainParams_getOrDie(const::Atom_Param_NetworkFeeShareNumerator),
        chainParams_getOrDie(const::Atom_Param_NetworkFeeShareDenominator),
    );
    let baseFeeMultiplier = fixedPoint_plusOne(netFeeRate);
    let shareForNetFee = xif let Some(x) = fixedPoint_div(netFeeRate, baseFeeMultiplier) {
        x
    } else {
        panic
    };

    let feeConfig = struct {
        baseFeeMultiplier: baseFeeMultiplier,
        shareForNetFee: shareForNetFee,
    };

    let (gasPrices, retryablePrices) = setPrices(
        feeConfig,
        pricingParams,
        congestionState,
        struct {
            perTx: 0,
            perCalldataByte: 0,
            nextUpdateTimestamp: 0,
        }
    );
    gasAccountingInfo = struct {
        txState: xif (isInit) { None<TxGasState> } else { gasAccountingInfo.txState },
        feeConfig: feeConfig,
        currentPrices: gasPrices,
        gasRemainingThisBlock: uint(congestionState.gasPool),
        congestionState: congestionState,
        speedLimitPerSecond: chainParams_getOrDie(const::Atom_Param_SpeedLimitPerSecond),
        pricingParams: pricingParams,
        gasAllocatedToThisBlock: uint(congestionState.gasPool),
        retryablePrices: retryablePrices,
        allowedSenders: setOfAddresses_all(),
    };
}

impure func initCongestionState(isInit: bool) -> CongestionState {
    return struct {
        gasPool: int(chainParams_getOrDie(const::Atom_Param_GasPoolMax)),
        lastArbBlockNumSeen: xif (isInit) { 0 } else { inbox_currentArbBlockNumber() },
        lastTimestampSeen: xif (isInit) { 0 } else { inbox_currentTimestamp() },
        congestionPriceWei: 0,
    };
}

public impure func getGasAccountingParams() -> (uint, uint, uint) {
    return (
        chainParams_getOrDie(const::Atom_Param_SpeedLimitPerSecond),
        chainParams_getOrDie(const::Atom_Param_GasPoolMax),
        chainParams_getOrDie(const::Atom_Param_TxGasLimit),
    );
}

impure func feesEnabled() -> bool {
    return chainParams_getOrDie(const::Atom_Param_FeesEnabled) != 0;
}

impure func setPrices(
    _feeConfig: FeeConfig,
    params: PricingParameters,
    congestionState: CongestionState,
    oldRetryablePrices: RetryablePrices,
) -> (GasPrices, RetryablePrices) {
    oldRetryablePrices = setRetryablePrices(oldRetryablePrices);
    return xif (feesEnabled()) {
        let l1GasPrice = getL1GasPriceEstimate();
        let perArbGasBase = l1GasPrice / params.arbGasDivisor;
        let perArbGasCongestion = congestionState.congestionPriceWei;
        let perArbGasTotal = safeAdd(perArbGasBase, perArbGasCongestion);
        (
            struct {
                perL1CalldataUnit: safeMul(params.l1GasPerL1CalldataUnit, l1GasPrice),
                perStorageCell: safeMul(params.l1GasPerStorage, l1GasPrice),
                perArbGasBase: perArbGasBase,
                perArbGasCongestion: perArbGasCongestion,
                perArbGasTotal: perArbGasTotal,
            },
            oldRetryablePrices
        )
    } else {
        (
            struct {
                perL1CalldataUnit: 0,
                perStorageCell: 0,
                perArbGasBase: 0,
                perArbGasCongestion: 0,
                perArbGasTotal: 0,
            },
            oldRetryablePrices
        )
    };
}

impure func setRetryablePrices(oldRetryablePrices: RetryablePrices) -> RetryablePrices {
    return xif (oldRetryablePrices.nextUpdateTimestamp >= inbox_currentTimestamp()) {
        oldRetryablePrices
    } else {
        xif (feesEnabled()) {
            let gasPrice = getL1GasPriceEstimate();
            struct {
                perTx: safeMul(gasPrice, chainParams_getOrDie(const::Atom_Param_RetryablePriceBase)),
                perCalldataByte: safeMul(gasPrice, chainParams_getOrDie(const::Atom_Param_RetryablePricePerByteNumerator)) /
                                            chainParams_getOrDie(const::Atom_Param_RetryablePricePerByteDenominator),
                nextUpdateTimestamp: safeAdd(
                    inbox_currentTimestamp(),
                    chainParams_getOrDie(const::Atom_Param_RetryableTxRepriceIntervalSeconds)
                ),
            }
        } else {
            oldRetryablePrices with {
                nextUpdateTimestamp: safeAdd(
                    inbox_currentTimestamp(),
                    chainParams_getOrDie(const::Atom_Param_RetryableTxRepriceIntervalSeconds),
                )
            }
        }
    };
}

public impure func gasAccounting_getPricesInWei(aggregatorAddr: address) -> (uint, uint, uint, uint, uint, uint) {
    // This is intended to return data to users, so we add the network fee, to make get the total price they'll pay.
    let prices = gasAccountingInfo.currentPrices;
    let addNetworkFeeRate = gasAccountingInfo.feeConfig.baseFeeMultiplier;
    return (
        fixedPoint_mulByUintTrunc(addNetworkFeeRate, gasAccounting_getTxBaseFeeWei(Some(aggregatorAddr))),
        fixedPoint_mulByUintTrunc(addNetworkFeeRate, prices.perL1CalldataUnit),
        prices.perStorageCell,
        prices.perArbGasBase,
        prices.perArbGasCongestion,
        prices.perArbGasTotal,
    );
}

impure func gasAccounting_getTxBaseFeeWei(aggregatorAddr: option<address>) -> uint {
    return safeMul(getL1GasPriceEstimate(), gasAccounting_getTxBaseFeeL1Gas(aggregatorAddr));
}

public impure func gasAccounting_getTxBaseFeeL1Gas(aggregatorAddr: option<address>) -> uint {
    return xif (feesEnabled()) {
        xif let Some(addr) = aggregatorAddr {
            xif let Some(aggInfo) = evmCallStack_getAccountInCurrentContext(addr).aggregatorInfo {
                aggInfo.baseTxFeeL1Gas
            } else {
                chainParams_getOrDie(const::Atom_Param_DefaultBaseTxFeeL1Gas)
            }
        } else {
            chainParams_getOrDie(const::Atom_Param_DefaultBaseTxFeeL1Gas)
        }
    } else {
        0
    };
}

public impure func gasAccounting_setTxBaseFeeL1Gas(aggregator: address, fee: uint) -> option<()> {
    if (    (fee < chainParams_getOrDie(const::Atom_Param_MinBaseTxFeeL1Gas))
         || (fee > chainParams_getOrDie(const::Atom_Param_MaxBaseTxFeeL1Gas)) ) {
        return None<()>;
    }

    evmCallStack_setAccountInCurrentContext(
        aggregator,
        account_setBaseTxFeeL1Gas(
            evmCallStack_getAccountInCurrentContext(aggregator),
            fee
        ),
    );

    return Some(());
}

public impure func getArbGasPrice() -> uint {
    return gasAccountingInfo.currentPrices.perArbGasTotal;
}

public impure func getCurrentBlockGasLimit() -> uint {
    return gasAccountingInfo.gasAllocatedToThisBlock;
}

public impure func gasAccounting_getPricesInArbGas(aggregatorAddr: address) -> (uint, uint, uint) {  // don't include price of ArbGas, which is 1
    let prices = gasAccountingInfo.currentPrices;
    let arbGasPrice = prices.perArbGasTotal;
    let baseFeeMultiplier = gasAccountingInfo.feeConfig.baseFeeMultiplier;
    return (
        safeAdd(
            fixedPoint_mulByUintTrunc(baseFeeMultiplier, gasAccounting_getTxBaseFeeWei(Some(aggregatorAddr))),
            arbGasPrice - 1
        ) / arbGasPrice,   // base price for tx
        safeAdd(
            fixedPoint_mulByUintTrunc(baseFeeMultiplier, prices.perL1CalldataUnit),
            arbGasPrice - 1
        ) / arbGasPrice,  // price per L1 calldata unit
        safeAdd(prices.perStorageCell, arbGasPrice - 1) / arbGasPrice,     // price per storage cell
    );
}

public impure func getAddressForReserveFundsDeposit() -> address {
    return address(chainParams_getOrDie(const::Atom_Param_CongestionFeeRecipient));
}

public impure func gasAccounting_summaryToPublish() -> any {
    // get summary of gas prices and pool at present, for inclusion in block summary log
    let prices = gasAccountingInfo.currentPrices;
    return (
        prices.perL1CalldataUnit,
        prices.perStorageCell,
        prices.perArbGasBase,
        prices.perArbGasCongestion,
        prices.perArbGasTotal,
        gasAccountingInfo.congestionState.gasPool,
    );
}


// The next section of code supports tracking gas use of the currently running transactions.
// The currently-running Tx has some amount of gas remaining. That gas can be in two places:
// *  in the ArbGasRemaining register, if that register is < 2**255
// *  in reserve
//
// The state of the ArbGasRemaining register tells us whether we're currently charging gas to the tx or to ArbOS.
// *  If the register is < 2**255, we're charging to the tx
// *  If the register is >= 2**255, we're charging to ArbOS
// Note that if execution in the tx (or a subcall it makes) runs out of gas, this will generate an Error and
//    set ArbGasRemaining to 2**256 - 1, which correctly puts us into the mode of charging the OS.
// If there is an Error, the Error handler will call us, to inform us that there might have been an out-of-gas situation.
//    (It's up to us to figure out whether there actually was an out-of-gas situation, vs some unrelated error.)
//
// When a new tx starts, we take enough wei from it to cover its maxGas.
// When that tx is done, we give it a refund for any unused gas.

public impure func gasAccounting_startTxCharges(
    maxGas: uint,
    gasPrice: uint,
    payer: address,
    acctStore: AccountStore,
) -> (
    uint,          // const::TxResultCode_success if success, otherwise an error code
    AccountStore,  // acctStore, with payments deducted
) {
    // Start charging a new Tx for ArbGas usage
    // The caller should already have verified that the payer has enough funds, but we'll return None if not.

    let _ = switchToChargingOS();   // call this in case we're somehow still charging a tx; ignore return value

    let gasForComputation = {
        let txGasLimit = chainParams_getOrDie(const::Atom_Param_TxGasLimit);
        xif (maxGas < txGasLimit) {
            maxGas
        } else {
            txGasLimit
        }
    };

    // take funds from the payer, enough to pay for maxGas at gasPrice
    let weiToHold = safeMul(maxGas, gasPrice);
    let (uAcctStore, amount) = accountStore_addToEscrowUpToMax(acctStore, const::EscrowStoreID_txGas, payer, weiToHold);
    acctStore = uAcctStore;
    if (amount < weiToHold) {
        acctStore = accountStore_payFullyFromEscrow(
            acctStore,
            const::EscrowStoreID_txGas,
            address(chainParams_getOrDie(const::Atom_Param_NetworkFeeRecipient)),
        );
        return (const::TxResultCode_noGasFunds, acctStore);
    }

    let gasUsedByOS = ((~0) - asm() uint { getgas }) / const::Charging_ArbGasPerAvmGas;

    gasAccountingInfo = gasAccountingInfo with {
        txState: Some(struct {
            gasInReserve: 0,
            gasReservedForStorage: safeSub(maxGas, gasForComputation),
            originalMax: maxGas,
            price: gasPrice,
            weiHeldForGas: weiToHold,
            refundTo: payer,
        })
    } with {
        congestionState: gasAccountingInfo.congestionState with {
            gasPool: safeSubInt(gasAccountingInfo.congestionState.gasPool, int(gasUsedByOS))
        }
    };

    arbStatistics_addToGasUsed(gasUsedByOS);

    asm(safeMul(gasForComputation, const::Charging_ArbGasPerAvmGas),) { setgas };
    return (const::TxResultCode_success, acctStore);
}

public impure func gasAccounting_endTxCharges(
    storageDelta: int,
    feeStats: TxFeeStats,
) -> option<(
    bool,        // had enough gas?
    GasUsage,    // total ArbGas used
    TxFeeStats,  // fee stats of tx
    DeferredPayments,  // fund payouts to do
)> {
    // stop charging the current tx for gas
    // refund any unused gas
    // return (hadEnoughGas, total paid, fee stats of tx), or None if there isn't a tx active

    // switch over to charging the OS for gas
    let txState = gasAccountingInfo.txState?;

    let computeGasRemaining = safeAdd(txState.gasInReserve, switchToChargingOS());
    let computeGasUsed = safeSub(safeSub(txState.originalMax, txState.gasReservedForStorage), computeGasRemaining);

    arbStatistics_addToStorage(storageDelta);

    let storagePriceInArbGas = xif (txState.price == 0) {
        0
    } else {
        safeAdd(gasAccountingInfo.currentPrices.perStorageCell, txState.price - 1) / txState.price
    };
    let gasNeededForStorage = xif ((storageDelta > int(0)) && (txState.price > 0)) {
        safeMul(uint(storageDelta), storagePriceInArbGas)
    } else {
        0
    };

    let (confirmed, storageGasUsed, totalGasUsed, weiForStorage, weiForCompute) = xif (safeAdd(computeGasUsed, gasNeededForStorage) <= txState.originalMax) {
        (
            true,
            gasNeededForStorage,
            safeAdd(computeGasUsed, gasNeededForStorage),
            safeMul(gasNeededForStorage, txState.price),
            safeMul(computeGasUsed, txState.price)
        )
    } else {
        (
            false,
            safeSub(txState.originalMax, computeGasUsed),
            txState.originalMax,
            safeMul(safeSub(txState.originalMax, computeGasUsed), txState.price),
            safeMul(computeGasUsed, txState.price),
        )
    };

    // refund the unused gas, and pay fees
    let payments = deferredPayments_new();

    let refund = safeMul(safeSub(txState.originalMax, totalGasUsed), txState.price);
    if (refund > 0) {
        payments = deferredPayments_add(payments, const::EscrowStoreID_txGas, txState.refundTo, refund);
    }
    let basePrice = gasAccountingInfo.currentPrices.perArbGasBase;
    if (basePrice > txState.price) {
        basePrice = txState.price;
    }
    payments = deferredPayments_add(
        payments,
        const::EscrowStoreID_txGas,
        address(chainParams_getOrDie(const::Atom_Param_NetworkFeeRecipient)),
        safeAdd(safeMul(computeGasUsed, basePrice), safeMul(storageGasUsed, txState.price)),
    );
    let congestionPrice = safeSub(txState.price, basePrice);
    payments = deferredPayments_add(
        payments,
        const::EscrowStoreID_txGas,
        address(chainParams_getOrDie(const::Atom_Param_CongestionFeeRecipient)),
        safeMul(computeGasUsed, congestionPrice),
    );

    gasAccountingInfo = gasAccountingInfo with {
        congestionState: gasAccountingInfo.congestionState with {
            gasPool: safeSubInt(gasAccountingInfo.congestionState.gasPool, int(computeGasUsed))
        }
    } with {
        gasRemainingThisBlock: xif (gasAccountingInfo.gasRemainingThisBlock >= computeGasUsed) {
            gasAccountingInfo.gasRemainingThisBlock - computeGasUsed
        } else {
            0
        }
    } with {
        txState: None<TxGasState>
    };

    arbStatistics_addToGasUsed(computeGasUsed);

    return Some((
        confirmed,
        struct {
            gasUsed: totalGasUsed,
            gasPriceWei: txState.price,
        },
        feeStats with {
            units: feeStats.units with {
                storage: xif(storageDelta > int(0)) { uint(storageDelta) } else { 0 }
            } with {
                compute: computeGasUsed
            }
        } with {
            weiPaid: feeStats.weiPaid with {
                storage: weiForStorage
            } with {
                compute: weiForCompute
            }
        },
        payments,
    ));
}

public impure func gasAccounting_pauseTxCharges() -> uint {
    // pause charging the currently running tx
    // return how many units of the tx's initial maxGas are still unused

    return xif let Some(txState) = gasAccountingInfo.txState {
        let gasRemaining = safeAdd(txState.gasInReserve, switchToChargingOS());
        gasAccountingInfo = gasAccountingInfo with {
            txState: Some(
                txState with {
                    gasInReserve: gasRemaining
                }
            )
        };
        gasRemaining
    } else {
        // oops, someone tried to pause tx charges when there's no active tx
        // to be safe, report that the tx is completely out of gas
        0
    };
}

public impure func gasAccounting_resumeTxCharges(allocationRequested: uint) -> uint {
    // resume the charging of the tx for gas
    // allocationRequested is how much of its gas the tx wants to allocate for whatever is going to execute
    // return how much gas we actually allocated = min(requested, available)

    return xif let Some(txState) = gasAccountingInfo.txState {
        // stop charging the OS, and record the OS gas usage as overhead
        let osGasUsed = ((~0) - asm() uint { getgas }) / const::Charging_ArbGasPerAvmGas;

        if (allocationRequested > txState.gasInReserve) {
            allocationRequested = txState.gasInReserve;  // can't request more gas than you have
        }

        gasAccountingInfo = gasAccountingInfo with {
            txState: Some(
                txState with {
                    gasInReserve: safeSub(txState.gasInReserve, allocationRequested)
                }
            )
        } with {
            congestionState: gasAccountingInfo.congestionState with {
                gasPool: safeSubInt(gasAccountingInfo.congestionState.gasPool, int(osGasUsed))
            }
        };

        arbStatistics_addToGasUsed(osGasUsed);

        asm(safeMul(allocationRequested, const::Charging_ArbGasPerAvmGas),) { setgas };  // start charging the application
        allocationRequested
    } else {
        // something went wrong: tried to resume tx charges when there isn't an active tx
        // to be safe, report that tx is completely out of gas
        0
    };
}

impure func switchToChargingOS() -> uint {
    // switch to charging the OS for gas, if we aren't already
    // return amount of the tx's gas that is still unused
    let avmGasRemaining = asm() uint { getgas };
    return xif (avmGasRemaining >= asm(255, 1) uint { shl }) {
        // we were already charging the OS, tx has nothing remaining
        0
    } else {
        // we were charging the tx; switch to charging the OS and return tx's unused amount from ArbGasRemaining
        asm(~0,) { setgas };
        avmGasRemaining / const::Charging_ArbGasPerAvmGas
    };
}

public impure func gasAccounting_startNewBlock(arbBlockNumber: uint, timestamp: uint) {
    // it's the first tx of a new block, so do beginning-of-block work
    let updatedCongestionState = updateCongestionState(
        gasAccountingInfo.congestionState,
        arbBlockNumber,
        timestamp
    );
    let gasForThisBlock = xif(updatedCongestionState.gasPool > int(0)) {
        uint(updatedCongestionState.gasPool)
    } else {
        0   // gas pool has gone negative; wait until it gets positive
    };
    let (currentPrices, retryablePrices) = setPrices(
       gasAccountingInfo.feeConfig,
       gasAccountingInfo.pricingParams,
       updatedCongestionState,
       gasAccountingInfo.retryablePrices,
   );
    gasAccountingInfo = gasAccountingInfo with {
        congestionState: updatedCongestionState
    } with {
        currentPrices: currentPrices
    } with {
        retryablePrices: retryablePrices
    } with {
        gasRemainingThisBlock: gasForThisBlock
    } with {
        gasAllocatedToThisBlock: gasForThisBlock
    };
}

// gasAccounting_prepareTx does gas acocunting, to prepare a tx for execution. For each request, this
//     determines (a) whether to approve the request for execution, and (b) what gas price the request will pay.
public impure func gasAccounting_prepareTx(tx: TxRequestData) -> (
    uint,             // error code, or const::TxResultCode_success if no error
    TxRequestData,
) {
    if (tx.incomingRequest.arbBlockNumber > gasAccountingInfo.congestionState.lastArbBlockNumSeen) {
        gasAccounting_startNewBlock(tx.incomingRequest.arbBlockNumber, tx.incomingRequest.timestamp);
    }

    return xif ((tx.incomingRequest.sender != address(0)) && feesEnabled() && (! tx.incomingRequest.adminMode)) {
        if let Some(txSeqNum) = tx.seqNum {
            let expectedSeqNum = account_getNextSeqNum(accountStore_get(getGlobalAccountStore(), tx.caller));

            // don't charge the user if sequence number is wrong
            if (txSeqNum < expectedSeqNum) {
                return (const::TxResultCode_sequenceNumberTooLow, tx);
            } elseif (txSeqNum > expectedSeqNum) {
                return (const::TxResultCode_sequenceNumberTooHigh, tx);
            }
        }

        let prices = gasAccountingInfo.currentPrices;
        tx = tx with {
            feeStats: txFeeStats_setL2Prices(
                tx.feeStats with {
                    units: tx.feeStats.units with { tx: 1 }
                },
                prices
            )
        };

        let estimationCompGasLimit = xif let Some(gep) = tx.incomingRequest.gasEstimationParams {
            if (gep.ignoreGasPrice) {
                tx = tx with {
                    feeStats: tx.feeStats with {
                        noFeeGasEstimationMode: true
                    }
                };
            }
            if (gep.ignoreMaxGas) {
                tx = tx with {
                    maxGas: account_getEthBalance(accountStore_get(getGlobalAccountStore(), tx.gasPayer)) / gasAccountingInfo.currentPrices.perArbGasTotal
                };
            }
            gep.computeGasLimit
        } else {
            0
        };

        if ((tx.gasPrice != 0) && (tx.gasPrice < prices.perArbGasTotal) ) {
            return (const::TxResultCode_gasPriceTooLow, tx);
        }

        let (fullyPaid, feeStats, _totalWeiPaid) = xif let Some(aggInfo) = tx.incomingRequest.aggregator {
            tx = tx with {
                feeStats: tx.feeStats with {
                    units: tx.feeStats.units with { calldataUnit: aggInfo.calldataUnits }
                }
            };
            payForTxAndL1Gas(
                tx.gasPayer,
                tx.caller,
                aggInfo.aggregator,
                gasAccountingInfo.feeConfig,
                prices,
                tx.feeStats,
                tx.maxGas * prices.perArbGasTotal,
            )
        } else {
            payForTxAndL1Gas(
                tx.gasPayer,
                tx.caller,
                None<address>,
                gasAccountingInfo.feeConfig,
                prices,
                tx.feeStats,
                tx.maxGas * prices.perArbGasTotal,
            )
        };
        tx = tx with { feeStats: feeStats };
        if (!fullyPaid) {
            // sender didn't have enough gas funds
            // we took all of the funds to make a partial payment to the aggregator
            // now fail the tx
            return (const::TxResultCode_noGasFunds, tx);
        }

        // compute the number of ArbGas units corresponding to the aggregator fee, and deduct them from the tx
        // round up to the nearest integer number of units -- this will burn the wei that would pay
        //       for a fractional ArbGas unit (rounding down would credit the user with fractional
        //       ETH that we don't have)
        let roundedUpGasDelta = safeAdd(safeAdd(feeStats.weiPaid.tx, feeStats.weiPaid.calldataUnit), prices.perArbGasTotal - 1) / prices.perArbGasTotal;
        if (tx.maxGas > roundedUpGasDelta) {
            tx = tx with { maxGas: tx.maxGas - roundedUpGasDelta };
        } else {
            tx = tx with {
                feeStats: tx.feeStats with {
                    units: tx.feeStats.units with {
                        calldataUnit: feeStats.units.calldataUnit
                    }
                }
            };
            return (const::TxResultCode_insufficientGasForBaseFee, tx);
        }

        xif (tx.incomingRequest.kind == const::L1MessageType_L2ForGasEstimation) {
            let gasPrice = gasAccountingInfo.currentPrices.perArbGasTotal;
            let gasPayerFunds = account_getEthBalance(accountStore_get(getGlobalAccountStore(), tx.gasPayer));
            xif (tx.value >= gasPayerFunds) {
                (const::TxResultCode_insufficientBalance, tx)
            } else {
                let affordableGas = (gasPayerFunds - tx.value) / gasPrice;
                if ((tx.maxGas == 0) || (tx.maxGas > affordableGas)) {
                    tx = tx with { maxGas: affordableGas };
                }
                tx = tx with { gasPrice: gasPrice };
                (const::TxResultCode_success, tx)
            }
        } elseif (tx.incomingRequest.adminMode || (gasAccountingInfo.gasRemainingThisBlock > 0) || (estimationCompGasLimit > 0)) {
            (const::TxResultCode_success, tx with { gasPrice: gasAccountingInfo.currentPrices.perArbGasTotal })
        } else {
            // the current block doesn't have enough gas left to run the tx
            (const::TxResultCode_congestion, tx)
        }
    } else {
        // fees are disabled, or this tx isn't chargeable, so just approve it, but set the units in feeStats first
        if let Some(_) = tx.incomingRequest.gasEstimationParams {
            if (tx.maxGas == 0) {
                tx = tx with { maxGas: 100000000000000000 };
            }
        }
        (
            const::TxResultCode_success,
            tx with {
                feeStats: tx.feeStats with {
                    units: tx.feeStats.units with {
                        tx: 1
                    } with {
                        calldataUnit: xif let Some(aggInfo) = tx.incomingRequest.aggregator {
                            aggInfo.calldataUnits
                        } else {
                            0
                        }
                    }
                }
            },
        )
    };
}

impure func payForTxAndL1Gas(
    payer: address,
    sender: address,
    maybeActualAggregator: option<address>,
    feeConfig: FeeConfig,
    prices: GasPrices,
    feeStats: TxFeeStats,
    paymentLimitWei: uint,
) -> (bool, TxFeeStats, uint) {    // returns (success, updatedFeeStats, totalWeiPaid)
    let totalWeiPaid = 0;
    let calldataUnits = feeStats.units.calldataUnit;

    let preferredAggregator = account_getAggregatorToPay(evmCallStack_getAccountInCurrentContext(sender));

    let aggregator = xif let Some(rec) = maybeActualAggregator {
        rec
    } else {
        address(1 ^ uint(preferredAggregator))   // can use any value that is not equal to preferredAggregator
    };

    let basePriceTx = gasAccounting_getTxBaseFeeWei(
        xif (aggregator == preferredAggregator) {
            Some(aggregator)
        } else {
            None<address>
        }
    );
    let basePriceCalldataUnit = prices.perL1CalldataUnit;
    let baseFeeTotal = basePriceTx + calldataUnits * basePriceCalldataUnit;

    if (baseFeeTotal == 0) {
        return (true, feeStats, 0);
    }

    // pay for network fee; if insufficient funds, pay as much as we can then return false
    if ( ! {
        let txPrice = fixedPoint_mulByUintTrunc(feeConfig.shareForNetFee, basePriceTx);
        let calldataUnitPrice = fixedPoint_mulByUintTrunc(feeConfig.shareForNetFee, basePriceCalldataUnit);
        let (fullyPaid, ufs, weiPaid) = tryToPayForL1Gas(
            payer,
            address(chainParams_getOrDie(const::Atom_Param_NetworkFeeRecipient)),
            txPrice,
            safeMul(calldataUnits, calldataUnitPrice),
            feeStats,
            paymentLimitWei,
            feeStats.noFeeGasEstimationMode,
        );
        feeStats = ufs;
        totalWeiPaid = totalWeiPaid + weiPaid;
        fullyPaid
    }) {
        if (aggregator == preferredAggregator) {
            // include the full price the sender would have paid, if they had had enough funds
            feeStats = feeStats with {
                price: feeStats.price with {
                   tx: safeAdd(basePriceTx, feeStats.price.tx)
                } with {
                   calldataUnit: safeAdd(basePriceCalldataUnit, feeStats.price.calldataUnit)
                }
            };
        }
        return (false, feeStats, totalWeiPaid);
    }

    if (aggregator == preferredAggregator) {
        // pay aggregator; if insufficient funds, pay as much as we can then return false
        if ( ! {
            let (fullyPaid, ufs, weiPaid) = tryToPayForL1Gas(
                payer,
                aggregator,
                basePriceTx,
                calldataUnits * basePriceCalldataUnit,
                feeStats,
                paymentLimitWei - totalWeiPaid,
                feeStats.noFeeGasEstimationMode,
            );
            feeStats = ufs with {
               price: ufs.price with {
                   tx: basePriceTx + ufs.price.tx
               } with {
                   calldataUnit: basePriceCalldataUnit + ufs.price.calldataUnit
               }
            };
            totalWeiPaid = totalWeiPaid + weiPaid;
            fullyPaid
        }) {
            return (false, feeStats, totalWeiPaid);
        }
    }

    return (true, feeStats, totalWeiPaid);
}

impure func tryToPayForL1Gas(
    payer: address,
    recipient: address,
    weiForTx: uint,
    weiForCalldata: uint,
    feeStats: TxFeeStats,
    paymentLimit: uint,
    dontActuallyPay: bool,
) -> (bool, TxFeeStats, uint) {    // returns (fullyPaid, updatedFeeStats, totalWeiPaid)
    let totalDue = weiForTx + weiForCalldata;
    let fullyPaid = xif (totalDue <= paymentLimit) {
        true
    } else {
        totalDue = paymentLimit;
        false
    };

    let acctStore = getGlobalAccountStore();
    let payerAcct = accountStore_get(acctStore, payer);
    if ((account_getEthBalance(payerAcct) < totalDue) && !dontActuallyPay){
        totalDue = account_getEthBalance(payerAcct);
        fullyPaid = false;
    }

    if (! fullyPaid) {
        // pro-rate the actual payment amount between tx and calldata
        weiForTx = safeMul(totalDue, weiForTx) / safeAdd(weiForTx, weiForCalldata);
        weiForCalldata = safeSub(totalDue, weiForTx);
    }

    return xif let Some(uAcctStore) = accountStore_transferEthBalance(
        acctStore,
        payer,
        recipient,
        xif (dontActuallyPay) { 0 } else { totalDue }
    ) {
        setGlobalAccountStore(uAcctStore);
        (
            fullyPaid,
            feeStats with {
                weiPaid: feeStats.weiPaid with {
                    tx: safeAdd(feeStats.weiPaid.tx, weiForTx)
                } with {
                    calldataUnit: safeAdd(feeStats.weiPaid.calldataUnit, weiForCalldata)
                }
            },
            totalDue,
        )
    } else {
        // this should never happen, because we reduced totalDue to fit within payer's funds
        // so just do something safe
        (
            totalDue == 0,
            feeStats,
            0,
        )
    };
}

impure func updateCongestionState(state: CongestionState, toBlockNum: uint, toTimestamp: uint) -> CongestionState {
    // update the congestion state, based on advancing from state.lastTimestampSeen to toTimestamp

    let lastTimestampSeen = state.lastTimestampSeen;
    let basePrice = gasAccountingInfo.currentPrices.perArbGasBase;
    let totalPrice = safeAdd(basePrice, state.congestionPriceWei);
    let gasPool = state.gasPool;
    let gasPoolMax = chainParams_getOrDie(const::Atom_Param_GasPoolMax);
    let speedLimit = chainParams_getOrDie(const::Atom_Param_SpeedLimitPerSecond);

    // doing a per-second loop isn't elegant, but cost is low enough that it shouldn't be a problem
    // eventually we should solve this analytically to avoid the per-second loop
    while((lastTimestampSeen < toTimestamp) && ( (gasPool < int(gasPoolMax)) || (totalPrice > basePrice) )) {
        lastTimestampSeen = lastTimestampSeen + 1;
        gasPool = safeAddInt(gasPool, int(speedLimit));
        if (gasPool > int(gasPoolMax)) {
            gasPool = int(gasPoolMax);
        }

        let maxtc = xif (gasPool > int(0)) {
            gasPool
        } else {
            int(0)
        };
        // now 0 <= maxtc <= gasPoolMax

        // constants here are chosen so that adjustment is by factor between 7/8 and 9/8 per mainnet block, as in EIP-1559
        totalPrice = totalPrice * (121 * gasPoolMax - 2 * uint(maxtc)) / (120 * gasPoolMax);
        if (totalPrice < basePrice) { totalPrice = basePrice; }
    }
    return struct {
        gasPool: gasPool,
        lastArbBlockNumSeen: toBlockNum,
        lastTimestampSeen: toTimestamp,
        congestionPriceWei: safeSub(totalPrice, basePrice),
    };
}

public impure func getRetryableTxPrice(calldataSize: uint) -> (uint, uint) {
    // returns (basePriceWei, calldataUnitByteWei, nextChangeTimestamp
    let prices = gasAccountingInfo.retryablePrices;
    if (prices.nextUpdateTimestamp < inbox_currentTimestamp()) {
        prices = setRetryablePrices(prices);
        gasAccountingInfo = gasAccountingInfo with { retryablePrices: prices };
    }
    return (
        safeAdd(prices.perTx, safeMul(calldataSize, prices.perCalldataByte)),
        prices.nextUpdateTimestamp,
    );
}

public impure func getFeesForRetryableTx(
    calldataSize: uint,  // in bytes
) -> (uint, address, TxFeeStats) {
    return xif (feesEnabled()) {
        let prices = gasAccountingInfo.retryablePrices;
        let calldataUnitPrice = prices.perCalldataByte / 16;  // use this to avoid roundoff issues
        let totalDue = safeAdd(prices.perTx, safeMul(safeMul(calldataSize, 16), calldataUnitPrice));

        let feeStats = txFeeStats_zero();
        (
            totalDue,
            address(chainParams_getOrDie(const::Atom_Param_NetworkFeeRecipient)),
            feeStats with {
                price: feeStats.price with {
                    tx: prices.perTx
                } with {
                    calldataUnit: calldataUnitPrice
                }
            } with {
                units: feeStats.units with {
                    tx: 1
                } with {
                    calldataUnit: 16 * calldataSize
                }
            } with {
                weiPaid: feeStats.weiPaid with {
                    tx: prices.perTx
                } with {
                    calldataUnit: safeMul(calldataSize * 16, calldataUnitPrice)
                }
            }
        )
    } else {
        (0, address(0), txFeeStats_zero())
    };
}

// The L1 gas price estimator is a weighted average of recent L1 gas prices of messages injected by
//       an Arbitrum node that is trusted (for the purpose of choosing representative L1 gas prices).
var globalL1GasPriceEstimator: struct {
    estimateWei: uint,
    fairGasPriceSenders: SetOfAddresses,
};

impure func initGasPriceEstimator() {
    globalL1GasPriceEstimator = struct {
        estimateWei: 150*(1000*1000*1000),  // 150 gwei
        fairGasPriceSenders: setOfAddresses_emptySet(),
    };
}

public impure func getL1GasPriceEstimate() -> uint {
    return globalL1GasPriceEstimator.estimateWei;
}

public impure func setL1GasPriceEstimate(newPriceWei: uint) {
    globalL1GasPriceEstimator = globalL1GasPriceEstimator with {
        estimateWei: newPriceWei
    };
}

public impure func updateL1GasPriceEstimate(sender: address, price: uint) {
    if (isFairGasPriceSender(sender)) {
        if (price > 5 * globalL1GasPriceEstimator.estimateWei) {
            price = 5 * globalL1GasPriceEstimator.estimateWei;
        } elseif (price < globalL1GasPriceEstimator.estimateWei / 5) {
            price = globalL1GasPriceEstimator.estimateWei / 5;
        }
        globalL1GasPriceEstimator = globalL1GasPriceEstimator with {
            estimateWei: safeAdd(price, safeMul(19, globalL1GasPriceEstimator.estimateWei)) / 20
        };
    }
}

public impure func isFairGasPriceSender(sender: address) -> bool {
    return setOfAddresses_contains(globalL1GasPriceEstimator.fairGasPriceSenders, sender);
}

public impure func setFairGasPriceSender(sender: address, value: bool) {
    globalL1GasPriceEstimator = globalL1GasPriceEstimator with {
        fairGasPriceSenders: xif (value) {
            setOfAddresses_add(
                globalL1GasPriceEstimator.fairGasPriceSenders,
                sender,
            )
        } else {
            setOfAddresses_remove(
                globalL1GasPriceEstimator.fairGasPriceSenders,
                sender,
            )
        }
    };
}

public impure func getSerializedFairGasPriceSenders() -> option<ByteArray> {
    return setOfAddresses_serialize(globalL1GasPriceEstimator.fairGasPriceSenders);
}

type FourResources = struct {
    tx: uint,
    calldataUnit: uint,
    storage: uint,
    compute: uint,
}

// Fee stats for a transaction, for inclusion in tx receipt
type TxFeeStats = struct {
    price: FourResources,
    units: FourResources,
    weiPaid: FourResources,
    paidAggregator: address,
    noFeeGasEstimationMode: bool,
}

public func txFeeStats_zero() -> TxFeeStats {
    let frZero = struct {
        tx: 0,
        calldataUnit: 0,
        storage: 0,
        compute: 0,
    };
    return struct {
        price: frZero,
        units: frZero,
        weiPaid: frZero,
        paidAggregator: address(0),
        noFeeGasEstimationMode: false,
    };
}

public func txFeeStats_setL2Prices(stats: TxFeeStats, prices: GasPrices) -> TxFeeStats {
    return stats with {
        price: stats.price with {
            storage: prices.perStorageCell
        } with {
            compute: prices.perArbGasTotal
        }
    };
}

type DeferredPayments = Stack

public func deferredPayments_new() -> DeferredPayments {
    return stack_new();
}

public func deferredPayments_add(dp: DeferredPayments, escrowKey: uint, recipient: address, amount: uint) -> DeferredPayments {
    return stack_push(dp, (escrowKey, recipient, amount));
}

public func deferredPayments_apply(acctStore: AccountStore, dp: DeferredPayments) -> option<AccountStore> {
    return xloop {
        if let Some(res) = stack_pop(dp) {
            let (udp, item) = res;
            dp = udp;
            let (escrowKey, recipient, amount) = unsafecast<(uint, address, uint)>(item);
            if let Some(uAcctStore) = accountStore_payFromEscrow(acctStore, escrowKey, recipient, amount) {
                acctStore = uAcctStore;
            } else {
                asm(11000,) { debugprint };
                return None<AccountStore>;
            }
        } else {
            return Some(acctStore);
        }
    };
}

public impure func allowedSenders_allowAll() {
    gasAccountingInfo = gasAccountingInfo with {
        allowedSenders: setOfAddresses_all()
    };
}

public impure func allowedSenders_allowNone() {
    gasAccountingInfo = gasAccountingInfo with {
        allowedSenders: setOfAddresses_emptySet()
    };
}

public impure func allowedSenders_contains(addr: address) -> bool {
    return setOfAddresses_contains(gasAccountingInfo.allowedSenders, addr)
        || (addr == address(0))
        || (Some(uint(addr)) == chainParams_get(const::Atom_Param_ChainOwner));
}

public impure func allowedSenders_add(addr: address) {
    gasAccountingInfo = gasAccountingInfo with {
        allowedSenders: setOfAddresses_add(gasAccountingInfo.allowedSenders, addr)
    };
}

public impure func allowedSenders_remove(addr: address) {
    gasAccountingInfo = gasAccountingInfo with {
        allowedSenders: setOfAddresses_remove(gasAccountingInfo.allowedSenders, addr)
    };
}

public impure func allowedSenders_serialize() -> option<ByteArray> {
    return setOfAddresses_serialize(gasAccountingInfo.allowedSenders);
}
