//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

var arbGasUsedByRuntime: uint;   // total ArbGas used by the runtime

public impure func gasAccounting_init() {
    arbGasUsedByRuntime = 0;
}

// The basic logic here is that we are using the ArbGasRemaining register to track the ArbGas that is being used.
// When the register is >= 2**255, we are charging usage to the runtime.
// When the register is < 2**255, we are charging usage to an application (the one on top of the evmCallStack).


public impure func gasAccounting_fromRuntimeToApp(appAllocation: uint) {
    // stop charging the runtime for ArbGas usage
    // start charging the currently running application, with <appAllocation> units allocated for the application

    if (appAllocation >= asm(2, 255) uint { exp }) {
        appAllocation = asm(2, 255) uint { exp } - 1;
    }
    arbGasUsedByRuntime = arbGasUsedByRuntime + ((~0) - asm() uint { getgas });
    asm(appAllocation,) { setgas };
}

public impure func gasAccounting_fromAppToRuntime() -> uint {
    // stop charging the currently running application for ArbGas usage
    // start charging the runtime for ArbGas usage
    // return how many units of the application's allocation were unused
    let leftover = asm() uint { getgas };
    asm(~0,) { setgas };
    if (leftover < asm(2, 255) uint { exp }) {
        return leftover;
    } else {
        // Based on ArbGasRemaining, we're in the runtime, so the application must have run out of ArbGas
        arbGasUsedByRuntime = arbGasUsedByRuntime + ((~0) - leftover);
        return 0;
    }
}