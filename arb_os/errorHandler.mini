//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import func emptyAvmStack();
import impure func cleanAvmAuxStackAndCall(funcToCall: impure func());
import impure func mainRunLoop();
import impure func evmCallStack_isEmpty() -> bool;
import impure func evmCallStack_callHitError(errInfo: any);


public impure func errorHandler_init() {
    // set up the default error handler
    // this is a small code stub that calls errorHandler
    let stub = asm() func() { errcodept };
    let jumpErrHandler = asm(0x34, errorHandler, stub) func() { pushinsnimm };
    let pushAndJump = asm(0x3b, 0, jumpErrHandler) func() { pushinsnimm };
    asm(pushAndJump,) { errset };
}

public impure func errorHandler() {
    // If we got here, it's because some AVM instruction hit an Error
    // This could happen for several reasons.
    //   1.  untrusted application code tried to do something erroneous, like dividing by zero
    //   2.  untrusted application code ran out of ArbGas
    //   3.  we hit an unknown bug in the runtime

    // Note that if an application hits an error when its ArbGas remaining is just barely above zero,
    //      we could run out of ArbGas while we're running this handler or cleaning up the application's state.
    // If that happens, we'll get thrown back to this error handler again, but with ArbGas set to MaxUint256.
    // When we re-enter this handler, it will look like the application ran out of ArbGas.
    // That's OK, because the only "harm" done is that the double-error situation of application error plus ArbGas underflow
    //      gets detected as just an ArbGas underflow.  The effect on the application will be the same either way.

    if (asm() uint { getgas } > (~0 - 300)) {
        // application ran out of ArbGas
        asm(665,) { debugprint };
    } else {
        // some other error
        asm(666,) { debugprint };
    }

    if (evmCallStack_isEmpty()) {
        // Oh no, we must have hit an unexpected error in the runtime.
        // That shouldn't have happened, but we have to make the best of the situation.
        // So we'll clean up our stacks, and jump back to the main runloop.
        emptyAvmStack();
        cleanAvmAuxStackAndCall(mainRunLoop);  // this will never return
    } else {
        // Application code must have hit an error.
        evmCallStack_callHitError(0);  // this will never return
    }
    //NOTREACHED
    panic;
}