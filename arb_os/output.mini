//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;
use std::queue::Queue;
use evmlogs::EvmLogs;

use arbstatistics::arbStatistics_addTxReceipt;

use tracing::evmTracer_emitAndClear;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_marshalFull;
use std::bytearray::bytearray_toSizeAndBuffer;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get64;
use std::bytearray::bytearray_get256;

use std::keccak::keccak256_sizedBuffer;

use std::merkletree::MerkleTreeBuilder;
use std::merkletree::merkleTreeBuilder_new;
use std::merkletree::merkleTreeBuilder_add;
use std::merkletree::merkleTreeBuilder_finish;
use std::merkletree::merkleTreeBuilder_isEmpty;

use std::queue::queue_isEmpty;
use std::queue::queue_new;
use std::queue::queue_put;
use std::queue::queue_get;

use chainParameters::chainParams_getSecondsPerSend;

use evmlogs::evmlogs_empty;
use evmlogs::evmlogs_numLogs;
use evmlogs::evmlogs_forall;

use evmCallStack::evmCallStack_queueMessage;

use inbox::IncomingRequest;
use inbox::inbox_currentTimestamp;

use gasAccounting::GasUsage;
use gasAccounting::TxFeeStats;
use gasAccounting::gasAccounting_summaryToPublish;

use tracing::EvmTracer;
use tracing::evmTracer_new;
use tracing::evmTracer_pushReturnRevert;


// PerBlockReceiptData is different from OutputStatistics for now; might want to unify
type PerBlockReceiptData = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
}

type OutputStatistics = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
    numLogs: uint,
    numSends: uint,
}

public impure func output_init() {
    logsQueuedForEndOfBlock = queue_new();
    outbox_init();
}

func outputStats_new() -> OutputStatistics {
    return struct {
        totalGasUsed: 0,
        numTx: 0,
        numEvmLogs: 0,
        numLogs: 0,
        numSends: 0
    };
}

func outputStats_isAllZero(os: OutputStatistics) -> bool {
    return (os.totalGasUsed + os.numTx + os.numEvmLogs + os.numLogs + os.numSends) == 0;
}

func outputStats_add(os1: OutputStatistics, os2: OutputStatistics) -> OutputStatistics {
    return struct {
        totalGasUsed: os1.totalGasUsed + os2.totalGasUsed,
        numTx: os1.numTx + os2.numTx,
        numEvmLogs: os1.numEvmLogs + os2.numEvmLogs,
        numLogs: os1.numLogs + os2.numLogs,
        numSends: os1.numSends + os2.numSends,
    };
}

var globalBlockReceiptData: struct {
    data: PerBlockReceiptData,
    statsThisBlock: OutputStatistics,
    statsAllTime: OutputStatistics,
    lastBlockNum: uint,
    nextSendTime: uint,
};

var logsQueuedForEndOfBlock: Queue;

public impure func outputStats_endOfBlock(arbBlockNum: uint, ethBlockNum: uint, timestamp: uint) {
    if ((inbox_currentTimestamp() >= globalBlockReceiptData.nextSendTime) && !outbox_isEmpty() ){
        outbox_send();
        globalBlockReceiptData = globalBlockReceiptData with {
            nextSendTime: inbox_currentTimestamp() + chainParams_getSecondsPerSend()
        };
    }

    // add current block (including soon-to-be-issued block summary log) into total stats
    let updatedStats = outputStats_add(
        globalBlockReceiptData.statsThisBlock,
        globalBlockReceiptData.statsAllTime
    );
    updatedStats = updatedStats with {
        numLogs: updatedStats.numLogs + 1  // +1 for soon-to-be-issued block summary log
    };

    globalBlockReceiptData = globalBlockReceiptData with {
        statsAllTime: updatedStats
    };

    let q = logsQueuedForEndOfBlock;
    while( ! queue_isEmpty(q) ){
        if let Some(res) = queue_get(q) {
            let (uq, logItem) = res;
            q = uq;
            asm(logItem,) { log };
        } else {
            // should never happen
            q = queue_new();
        }
    }
    logsQueuedForEndOfBlock = q;

    asm((
        const::LogType_blockSummary,
        arbBlockNum,
        timestamp,
        globalBlockReceiptData.statsThisBlock,
        globalBlockReceiptData.statsAllTime,
        gasAccounting_summaryToPublish(),
        globalBlockReceiptData.lastBlockNum,
        ethBlockNum,
    ),) { log }; 

    globalBlockReceiptData = globalBlockReceiptData with {
        lastBlockNum: arbBlockNum
    };

    // now clear current block stats, because we're advancing to a new current block
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: outputStats_new()
    } with {
        data: struct {
            totalGasUsed: 0,
            numTx: 0,
            numEvmLogs: 0
        }
    };
}

impure func outputStats_addTxLog(gasUsed: uint, numEvmLogs: uint) {
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: globalBlockReceiptData.statsThisBlock with {
            numTx: 1 + globalBlockReceiptData.statsThisBlock.numTx
        } with {
            numLogs: 1 + globalBlockReceiptData.statsThisBlock.numLogs
        } with {
            totalGasUsed: gasUsed + globalBlockReceiptData.statsThisBlock.totalGasUsed
        } with {
            numEvmLogs: numEvmLogs + globalBlockReceiptData.statsThisBlock.numEvmLogs
        }
    };
}

impure func outputStats_addNonTxLog() {
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: globalBlockReceiptData.statsThisBlock with {
            numLogs: 1 + globalBlockReceiptData.statsThisBlock.numLogs
        }
    };
}

impure func outputStats_addSend() {
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: globalBlockReceiptData.statsThisBlock with {
            numSends: 1 + globalBlockReceiptData.statsThisBlock.numSends
        }
    };
}

public impure func txReceipts_init() {  // will be called at beginning of main()
    globalBlockReceiptData = struct {
        data: struct {
            totalGasUsed: 0,
            numTx: 0,
            numEvmLogs: 0
        },
        statsThisBlock: outputStats_new(),
        statsAllTime: outputStats_new(),
        lastBlockNum: ~0,
        nextSendTime: 0,
    };
}

impure func update_txReceiptsForBlock(
    gasUsed: uint,
    numEvmLogs: uint
) -> PerBlockReceiptData {
    // first add in the gas, because returned value is supposed to include it
    let ret = globalBlockReceiptData.data with {
        totalGasUsed: gasUsed + globalBlockReceiptData.data.totalGasUsed
    };

    // now update the accumulated data and write it back, but don't return the updated version
    globalBlockReceiptData = globalBlockReceiptData with {
        data: ret with {
            numTx: ret.numTx + 1
        } with {
            numEvmLogs: ret.numEvmLogs + numEvmLogs
        }
    };

    return ret;
}

public impure func emitTxReceipt(
    l1message: IncomingRequest,
    resultCode: uint,
    maybeReturnData: option<ByteArray>,
    maybeEvmLogs: option<EvmLogs>,
    gasUsage: option<GasUsage>,
    feeStats: TxFeeStats,
    emitTracingInfo: bool,
) {
    arbStatistics_addTxReceipt();

    let realGasUsage = struct {
        gasUsed: 0,
        gasPriceWei: 0,
    };
    if let Some(gu) = gasUsage {
        realGasUsage = gu;
    }

    let evmLogs = evmlogs_empty();
    let numEvmLogs = 0;
    if let Some(el) = maybeEvmLogs {
        evmLogs = el;
        numEvmLogs = evmlogs_numLogs(el);
    }

    outputStats_addTxLog(realGasUsage.gasUsed, numEvmLogs);

    let returnData = bytearray_new(0);
    if let Some(rd) = maybeReturnData {
        returnData = rd;
    }

    let txResultInfo = struct {
        returnCode: resultCode,
        returnData: bytearray_toSizeAndBuffer(returnData),
        evmLogs: evmLogs,
    };

    if (emitTracingInfo) {
        evmTracer_emitAndClear();
    }

    asm((
        const::LogType_txReceipt,
        l1message with {
            msgData: unsafecast<ByteArray>(bytearray_toSizeAndBuffer(l1message.msgData))  // because caller expects marshalled bytes
        },
        txResultInfo,
        realGasUsage,
        update_txReceiptsForBlock(
            realGasUsage.gasUsed,
            numEvmLogs,
        ),
        feeStats,
    ),) { log };
}

var globalOutbox: struct {
    batch: MerkleTreeBuilder,
    batchNumber: uint,
    numInBatch: uint,
    evmTracer: EvmTracer,
};

impure func outbox_init() {
    globalOutbox = struct {
        batch: merkleTreeBuilder_new(),
        batchNumber: 0,
        numInBatch: 0,
        evmTracer: evmTracer_new(),
    };
}

public impure func outbox_getEvmTracer() -> EvmTracer {
    return globalOutbox.evmTracer;
}

public impure func outbox_setEvmTracer(tracer: EvmTracer) {
    globalOutbox = globalOutbox with { evmTracer: tracer };
}

impure func outbox_isEmpty() -> bool {
    return globalOutbox.numInBatch == 0;
}

public impure func outbox_append(item: ByteArray) {
    let batchNumber = globalOutbox.batchNumber;
    let numInBatch = globalOutbox.numInBatch;
    globalOutbox = globalOutbox with {
        numInBatch: numInBatch + 1
    } with {
        batch: merkleTreeBuilder_add(globalOutbox.batch, item)
    };
    let (size, buf) = bytearray_toSizeAndBuffer(item);
    logsQueuedForEndOfBlock = queue_put(
        logsQueuedForEndOfBlock,
        (const::LogType_send, batchNumber, numInBatch, size, buf),
    );
    outputStats_addNonTxLog();
}

impure func outbox_send() {
    let (tree, rootHash) = merkleTreeBuilder_finish(globalOutbox.batch);
    logsQueuedForEndOfBlock = queue_put(
        logsQueuedForEndOfBlock,
        (const::LogType_sendMerkleTree, globalOutbox.batchNumber, globalOutbox.numInBatch, tree),
    );
    outputStats_addNonTxLog();
    asm(
        97,
        setbuffer256(
            setbuffer256(
                setbuffer256(
                    setbuffer8(newbuffer(), 0, const::AVMSendType_batch),
                    1,
                    globalOutbox.batchNumber
                ),
                33,
                globalOutbox.numInBatch
            ),
            65,
            uint(rootHash)

        )
    ) { send };
    outputStats_addSend();
    globalOutbox = struct {
        batch: merkleTreeBuilder_new(),
        batchNumber: globalOutbox.batchNumber + 1,
        numInBatch: 0,
        evmTracer: globalOutbox.evmTracer,
    };
}

public impure func queueMessageForSend(msg: ByteArray) {
    evmCallStack_queueMessage(msg);
}

public impure func sendQueuedMessages(queue: Queue, evmLogs: EvmLogs) -> EvmLogs {
    let sendTxIndexQ = queue_new();
    return xloop {
        if let Some(res) = queue_get(queue) {
            let (uq, rawMsg) = res;
            queue = uq;
            let msg = unsafecast<ByteArray>(rawMsg);
            if (bytearray_getByte(unsafecast<ByteArray>(msg), 0) == const::SendType_sendTxToL1) {
                sendTxIndexQ = queue_put(sendTxIndexQ, globalOutbox.numInBatch);
            }
            outbox_append(msg);
        } else {
            return xif (queue_isEmpty(sendTxIndexQ)) {
                evmLogs
            } else {
                evmlogs_forall(evmLogs, updateEvmLogForSendToL1, sendTxIndexQ).0
            };
        }
    };
}

type LogWith4Topics = struct {
    sender: address,
    data: struct {
        size: uint,
        buf: buffer
    },
    topic0: uint,
    topic1: uint,
    topic2: uint,
    topic3: uint,
}

impure func updateEvmLogForSendToL1(rawLog: any, state: any) -> (any, any) {
    // This is designed to be used by evmlogs_forall. When used by evmlogs_forall in its pass through
    //      the current set of logs, this morphs EVM logs with topic[0] == const::EVMLogTopicPlaceHolderForL2ToL1Send
    //      into proper EVM log items with batch-related fields filled in

    // Cast the log item to a struct that assumes 4 topics. The topics might not exist,
    //      but that's OK because we won't try to access them until after we have verified that they exist.
    let log = unsafecast<LogWith4Topics>(rawLog);
    return xif ((asm(log,) uint { tlen } == 6) && (log.topic0 == const::EVMLogTopicForL2ToL1Send)) {
        // Now we know that the log has 4 topics.
        xif let Some(res) = queue_get(unsafecast<Queue>(state)) {
            let (uq, item) = res;
            log = log with {
                topic3: globalOutbox.batchNumber
            } with {
                data: log.data with { buf: setbuffer256(log.data.buf, 32, unsafecast<uint>(item)) }
            };
            (log, uq)
        } else {
            // This should never happen, but if it does, get everything right except for the index in batch.
            log = log with {
                topic2: globalOutbox.batchNumber
            };
            (log, state)
        }
    } else {
        (rawLog, state)
    };
}