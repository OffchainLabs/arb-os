//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::queue::Queue;
use evmlogs::EvmLogs;

use arbstatistics::arbStatistics_addTxReceipt;

use tracing::evmTracer_emitAndClear;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_toSizeAndBuffer;
use std::bytearray::bytearray_getByte;

use std::merkletree::MerkleTreeBuilder;
use std::merkletree::merkleTreeBuilder_new;
use std::merkletree::merkleTreeBuilder_add;
use std::merkletree::merkleTreeBuilder_finish;

use std::queue::queue_isEmpty;
use std::queue::queue_new;
use std::queue::queue_put;
use std::queue::queue_get;

use chainParameters::chainParams_getSecondsPerSend;

use evmlogs::evmlogs_empty;
use evmlogs::evmlogs_numLogs;
use evmlogs::evmlogs_forall;

use evmCallStack::evmCallStack_queueMessage;

use inbox::IncomingRequest;
use inbox::inbox_currentTimestamp;

use gasAccounting::GasUsage;
use gasAccounting::TxFeeStats;
use gasAccounting::gasAccounting_summaryToPublish;

use tracing::EvmTracer;
use tracing::evmTracer_new;


// PerBlockReceiptData is different from OutputStatistics for now; might want to unify
type PerBlockReceiptData = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
};

type OutputStatistics = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
    numLogs: uint,
    numSends: uint,
};

public write func output_init() {
    logsQueuedForEndOfBlock = queue_new();
    outbox_init();
}

func outputStats_new() -> OutputStatistics {
    return struct {
        totalGasUsed: 0,
        numTx: 0,
        numEvmLogs: 0,
        numLogs: 0,
        numSends: 0
    };
}

func outputStats_add(os1: OutputStatistics, os2: OutputStatistics) -> OutputStatistics {
    return struct {
        totalGasUsed: os1.totalGasUsed + os2.totalGasUsed,
        numTx: os1.numTx + os2.numTx,
        numEvmLogs: os1.numEvmLogs + os2.numEvmLogs,
        numLogs: os1.numLogs + os2.numLogs,
        numSends: os1.numSends + os2.numSends,
    };
}

var globalBlockReceiptData: struct {
    data: PerBlockReceiptData,
    statsThisBlock: OutputStatistics,
    statsAllTime: OutputStatistics,
    lastArbBlockNum: uint,
    nextSendTimestamp: uint,
};

var logsQueuedForEndOfBlock: Queue;

public view write func outputStats_endOfBlock(arbBlockNum: uint, ethBlockNum: uint, timestamp: uint) {
    if (inbox_currentTimestamp() >= globalBlockReceiptData.nextSendTimestamp) && !outbox_isEmpty() {
        outbox_send();
        set globalBlockReceiptData.nextSendTimestamp = inbox_currentTimestamp() + chainParams_getSecondsPerSend();
    }

    // add current block (including soon-to-be-issued block summary log) into total stats
    let updatedStats = outputStats_add(
        globalBlockReceiptData.statsThisBlock,
        globalBlockReceiptData.statsAllTime
    );
    set updatedStats.numLogs = updatedStats.numLogs + 1;  // +1 for soon-to-be-issued block summary log

    set globalBlockReceiptData.statsAllTime = updatedStats;

    let q = logsQueuedForEndOfBlock;
    while ! queue_isEmpty(q) {
        if let Some(res) = queue_get(q) {
            let (*q, logItem) = res;
            asm(logItem) { log };
        } else {
            // should never happen
            q = queue_new();
        }
    }
    logsQueuedForEndOfBlock = q;

    asm((
        const::LogType_blockSummary,
        arbBlockNum,
        timestamp,
        globalBlockReceiptData.statsThisBlock,
        globalBlockReceiptData.statsAllTime,
        gasAccounting_summaryToPublish(),
        globalBlockReceiptData.lastArbBlockNum,
        ethBlockNum,
    )) { log }; 

    set globalBlockReceiptData.lastArbBlockNum = arbBlockNum;

    // now clear current block stats, because we're advancing to a new current block
    set globalBlockReceiptData.statsThisBlock = outputStats_new();
    set globalBlockReceiptData.data = struct {
        totalGasUsed: 0,
        numTx: 0,
        numEvmLogs: 0
    };
}

view write func outputStats_addTxLog(gasUsed: uint, numEvmLogs: uint) {
    let stats = globalBlockReceiptData.statsThisBlock;

    set stats.numTx = 1 + stats.numTx;
    set stats.numLogs = 1 + stats.numLogs;
    set stats.totalGasUsed = gasUsed + stats.totalGasUsed;
    set stats.numEvmLogs = numEvmLogs + stats.numEvmLogs;

    set globalBlockReceiptData.statsThisBlock = stats;
}

view write func outputStats_addNonTxLog() {
    set globalBlockReceiptData.statsThisBlock.numLogs = 1 + globalBlockReceiptData.statsThisBlock.numLogs;
}

view write func outputStats_addSend() {
    set globalBlockReceiptData.statsThisBlock.numSends = 1 + globalBlockReceiptData.statsThisBlock.numSends;
}

public write func txReceipts_init() {  // will be called at beginning of main()
    globalBlockReceiptData = struct {
        data: struct {
            totalGasUsed: 0,
            numTx: 0,
            numEvmLogs: 0
        },
        statsThisBlock: outputStats_new(),
        statsAllTime: outputStats_new(),
        lastArbBlockNum: ~0,
        nextSendTimestamp: 0,
    };
}

view write func update_txReceiptsForBlock(
    gasUsed: uint,
    numEvmLogs: uint
) -> PerBlockReceiptData {
    // first add in the gas, because returned value is supposed to include it
    set globalBlockReceiptData.data.totalGasUsed = gasUsed + globalBlockReceiptData.data.totalGasUsed;

    // save the value that we will return
    let ret = globalBlockReceiptData.data;

    // now do the updates that we're not supposed to include in the return data
    set globalBlockReceiptData.data.numTx = 1 + globalBlockReceiptData.data.numTx;
    set globalBlockReceiptData.data.numEvmLogs = numEvmLogs + globalBlockReceiptData.data.numEvmLogs;

    return ret;
}

public view write func emitTxReceipt(
    l1message: IncomingRequest,
    resultCode: uint,
    maybeReturnData: option<ByteArray>,
    maybeEvmLogs: option<EvmLogs>,
    gasUsage: option<GasUsage>,
    feeStats: TxFeeStats,
    emitTracingInfo: bool,
    originalSender: address,
) {
    arbStatistics_addTxReceipt();

    let realGasUsage = if let Some(gu) = gasUsage {
        gu
    } else {
        struct {
            gasUsed: 0,
            gasPriceWei: 0,
        }
    };

    let (evmLogs, numEvmLogs) = if let Some(el) = maybeEvmLogs {
        (el, evmlogs_numLogs(el))
    } else {
        (evmlogs_empty(), 0)
    };

    outputStats_addTxLog(realGasUsage.gasUsed, numEvmLogs);

    let returnData = if let Some(rd) = maybeReturnData {
        rd
    } else {
        bytearray_new(0)
    };

    let txResultInfo = struct {
        returnCode: resultCode,
        returnData: bytearray_toSizeAndBuffer(returnData),
        evmLogs: evmLogs,
    };

    if emitTracingInfo {
        evmTracer_emitAndClear();
    }

    asm((
        const::LogType_txReceipt,
        l1message with {
            msgData: unsafecast<ByteArray>(bytearray_toSizeAndBuffer(l1message.msgData))  // because the L1 expects this format
        },
        txResultInfo,
        realGasUsage,
        update_txReceiptsForBlock(
            realGasUsage.gasUsed,
            numEvmLogs,
        ),
        feeStats,
        originalSender,
    ),) { log };
}

// The globalOutbox queues a sequence of outgoing messages that ArbOS wants to emit as sends.
// For efficiency, we don't do a send for each individual message. Instead, we emit each message as a log, and
//       add the message to the next batch. Periodically do a send that emits a summary of the current batch
//       (including a merkle root of the messages in the batch).
var globalOutbox: struct {
    batch: MerkleTreeBuilder,
    batchNumber: uint,
    numInBatch: uint,
    evmTracer: EvmTracer,
};

write func outbox_init() {
    globalOutbox = struct {
        batch: merkleTreeBuilder_new(),
        batchNumber: 0,
        numInBatch: 0,
        evmTracer: evmTracer_new(),
    };
}

public view func outbox_getEvmTracer() -> EvmTracer {
    return globalOutbox.evmTracer;
}

public view write func outbox_setEvmTracer(tracer: EvmTracer) {
    set globalOutbox.evmTracer = tracer;
}

view func outbox_isEmpty() -> bool {
    return globalOutbox.numInBatch == 0;
}

public view write func outbox_append(item: ByteArray) {
    let batchNumber = globalOutbox.batchNumber;
    let numInBatch = globalOutbox.numInBatch;

    set globalOutbox.numInBatch = 1 + numInBatch;
    set globalOutbox.batch = merkleTreeBuilder_add(globalOutbox.batch, item);

    let (size, buf) = bytearray_toSizeAndBuffer(item);
    logsQueuedForEndOfBlock = queue_put(
        logsQueuedForEndOfBlock,
        (const::LogType_send, batchNumber, numInBatch, size, buf),
    );
    outputStats_addNonTxLog();
}

view write func outbox_send() {  // emit a send to summarize the current batch, then get ready for the next batch
    let (tree, rootHash) = merkleTreeBuilder_finish(globalOutbox.batch);

    // queue a log that includes the whole batch
    logsQueuedForEndOfBlock = queue_put(
        logsQueuedForEndOfBlock,
        (const::LogType_sendMerkleTree, globalOutbox.batchNumber, globalOutbox.numInBatch, tree),
    );
    outputStats_addNonTxLog();

    // send the batch summary, using the prescribed format:
    //        send type (1 byte)
    //        batch number (32 bytes)
    //        num messages in batch (32 bytes)
    //        root merkle hash of messages in batch
    asm(
        97,
        setbuffer256(
            setbuffer256(
                setbuffer256(
                    setbuffer8(newbuffer(), 0, const::AVMSendType_batch),
                    1,
                    globalOutbox.batchNumber
                ),
                33,
                globalOutbox.numInBatch
            ),
            65,
            uint(rootHash)

        )
    ) { send };
    outputStats_addSend();

    // set up the globalOutbox for the next batch
    globalOutbox = struct {
        batch: merkleTreeBuilder_new(),
        batchNumber: globalOutbox.batchNumber + 1,
        numInBatch: 0,
        evmTracer: globalOutbox.evmTracer,
    };
}

public view write func queueMessageForSend(msg: ByteArray) {
    evmCallStack_queueMessage(msg);
}

public view write func sendQueuedMessages(queue: Queue, evmLogs: EvmLogs) -> EvmLogs {
    let sendTxIndexQ = queue_new();
    loop {
        if let Some(res) = queue_get(queue) {
            let (*queue, rawMsg) = res;
            let msg = unsafecast<ByteArray>(rawMsg);
            if bytearray_getByte(unsafecast<ByteArray>(msg), 0) == const::SendType_sendTxToL1 {
                sendTxIndexQ = queue_put(sendTxIndexQ, globalOutbox.numInBatch);
            }
            outbox_append(msg);
        } else {
            return if queue_isEmpty(sendTxIndexQ) {
                evmLogs
            } else {
                evmlogs_forall(evmLogs, updateEvmLogForSendToL1, sendTxIndexQ).0
            };
        }
    }
}

type LogWith4Topics = struct {  // the structure that ArbOS uses to represent (and emit) an EVM log with 4 topics
    sender: address,
    data: struct {
        size: uint,
        buf: buffer
    },
    topic0: uint,
    topic1: uint,
    topic2: uint,
    topic3: uint,
};

view func updateEvmLogForSendToL1(rawLog: any, state: any) -> (any, any) {
    // This is designed to be used by evmlogs_forall. When used by evmlogs_forall in its pass through
    //      the current set of logs, this morphs EVM logs with topic[0] == const::EVMLogTopicPlaceHolderForL2ToL1Send
    //      into proper EVM log items with batch-related fields filled in.

    // Cast the log item to a struct that assumes 4 topics. The topics might not exist,
    //      but that's OK because we won't try to access them until after we have verified that they exist.
    let log = unsafecast<LogWith4Topics>(rawLog);
    if (asm(log) uint { tlen } == 6)
                && (log.topic0 == const::eventTopic_ArbSys_L2ToL1Transaction)
                && (log.sender == address(const::Address_ArbSys)) {
        // Now we know that the log has 4 topics.
        if let Some(res) = queue_get(unsafecast<Queue>(state)) {
            let (q, item) = res;
            set log.topic3 = globalOutbox.batchNumber;
            set log.data.buf = setbuffer256(log.data.buf, 32, unsafecast<uint>(item));
            (log, q)
        } else {
            // This should never happen, but if it does, get everything right except for the index in batch.
            set log.topic2 = globalOutbox.batchNumber;
            (log, state)
        }
    } else {
        // The log isn't an authorized L2-to-L1 call, so we shouldn't do anything to it.
        (rawLog, state)
    }
}
