//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type ByteArray;
import type StorageMap;

import func bytearray_new(capacity: uint) -> ByteArray;
import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_setByte(ba: ByteArray, offset: uint, value: uint) -> ByteArray;
import func storageMap_new() -> StorageMap;
import func storageMap_get(sm: StorageMap, index: uint) -> uint;
import func storageMap_set(sm: StorageMap, index: uint, value: uint) -> StorageMap;
import func getErc20address() -> address;
import func getErc721address() -> address;

type AccountStore = map<address, Account>

type Account = struct {
    addr: address,
    nextSeqNum: uint,
    ethBalance: uint,
    contractInfo: option<AccountContractInfo>,  // info on the contract at this address, if there is one
}

type AccountContractInfo = struct {
    code: ByteArray,
    evmJumpTable: map<uint, impure func()>,  // maps each valid EVM jump destination to the corresponding AVM codepoint
    startCodePoint: impure func(),
    storage: StorageMap,
}

// globalAccountStore is the authoritative source of info on accounts that exist on this chain
// Note that other accountStores will exist, but these others are all contingent somehow,
//       in the sense that they will be written to globalAccountStore only if some event occurs.
// For example, a running transaction will have its own accountStore, which will be written
//       to globalAccountStore only if the transactions succeeds.
var globalAccountStore: AccountStore;   // needs to be initialized before use


public impure func accountStore_init() {   // This must be called first!
    globalAccountStore = newmap<address, Account>;
}

public impure func getGlobalAccountStore() -> AccountStore {
    return globalAccountStore;
}

public impure func setGlobalAccountStore(acctStore: AccountStore) {
    globalAccountStore = acctStore;;
}

public func accountStore_get(acctStore: AccountStore, addr: address) -> Account {
    if let Some(acct) = acctStore[addr] {
        return acct;
    } else {
        // There is no recorded account at this address, so make a pristine account.
        return pristineAccount(addr);
    }
}

public func pristineAccount(addr: address) -> Account {
    return struct {
        addr: addr,
        nextSeqNum: 0,
        ethBalance: 0,
        contractInfo: None<AccountContractInfo>
    };
}

public func accountStore_set(
    acctStore: AccountStore, 
    addr: address, 
    acct: Account
) -> AccountStore {
    return acctStore with { [addr] = acct };
}


public func accountStore_destroyAndTransferBalance(
    acctStore: AccountStore,
    victimAddr: address,
    recipientAddr: address
) -> AccountStore {
    // Destroy the account at victimAddr, and give its Eth balance to recipientAddr

    let victim = accountStore_get(acctStore, victimAddr);
    let recipient = accountStore_get(acctStore, recipientAddr);
    return acctStore
        with { [recipientAddr] = account_addBalance(recipient, victim.ethBalance) }
        with { [victimAddr] = pristineAccount(victimAddr) };
}

public func account_isEmpty(acct: Account) -> bool {
    return (acct.nextSeqNum == 0) && (acct.ethBalance == 0) && (acct.contractInfo == None<AccountContractInfo>);
}

public func account_checkAndIncrSeqNum(
    account: Account, 
    seqNumRecvd: uint
) -> option<Account> {
    // if seqNumRecvd has the expected value, increment seqNum in account and return updated account.
    // else return None
    let nextSeq = account.nextSeqNum;
    if (nextSeq == seqNumRecvd) {
        return Some(account with { nextSeqNum: nextSeq+1 });
    } else {
        return None;
    }
}

public func account_getAddress(account: Account) -> address {
    return account.addr;
}

public func account_getStartCodePoint(account: Account) -> option<impure func()> {
    return Some((account.contractInfo?).startCodePoint);
}

public func account_getBalance(account: Account) -> uint {
    return account.ethBalance;
}

public func account_setBalance(account: Account, balance: uint) -> Account {
    return account with { ethBalance: balance };
}

public func account_addBalance(account: Account, balance: uint) -> Account {
    return account with { ethBalance: account.ethBalance + balance };
}

public func account_getEvmJumpTable(account: Account) -> option<map<uint, impure func()>> {
    return Some((account.contractInfo?).evmJumpTable);
}

public func account_fetchAndIncrSeqNum(account: Account) -> (uint, Account) {
    let ret = account.nextSeqNum;
    account = account with {
        nextSeqNum: ret+1
    };
    return (ret, account,);
}

public func account_incrSeqNum(account: Account) -> Account {
    return account with {
        nextSeqNum: account.nextSeqNum + 1
    };
}

public func account_getNextSeqNum(account: Account) -> uint {
    return account.nextSeqNum;
}

public func accountStore_createAccountFromEvmCode(
    store: AccountStore,
    newAddr: address,
    code: ByteArray,
    evmJumpTable: map<uint, impure func()>,
    initCodePt: impure func(),
    storageMap: StorageMap
) -> option<AccountStore> {
    // Create a new account for a compiled EVM contract.
    // Return Some(updatedAccountStore), or None if something went wrong.
    let oldAcct = accountStore_get(store, newAddr);
    if (account_isEmpty(oldAcct)) {
        return Some(accountStore_set(
            store,
            newAddr,
            oldAcct with {
                contractInfo: Some(struct {
                    code: code,
                    evmJumpTable: evmJumpTable,
                    resumeCodePoint: initCodePt,
                    storage: storageMap,
                })
            }
        ));
    } else {
        // There was already an account at that address, so return failure.
        return None;
    }
}

public func accountStore_createBuiltinContract(
    acctStore: AccountStore,
    addr: address,
    entryPoint: impure func(),
    isArbitrumStyle: bool,
) -> option<AccountStore> {
    let oldAcct = accountStore_get(acctStore, addr);
    if (account_isEmpty(oldAcct)) {
        // set up fake code for the contract
        // if Arbitrum style, must give it nonzero size because callers check if size is zero to see if contract exists
        // otherwise it's an Ethereum precompile which is specified to have null bytearray as its code
        let fakeCode = bytearray_new(0);
        if (isArbitrumStyle) {
            // fake code is a single EVM INVALID instruction
            fakeCode = bytearray_setByte(fakeCode, 0, 0xfe);
        }

        return Some(
            accountStore_set(
                acctStore,
                addr,
                oldAcct with {
                    contractInfo: Some(struct {
                        code: fakeCode,
                        evmJumpTable: newmap<uint, impure func()>,
                        resumeCodePoint: entryPoint,
                        storage: storageMap_new(),
                    })
                } with {
                    nextSeqNum: 1
                }
            )
        );
    } else {
        // There was already an account at that address, so return failure.
        return None;
    }
}

public func accountStore_createERC20(
    acctStore: AccountStore, 
    addr: address
) -> option<AccountStore> {
    // Create a new ERC20 proxy contract at the given address.
    // Return Some(updatedAccountStore), or None if something went wrong.
    if (account_isEmpty(accountStore_get(acctStore, addr))) {
        acctStore = accountStore_cloneContract(
            acctStore, 
            getErc20address(),
            addr
        )?;
        return Some(acctStore);
    } else {
        // There was already an account at that address, so return failure.
        return None;
    }
}

public func accountStore_createERC721(
    acctStore: AccountStore,
    addr: address
) -> option<AccountStore> {
    // Create a new ERC20 proxy contract at the given address.
    // Return Some(updatedAccountStore), or None if something went wrong.
    if (account_isEmpty(accountStore_get(acctStore, addr))) {
        acctStore = accountStore_cloneContract(
            acctStore,
            getErc721address(),
            addr
        )?;
        return Some(acctStore);
    } else {
        // There was already an account at that address, so return failure.
        return None;
    }
}

public func accountStore_cloneContract(
    acctStore: AccountStore,
    oldAddr: address, 
    newAddr: address
) -> option<AccountStore> {
    // Clone an existing contract.
    // Return Some(updatedAccountStore), or None if something went wrong.
    let oldAccount = accountStore_get(acctStore, oldAddr);
    let newAccount = oldAccount
        with { ethBalance: 0 }
        with { nextSeqNum: 1 }
        with { contractInfo: Some((oldAccount.contractInfo?) with { storage: storageMap_new() }) };
    return Some(acctStore with { [newAddr] = newAccount });
}

public func account_getEthBalance(account: Account) -> uint {
    return account.ethBalance;
}

public func account_setEthBalance(account: Account, newBal: uint) -> Account {
    return account with { ethBalance: newBal };
}

public func account_addToEthBalance(account: Account, addition: uint) -> Account {
    return account with { ethBalance: account.ethBalance + addition };
}

public func account_deductFromEthBalance(account: Account, deduction: uint) -> option<Account> {
    if (account.ethBalance >= deduction) {
        return Some(
            account with { ethBalance: account.ethBalance-deduction }
        );
    } else {
        return None;
    }
}

public func accountStore_transferEthBalance(
    acctStore: AccountStore,
    from: address, 
    to: address, 
    amount: uint
) -> option<AccountStore> {
    // Transfer Eth from one account to another.
    // Return Some(updatedAccountStore), or None if insufficient funds.
    if (amount == 0) {
        return Some(acctStore);
    }

    let fromAcct = accountStore_get(acctStore, from);
    if (fromAcct.ethBalance < amount) {
        return None;
    }
    let toAcct = accountStore_get(acctStore, to);
    acctStore = acctStore 
        with { [from] = fromAcct with { ethBalance: fromAcct.ethBalance - amount }}
        with { [to] = toAcct with { ethBalance: toAcct.ethBalance + amount }};
    return Some(acctStore);
}

public func account_getAllStorage(account: Account) -> option<StorageMap> {
    // Get the full contents of a contract's storage.
    // Return None if account doesn't have contract storage.
    return Some((account.contractInfo?).storage);
}

public func account_getStorageCell(account: Account, cell: uint) -> option<uint> {
    // Get contents of one cell in a contract's storage.
    // Return None if account doesn't have contract storage.
    return Some(storageMap_get((account.contractInfo?).storage, cell));
}

public func account_setStorageCell(
    account: Account, 
    cell: uint, 
    value: uint
) -> option<Account> {
    // Set the value of one cell in a contract's storage.
    // Return None if account doesn't have contract storage.
    let contractInfo = account.contractInfo?;
    return Some(account with {
        contractInfo: Some(contractInfo with {
            storage: storageMap_set(contractInfo.storage, cell, value)
        })
    });
}

public func account_setContractInfo(
    acct: Account,
    code: ByteArray,
    evmJumpTable: map<uint, impure func()>,
    startCodePoint: impure func(),
    storage: StorageMap
) -> Account {
    if (acct.nextSeqNum == 0) {
        // new contract accounts are supposed to start with sequence number = 1; make it so
        acct = acct with { nextSeqNum: 1 };
    }

    return acct with { contractInfo: Some(
        struct {
            code: code,
            evmJumpTable: evmJumpTable,
            startCodePoint: startCodePoint,
            storage: storage
        }
    )};
}

public func account_getCodeSize(acct: Account) -> uint {
    if let Some(contractInfo) = acct.contractInfo {
        return bytearray_size(contractInfo.code);
    } else {
        return 0;  // Account has no code, so its codesize is deemed to be zero.
    }
}

public func account_getCode(acct: Account) -> option<ByteArray> {
    return Some((acct.contractInfo?).code);
}