//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use bridge_arbos_versions::GlobalsBeforeUpgrade;
use accounts::AccountStore;
use evmCallStack::EvmCallFrame;
use evmCallStack::IncomingRequestAndLogs;
use inbox::Inbox;
use messages::TxRequestData;

use gasAccounting::GasAccountingInfo;

use std::rateEstimator::rateEstimator_new;

public func set_globalChainParameters_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> map<uint, uint> {
    oldGlobals.globalChainParameters
        with { [const::Atom_Param_GasUsageTimeConstant] = const::Default_Param_GasUsageTimeConstant }
        with { [const::Atom_Param_GasPoolFullnessTargetPercent] = const::Default_Param_GasPoolFullnessTargetPercent }
        with { [const::Atom_Param_L1GasEstimatorSampleUpdate] = const::Default_Param_L1GasEstimatorSampleUpdate }
        with { [const::Atom_Param_PoolFullnessRatioWeightBasisPoints] = const::Default_Param_PoolFullnessRatioWeightBasisPoints }
}

public func set_gasAccountingInfo_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> GasAccountingInfo {
    let gai = oldGlobals.gasAccountingInfo;
    let cs = gai.congestionState;
    let gasPoolMax = if let Some(gpm) = oldGlobals.globalChainParameters[const::Atom_Param_GasPoolMax] {
        gpm
    } else {
        const::Default_Param_GasPoolMax
    };
    struct {
        txState: gai.txState,
        feeConfig: gai.feeConfig,
        currentPrices: gai.currentPrices,
        gasRemainingThisBlock: gai.gasRemainingThisBlock,
        congestionState: struct {
            gasPool: cs.gasPool,
            lastArbBlockNumSeen: cs.lastArbBlockNumSeen,
            lastTimestampSeen: cs.lastTimestampSeen,
            gasUsageRateEstimator: rateEstimator_new(
                const::Default_Param_GasUsageTimeConstant,
                0,
                cs.lastTimestampSeen,
            ),
            gasPoolTarget: gasPoolMax * const::Default_Param_GasPoolFullnessTargetPercent / 100,
            gasPoolWeight: const::Atom_Param_PoolFullnessRatioWeightBasisPoints,
            congestionPriceWei: cs.congestionPriceWei,
        },
        speedLimitPerSecond: gai.speedLimitPerSecond,
        pricingParams: gai.pricingParams,
        gasAllocatedToThisBlock: gai.gasAllocatedToThisBlock,
        retryablePrices: gai.retryablePrices,
        allowedSenders: gai.allowedSenders,
    }
}


// The following functions are for the renaming of IncomingRequest's `.adminMode` to `.doNotCharge`
// This renaming only nominally alters the types of these variables, not their actual contents

public func set_globalAccountStore_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> AccountStore {
    unsafecast<AccountStore>(oldGlobals.globalAccountStore)
}

public func set_globalCallStack_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> option<EvmCallFrame> {
    unsafecast<option<EvmCallFrame> >(oldGlobals.globalCallStack)
}

public func set_globalCurrentRetryableRequest_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> option<IncomingRequestAndLogs> {
    unsafecast<option<IncomingRequestAndLogs> >(oldGlobals.globalCurrentRetryableRequest)
}

public func set_globalCurrentTxRequest_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> TxRequestData {
    unsafecast<TxRequestData>(oldGlobals.globalCurrentTxRequest)
}

public func set_globalInbox_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> Inbox {
    unsafecast<Inbox>(oldGlobals.globalInbox)
}
