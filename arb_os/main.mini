//
// Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
//


use accounts::AccountStore;
use accounts::accountStore_init;
use accounts::safeGetGlobalAccountStore;
use accounts::safeSetGlobalAccountStore;
use accounts::accountStore_transferEthBalance;
use accounts::accountStore_createAccountFromEvmCode;
use accounts::accountStore_upgradeContractFromEvmCode;

use arbstatistics::arbStatistics_init;
use arbowner::arbowner_init;

use arbsys::arbosVersion;

use blockhash::blockhash_init;

use chainParameters::chainParams_init;
use chainParameters::notifyParamsChanged;
use chainParameters::chainParams_getOrDie;

use std::codeSegment::codeSegment_init;
use std::codeSegment::translateEvmCodeSegment;

use contractTemplates::getArbInfoCode;
use contractTemplates::getArbInfoAddress;
use contractTemplates::getArbInfoStorage;

use decompression::decompression_init;

use errorHandler::errorHandler_init;
use errorHandler::errorHandler_setUpgradeProtector;

use evmCallStack::evmCallStack_init;

use evmOps::evmOps_init;
use evmOps::dispatchForEvmOp;

use gasAccounting::gasAccounting_init;

use inbox::inbox_init;
use inbox::mainRunLoop;
use inbox::emitGenesisBlockReceipt;

use output::output_init;
use output::txReceipts_init;

use precompiles::precompiles_init;

use std::bytearray::bytearray_unmarshalBytes;
use std::bytestream::bytestream_new;

use bridge_arbos_versions::GlobalsBeforeUpgrade;
use bridge_arbos_versions::remapGlobalsForUpgrade;

// The compiler will always put __fixedLocationGlobal in slot 0 of the AVM Register,
//     so we can rely on it not moving across upgrades.
var __fixedLocationGlobal: view write func(uint);    // points to EVM op dispatch function

sensitive throw view write func main(oldGlobals: GlobalsBeforeUpgrade) {
    if unsafecast<any>(oldGlobals) != any(()) {
        // this is an upgrade; we're inheriting the state of a previous ArbOS instance

        // create an upgrade-only error handler that saves and restores the contents of the register
        errorHandler_setUpgradeProtector(oldGlobals);

        let (newGlobals, _oldArbosVersion) = remapGlobalsForUpgrade(oldGlobals);

        asm(newGlobals) { rset };

        // now re-do the initializations that set up pointers into the ArbOS code
        errorHandler_init();
        evmOps_init();
        __fixedLocationGlobal = dispatchForEvmOp;
        codeSegment_init();

        if (initializePreinstalls(true) == None<()>) {
            error;   // don't try to run without preinstalls and precompiles
        }

        notifyParamsChanged();   // call this in case parameters changed during upgrade

        if (chainParams_getOrDie(const::Atom_Param_ChainID) == const::ChainID_ArbitrumOne) && (arbosVersion() == 48) {
            // some funds were stranded due to a bug
            // return them to the account that should have had them
            let acctStore = safeGetGlobalAccountStore();
            if let Some(store) = accountStore_transferEthBalance(
                acctStore,
                address(0x9CDd145B60a7f292D0d8B037AbaC65b6A8b7f3e5),
                address(0x5fa351a4202c772c8d828e9220068a829d67d85c),
                20*1000000000*1000000000,  // 20 ETH
            ) {
                acctStore = store;
            }
            safeSetGlobalAccountStore(acctStore);
        }
    } else {
        // this is a clean start, not an upgrade
        errorHandler_init();
        chainParams_init();
        arbStatistics_init();

        codeSegment_init();
        output_init();
        decompression_init();
        inbox_init();
        gasAccounting_init();
        evmCallStack_init();
        evmOps_init();
        __fixedLocationGlobal = dispatchForEvmOp;
        blockhash_init();
        accountStore_init();
        arbowner_init();
        txReceipts_init();
        if initializePreinstalls(false) == None<()> {
            error;   // don't try to run without preinstalls and precompiles
        }

        // advance the Arbitrum block number, and emit a block receipt
        emitGenesisBlockReceipt();
    }

    mainRunLoop();
}

view write throw func initializePreinstalls(isUpgrade: bool) -> option<()> {
    let acctStore = safeGetGlobalAccountStore();

    let code = bytearray_unmarshalBytes(getArbInfoCode())?;
    let (initCodePt, evmJumpTable, _) = translateEvmCodeSegment(
        bytestream_new(code),
        false
    );
    acctStore = if isUpgrade {
        accountStore_upgradeContractFromEvmCode(
            acctStore,
            getArbInfoAddress(),
            code,
            evmJumpTable,
            initCodePt,
        )
    } else {
        accountStore_createAccountFromEvmCode(
            acctStore,
            getArbInfoAddress(),
            code,
            evmJumpTable,
            initCodePt,
            getArbInfoStorage()
        )?
    };

    // set up precompiled contracts
    acctStore = precompiles_init(acctStore, isUpgrade)?;

    safeSetGlobalAccountStore(acctStore);

    Some(())
}
