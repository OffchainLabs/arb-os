//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type AccountStore;
import type Account;
import type ByteArray;
import type IncomingRequest;

import impure func getGlobalAccountStore() -> AccountStore;
import impure func setGlobalAccountStore(acctStore: AccountStore);
import func accountStore_get(acctStore: AccountStore, addr: address) -> Account;
import func accountStore_createERC20(acctStore: AccountStore, addr: address) -> option<AccountStore>;
import func accountStore_createERC721(acctStore: AccountStore, addr: address) -> option<AccountStore>;
import func account_isEmpty(acct: Account) -> bool;

import func bytearray_new(capacityHint: uint) -> ByteArray;
import func bytearray_setByte(ba: ByteArray, offset: uint, val: uint) -> ByteArray;
import func bytearray_set256(ba: ByteArray, offset: uint, val: uint) -> ByteArray;

import impure func initEvmCallStack(
    callKind: uint,
    request: TxRequestData
);

// This is duplicated from messages.mini
type TxRequestData = struct {
    maxGas: uint,
    gasPrice: uint,
    seqNum: option<uint>,
    caller: address,
    calleeAddr: address,
    value: uint,
    calldata: ByteArray,
    incomingRequest: IncomingRequest,
}

public impure func tokens_erc20deposit(
    tokenAddress: address,
    payee: address,
    amount: uint,
    fullMsg: IncomingRequest
) -> option<()> {
    let globalAS = getGlobalAccountStore();
    if(account_isEmpty(accountStore_get(globalAS, tokenAddress))) {
        globalAS = accountStore_createERC20(
            globalAS,
            tokenAddress
        )?;
        setGlobalAccountStore(globalAS);
    }

    // encode the calldata for call to adminMint
    let calldata = bytearray_new(0);
    calldata = bytearray_setByte(
        bytearray_setByte(
            bytearray_setByte(
                bytearray_setByte(
                    calldata,
                    0,
                    0xe5,
                ),
                1,
                0x83,
            ),
            2,
            0x06,
        ),
        3,
        0xf9
    );
    calldata = bytearray_set256(calldata, 4, uint(payee));
    calldata = bytearray_set256(calldata, 36, amount);

    initEvmCallStack(
        0,               // treat as regular txcall
        struct {
            maxGas: 1000000000000,  // gas will eventually be charged to the OS
            gasPrice: 0,
            seqNum: None<uint>,
            caller: address(1),     // special caller address, so contract recognizes call as coming from OS
            calleeAddr: tokenAddress,
            value: 0,
            calldata: calldata,
            incomingRequest: fullMsg,
        }
    );  // should never return

    return None;
}

public impure func tokens_erc721deposit(
    tokenAddress: address,
    payee: address,
    id: uint,
    fullMsg: IncomingRequest
) -> option<()> {
    let globalAS = getGlobalAccountStore();
    if(account_isEmpty(accountStore_get(globalAS, tokenAddress))) {
        globalAS = accountStore_createERC721(
            globalAS,
            tokenAddress
        )?;
        setGlobalAccountStore(globalAS);
    }

    // encode the calldata for call to adminMint
    let calldata = bytearray_new(0);
    calldata = bytearray_setByte(
        bytearray_setByte(
            bytearray_setByte(
                bytearray_setByte(
                    calldata,
                    0,
                    0xe5,
                ),
                1,
                0x83,
            ),
            2,
            0x06,
        ),
        3,
        0xf9
    );
    calldata = bytearray_set256(calldata, 4, uint(payee));
    calldata = bytearray_set256(calldata, 36, id);

    initEvmCallStack(
        0,               // treat as regular txcall
        struct {
            maxGas: 1000000000000,  // gas will eventually be charged to the OS
            gasPrice: 0,
            seqNum: None<uint>,
            caller: address(1),     // special caller address, so contract recognizes call as coming from OS
            calleeAddr: tokenAddress,
            value: 0,
            calldata: calldata,
            incomingRequest: fullMsg,
        }
    );  // should never return

    return None;
}

