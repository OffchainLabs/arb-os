
type InputGlobals = struct {
    globalAccountStore: any,
    upgradeInProgress: option<any>,
    globalChainParams: option<any>,
    unreachableMask: uint,
    globalIndexedAddressTable: any,
    inErrorHandler: bool,
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    evmOpJumpTable: [44]impure func(),
    gasAccountingInfo: struct {
    gasPool: int,
    reserve: uint,
    owedToValidators: uint,
    totalPaidToValidators: uint,
    specialDebts: any,
    currentGasPrice: uint,
    gasRemainingThisBlock: uint,
    lastBlockNumSeen: uint,
    txState: option<any>,
    pricingState: any,
    payValFeesTo: option<address>,
    netFeeInfo: option<any>,
    overheadTracker: any,
},
    gasAccountingParams: struct {
    SpeedLimitPerBlock: uint,
    GasPoolMax: int,
    BaseGasPrice: uint,
    TxGasLimit: uint,
    StorageCharge: uint,
},
    globalInbox: any,
    globalInputQueue: struct {
    txQ: any,
    batchQ: any,
},
    globalBlockReceiptData: struct {
    data: any,
    statsThisBlock: any,
    statsAllTime: any,
    lastBlockNum: uint,
    nextSendBlockNum: uint,
},
    globalOutbox: struct {
    batch: any,
    batchNumber: uint,
    numInBatch: uint,
},
    moduleManager: any,
    _jump_table: any,
}
type OutputGlobals = struct {
    globalAccountStore: any,
    upgradeInProgress: option<any>,
    globalChainParams: option<any>,
    unreachableMask: uint,
    globalIndexedAddressTable: any,
    inErrorHandler: bool,
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    evmOpJumpTable: [44]impure func(),
    gasAccountingInfo: struct {
    gasPool: int,
    reserve: uint,
    owedToValidators: uint,
    totalPaidToValidators: uint,
    specialDebts: any,
    currentGasPrice: uint,
    gasRemainingThisBlock: uint,
    lastBlockNumSeen: uint,
    txState: option<any>,
    pricingState: any,
    payValFeesTo: option<address>,
    netFeeInfo: option<any>,
    overheadTracker: any,
},
    gasAccountingParams: struct {
    SpeedLimitPerBlock: uint,
    GasPoolMax: int,
    BaseGasPrice: uint,
    TxGasLimit: uint,
    StorageCharge: uint,
},
    globalInbox: any,
    globalInputQueue: struct {
    txQ: any,
    batchQ: any,
},
    globalBlockReceiptData: struct {
    data: any,
    statsThisBlock: any,
    statsAllTime: any,
    lastBlockNum: uint,
    nextSendBlockNum: uint,
},
    globalOutbox: struct {
    batch: any,
    batchNumber: uint,
    numInBatch: uint,
},
    moduleManager: any,
    _jump_table: any,
}
public impure func upgrade(input_globals: InputGlobals) -> OutputGlobals {
    let globalInputQueue = input_globals.globalInputQueue;
    let globalIndexedAddressTable = input_globals.globalIndexedAddressTable;
    let globalCurrentTxRequest = input_globals.globalCurrentTxRequest;
    let inErrorHandler = input_globals.inErrorHandler;
    let globalOutbox = input_globals.globalOutbox;
    let globalBlockReceiptData = input_globals.globalBlockReceiptData;
    let evmOpJumpTable = input_globals.evmOpJumpTable;
    let gasAccountingInfo = input_globals.gasAccountingInfo;
    let globalInbox = input_globals.globalInbox;
    let globalAccountStore = input_globals.globalAccountStore;
    let gasAccountingParams = input_globals.gasAccountingParams;
    let globalChainParams = input_globals.globalChainParams;
    let unreachableMask = input_globals.unreachableMask;
    let moduleManager = input_globals.moduleManager;
    let globalCallStack = input_globals.globalCallStack;
    let upgradeInProgress = input_globals.upgradeInProgress;
    let _jump_table = (asm() OutputGlobals { rget })._jump_table;
    return struct {
        globalAccountStore: globalAccountStore,
        upgradeInProgress: upgradeInProgress,
        globalChainParams: globalChainParams,
        unreachableMask: unreachableMask,
        globalIndexedAddressTable: globalIndexedAddressTable,
        inErrorHandler: inErrorHandler,
        globalCallStack: globalCallStack,
        globalCurrentTxRequest: globalCurrentTxRequest,
        evmOpJumpTable: evmOpJumpTable,
        gasAccountingInfo: gasAccountingInfo,
        gasAccountingParams: gasAccountingParams,
        globalInbox: globalInbox,
        globalInputQueue: globalInputQueue,
        globalBlockReceiptData: globalBlockReceiptData,
        globalOutbox: globalOutbox,
        moduleManager: moduleManager,
        _unused: (),
        _jump_table: _jump_table,
    };
}
