//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::safeGetGlobalAccountStore;
use accounts::safeSetGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_set;
use accounts::accountStore_getRetryBuffer;
use accounts::accountStore_setRetryBuffer;
use accounts::accountStore_transferEthBalance;
use accounts::accountStore_newEscrow;
use accounts::accountStore_payFromEscrow;
use accounts::account_addToEthBalance;

use chainParameters::chainParams_getOrDie;

use evmCallStack::evmCallStack_isEmpty;
use evmCallStack::getRetryBufferInCurrentContext;
use evmCallStack::setRetryBufferInCurrentContext;
use evmCallStack::evmCallStack_callRetryableTxAndReturn;
use evmCallStack::evmCallStack_transferEthFromEscrow;
use evmCallStack::evmCallStack_currentTxRequestGasBid;
use evmCallStack::evmCallStack_getAccountStoreInCurrentContext;
use evmCallStack::evmCallStack_setAccountStoreInCurrentContext;

use evmlogs::evmlogs_empty;
use evmlogs::evmlogs_appendAny;

use gasAccounting::txFeeStats_zero;
use gasAccounting::getFeesForRetryableTx;
use gasAccounting::getRetryableTxPrice;
use gasAccounting::feesEnabled;

use inbox::IncomingRequest;
use inbox::inbox_currentTimestamp;
use inbox::mapL1SenderAddress;

use messages::TxRequestData;

use output::emitTxReceipt;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_copy;

use std::queue::Queue;
use std::queue::queue_new;
use std::queue::queue_put;
use std::queue::queue_get;

use std::safeMath::safeAdd;
use std::safeMath::safeMul;

use core::kvs::Kvs;
use core::kvs::builtin_kvsDelete;


// Each RetryableTx is identified by a txId, which is a unique identifier for the transaction it will eventually
//     become.  This is not the same as the requestId of the L1 request that submitted this RetryableTx.  They're
//     different because ArbOS will need to emit a tx receipt for the L1 request and separately for the RetryableTx.
//     The txId used here is hash(submitterRequestId, 0), which is the same formula that would be used if the
//     submission was a batch of one item containing the RetryableTx.

type RetryableTx = struct {
    txId: uint,                   // ticket ID; this will be the tx id of the transaction if it runs successfully
    sender: address,
    destination: address,
    callvalue: uint,
    callvalueEscrowKey: uint,     // key for the escrow box where the callvalue is escrowed
    beneficiary: address,         // party who can cancel the retryable, and who gets the callvalue if cancel/timeout
    calldata: ByteArray,
    expiryTime: uint,             // timestamp when the retryable becomes eligible for removal, if nobody does a keepalive
    l1Message: IncomingRequest,   // deemed incoming message, for use in the tx receipt
    originalSender: address,
};

// RetryQueueItem records the fact that we want to check, at a given time, whether a given RetryableTx has expired.
type RetryQueueItem = struct {
    txId: uint,         // id of item to check
    checkTime: uint,    // when to check for expiration of the item
};

// RetryBuffer holds retryable transactions.
// byTxId holds the active RetryableTx's, indexed by their txId
// fifo holds RetryQueueItems, which direct us to check for expiration of a particular item at a particular time.
//      Invariant: if a RetryableTx with txId is in byTxId, and its expiration time is T, then there is an item in
//                 fifo with txId and checkTime >= T.
//      (There might be more items in fifo beyond those required by the invariant, including items for txId's that
//                 aren't in byTxId, and additional items with different checkTimes for txIds that are in byTxId.)
type RetryBuffer = struct {
    byTxId: map<uint, RetryableTx>,
    fifo: Queue,
    txLifetimeSeconds: uint   // lifetime to assign to any newly added items
};

public view throw func retryBuffer_new() -> RetryBuffer {
    struct {
        byTxId: newmap<uint, RetryableTx>,
        fifo: queue_new(),
        txLifetimeSeconds: chainParams_getOrDie(const::Atom_Param_RetryableTxLifetimeSeconds),
    }
}

public func retryBuffer_getLifetime(rbuf: RetryBuffer) -> uint {
    rbuf.txLifetimeSeconds
}

public func retryBuffer_setLifetime(rbuf: RetryBuffer, newLifetime: uint) -> RetryBuffer {
    set rbuf.txLifetimeSeconds = newLifetime;
    rbuf
}

public view throw func retryBuffer_setDefaultLifetime(rbuf: RetryBuffer) -> RetryBuffer {
    retryBuffer_setLifetime(rbuf, chainParams_getOrDie(const::Atom_Param_RetryableTxLifetimeSeconds))
}

// We trim the buffer when it's modified. This removes aged-out items from the buffer.
// trimTwo will trim up to two entries, and trimOne will trim zero or one entries.
// These are called by externally-callable mutating functions in this file, except init.
// We also trim two items whenever we create or update a new item.
public view write throw func retryBuffer_trimTwo(rbuf: RetryBuffer) -> RetryBuffer {
    // remove up to 2 aged-out items from the retryBuffer
    if let Some(rb) = retryBuffer_trimOne(rbuf) {
        if let Some(rb2) = retryBuffer_trimOne(rb) {
            rb2
        } else {
            rb
        }
    } else {
        rbuf
    }
}

// Trim up to one expired item from rbuf.
// This will discard the item at the head of rbuf.fifo, if that items checkTime is in the past.
//       (It will also discard that item's txId if it is actually expired.)
// Return Some(updatedRbuf) if rbuf was modified, or None otherwise.
view write throw func retryBuffer_trimOne(rbuf: RetryBuffer) -> option<RetryBuffer> {
    let ret = None<RetryBuffer>;
    if let Some(res) = queue_get(rbuf.fifo) {
        let (uq, rawQitem) = res;
        let qitem = unsafecast<RetryQueueItem>(rawQitem);
        let currentTimestamp = inbox_currentTimestamp();
        if qitem.checkTime < currentTimestamp {
            set rbuf.fifo = uq;
            if let Some(rtx) = rbuf.byTxId[qitem.txId] {
                if rtx.expiryTime < currentTimestamp {
                    rbuf = retryBuffer_delete(rbuf, qitem.txId, true)?;
                }
            }
            ret = Some(rbuf);
        }
    }
    ret
}

throw func retryBuffer_insert(rbuf: RetryBuffer, rtx: RetryableTx) -> RetryBuffer {
    let txId = rtx.txId;
    rbuf with {
        byTxId: rbuf.byTxId with { [txId] = rtx }
    } with {
        fifo: queue_put(rbuf.fifo, struct { txId: txId, checkTime: rtx.expiryTime })
    }
}

view throw func retryBuffer_insertNew(
    rbuf: RetryBuffer,
    txId: uint,
    originalSender: address,
    destination: address,
    callvalue: uint,
    callvalueEscrowKey: uint,
    beneficiary: address,
    calldata: ByteArray,
    l1Message: IncomingRequest,
) -> (RetryBuffer, uint) {
    let updatedSender = mapL1SenderAddress(originalSender, Some(destination));
    let newTx = struct {
        txId: uint(hash(bytes32(txId), bytes32(0))),
        sender: updatedSender,
        destination: destination,
        callvalue: callvalue,
        callvalueEscrowKey: callvalueEscrowKey,
        beneficiary: beneficiary,
        calldata: calldata,
        expiryTime: inbox_currentTimestamp() + rbuf.txLifetimeSeconds,
        l1Message: makeFakeIncomingRequest(
           l1Message.arbBlockNumber,
           l1Message.ethBlockNumber,
           l1Message.timestamp,
           updatedSender,
           uint(hash(bytes32(l1Message.requestId), bytes32(0))),
           0,    // maxGas will be filled in when ticket is redeemed
           0,    // gasPrice will be filled in when ticket is redeemed
           destination,
           callvalue,
           calldata,
        ),
        originalSender: originalSender,
    };

    (retryBuffer_insert(rbuf, newTx), newTx.txId)
}

public func retryBuffer_get(rbuf: RetryBuffer, txId: uint) -> option<RetryableTx> {
    rbuf.byTxId[txId]
}

public func retryBuffer_getTxTimeout(rbuf: RetryBuffer, txId: uint) -> uint {
    if let Some(rtx) = retryBuffer_get(rbuf, txId) {
        rtx.expiryTime
    } else {
        0
    }
}

public func retryBuffer_getBeneficiary(rbuf: RetryBuffer, txId: uint) -> option<address> {
    Some( (retryBuffer_get(rbuf, txId)?).beneficiary )
}

// Return the keepalive price for txId.
// If txId exists, this returns Some((price, guaranteeTime)) where the price is guaranteed not to change until at least guaranteeTime.
// If txId does not exist, this returns None.
public throw view write func retryBuffer_getTxKeepalivePrice(rbuf: RetryBuffer, txId: uint) -> option<(uint, uint)>{
    let rtx = retryBuffer_get(rbuf, txId)?;
    Some(getRetryableTxPrice(bytearray_size(rtx.calldata)))
}

// Keep txId alive longer, if it exists.
// Returns Some((updatedRetryBuffer, newExpiryTime)) if success.
// Returns None if txId doesn't exist, or if its expiry is already >= 2 lifetimes in the future.
public view write throw func retryBuffer_keepalive(rbuf: RetryBuffer, txId: uint) -> option<(RetryBuffer, uint)> {
    rbuf = retryBuffer_trimTwo(rbuf);
    let rtx = retryBuffer_get(rbuf, txId)?;
    let newExpiryTime = rtx.expiryTime + rbuf.txLifetimeSeconds;
    if newExpiryTime > inbox_currentTimestamp() + 2 * rbuf.txLifetimeSeconds {
        None
    } else {
        Some((
            retryBuffer_insert(rbuf, rtx with { expiryTime: newExpiryTime }),
            newExpiryTime,
        ))
    }
}

// Try to delete txId from rbuf.  Return updated rbuf, or None if txId didn't exist.
public view write throw func retryBuffer_delete(rbuf: RetryBuffer, txId: uint, withRefund: bool) -> option<RetryBuffer> {
    // don't call retryBuffer_trimTwo here, because this is called by retryBuffer_trimOne, and we don't want to recurse

    if let Some(rtx) = retryBuffer_get(rbuf, txId) {
        // delete the tx
        set rbuf.byTxId = unsafecast<map<uint, RetryableTx> >(
            builtin_kvsDelete(unsafecast<Kvs>(rbuf.byTxId), txId)
        );
        // tx might still be in retryBuffer.fifo, but that doesn't violate the invariant

        if withRefund {
            // credit the escrowed callvalue back to the beneficiary
            if evmCallStack_isEmpty() {
                if let Some(astore) = accountStore_payFromEscrow(
                    evmCallStack_getAccountStoreInCurrentContext(),
                    rtx.callvalueEscrowKey,
                    rtx.beneficiary,
                    rtx.callvalue
                ) {
                    evmCallStack_setAccountStoreInCurrentContext(astore);
                }  // else something went badly wrong and we can't refund the callvalue
            } else {
                // try to refund from the escrow, ignoring errors (which should never happen)
                if evmCallStack_transferEthFromEscrow(rtx.callvalueEscrowKey, rtx.beneficiary, rtx.callvalue) == None<()> {
                    debug(11001);
                }
            }
        }

        Some(rbuf)
    } else {
        None
    }
}

public func retryableTx_getOriginalSender(rtx: RetryableTx) -> address {
    rtx.originalSender
}

// Process a newly submitted retryable.
// This must be called outside of a transaction.
public view write throw func processRetryableTx(req: IncomingRequest) -> option<TxRequestData> {
    // Parse the retryable data from the IncomingRequest.
    let sender = req.sender;
    let destination = address(bytearray_get256(req.msgData, 0));
    let callvalue = bytearray_get256(req.msgData, 32);
    let deposit = bytearray_get256(req.msgData, 2*32);
    let maxSubmissionCost = bytearray_get256(req.msgData, 3*32);
    let creditBack = address(bytearray_get256(req.msgData, 4*32));
    let beneficiary = address(bytearray_get256(req.msgData, 5*32));
    let maxGasForImmediate = bytearray_get256(req.msgData, 6*32);
    let gasPriceForImmediate = bytearray_get256(req.msgData, 7*32);
    let calldataSize = bytearray_get256(req.msgData, 8*32);
    let calldata = bytearray_extract(req.msgData, 9*32, calldataSize);

    if creditBack == address(0) { creditBack = sender; }

    let originalSender = sender;
    sender = mapL1SenderAddress(sender, Some(destination));
    req = req with { sender: sender };

    // We double fetch the global account store as retrybuffer_trimTwo modifies it via retrybuffer_delete
    let newRetryBuffer = retryBuffer_trimTwo(safeGetGlobalAccountStore().retryBuffer);
    let acctStore = safeGetGlobalAccountStore();
    set acctStore.retryBuffer = newRetryBuffer;

    // deposited funds from L1 go into the sender's account
    if deposit > 0 {
        acctStore = accountStore_set(
            acctStore,
            sender,
            account_addToEthBalance(accountStore_get(acctStore, sender), deposit)
        );
    }

    // charge for injecting this message
    let (submissionFee, subFeeRecipient, feeStats) = getFeesForRetryableTx(calldataSize);

    let ret = if submissionFee <= maxSubmissionCost {
        let totalDue = safeAdd(callvalue, maxSubmissionCost);

        if let Some(res) = accountStore_newEscrow(acctStore, sender, totalDue) {
            let (*acctStore, escrowKey) = res;

            // We took maxSubmissionCost + callvalue from the sender.
            // We will distribute those funds as follows:
            //       submissionFee to the subFeeRecipient
            //       maxSubmissionCost-submissionFee to the creditBack address
            //       callvalue to the retryableTx we will create

            if submissionFee > 0 {
                acctStore = accountStore_payFromEscrow(acctStore, escrowKey, subFeeRecipient, submissionFee)?;
            }

            if submissionFee < maxSubmissionCost {
                acctStore = accountStore_payFromEscrow(acctStore, escrowKey, creditBack, maxSubmissionCost - submissionFee)?;
            }

            // Create a new retryable tx, holding the callvalue
            let (rbuf, txId) = retryBuffer_insertNew(
                accountStore_getRetryBuffer(acctStore),
                req.requestId,
                originalSender,
                destination,
                callvalue,
                escrowKey,
                beneficiary,
                calldata,
                req
            );
            acctStore = accountStore_setRetryBuffer(acctStore, rbuf);

            // Emit a success receipt for the submission of the retryable.
            let logs = evmlogs_appendAny(
               evmlogs_empty(),
               (
                   const::Address_ArbRetryableTx,
                   (0, newbuffer()),
                   const::eventTopic_ArbRetryableTx_TicketCreated,
                   txId,
               ),
            );
            emitTxReceipt(
                req,
                const::TxResultCode_success,
                Some(bytearray_set256(bytearray_new(0), 0, txId)),
                Some(logs),
                None,
                feeStats,
                true,
                originalSender,
            );

            if (maxGasForImmediate > 0) && ( (gasPriceForImmediate > 0) || !feesEnabled()) {
                if let Some(rtx) =  retryBuffer_get(accountStore_getRetryBuffer(acctStore), txId) {
                    let tryAutoRedeem = if let Some(uaStore) = accountStore_transferEthBalance(
                        acctStore,
                        sender,
                        creditBack,
                        safeMul(maxGasForImmediate, gasPriceForImmediate),
                    ) {
                        acctStore = uaStore;
                        true
                    } else {
                        false
                    };

                    let immediateCalldata = bytearray_new(0);
                    immediateCalldata = bytearray_set256(
                        immediateCalldata,
                        0,
                        const::funcCode_ArbRetryableTx_redeem << (256-32),
                    );
                    immediateCalldata = bytearray_set256(immediateCalldata, 4, txId);

                    let requestId = uint(hash(bytes32(req.requestId), bytes32(1)));
                    let autoRedeemIncoming = makeFakeIncomingRequest(
                        req.arbBlockNumber,
                        req.ethBlockNumber,
                        req.timestamp,
                        sender,
                        requestId,
                        maxGasForImmediate,
                        gasPriceForImmediate,
                        address(const::Address_ArbRetryableTx),
                        0,
                        immediateCalldata,
                    );
                    let autoRedeemRequest = struct {
                        maxGas: maxGasForImmediate,
                        gasPrice: gasPriceForImmediate,
                        seqNum: None,
                        caller: sender,
                        calleeAddr: address(const::Address_ArbRetryableTx),
                        gasPayer: creditBack,
                        value: 0,
                        calldata: immediateCalldata,
                        nonMutating: false,
                        isConstructor: false,
                        incomingRequest: autoRedeemIncoming,
                        feeStats: txFeeStats_zero(),
                        fromRetryable: Some(rtx),
                        originalCaller: originalSender,
                    };

                    if tryAutoRedeem {
                        Some(autoRedeemRequest)
                    } else {
                        emitTxReceipt(
                            autoRedeemIncoming,
                            const::TxResultCode_noGasForAutoRedeem,
                            None,
                            None,
                            None,
                            txFeeStats_zero(),
                            false,
                            originalSender,
                        );
                        None
                    }
                } else {
                    None
                }
            } else {
                None
            }
        } else {
            emitTxReceipt(
                req,
                const::TxResultCode_insufficientBalance,
                None,
                None,
                None,
                feeStats,
                true,
                originalSender,
            );
            None
        }
    } else {
        // submission cost was higher than the maximum allowed by the request
        emitTxReceipt(
            req,
            const::TxResultCode_insufficientGasFunds,
            None,
            None,
            None,
            feeStats,
            true,
            originalSender,
        );
        None
    };

    safeSetGlobalAccountStore(acctStore);

    ret
}

// Make a fake incomingRequest, which will form part of the tx receipt for an unusual tx.
// The receipt is as if the specified tx arrives as an L2 message containing a single unsigned contract tx.
throw func makeFakeIncomingRequest(
    arbBlockNumber: uint,
    ethBlockNumber: uint,
    timestamp: uint,
    sender: address,
    requestId: uint,
    maxGas: uint,
    gasPrice: uint,
    calleeAddr: address,
    callvalue: uint,
    calldata: ByteArray,
) -> IncomingRequest {
    struct {
        kind: const::L1MessageType_L2,
        arbBlockNumber: arbBlockNumber,
        ethBlockNumber: ethBlockNumber,
        timestamp: timestamp,
        sender: sender,
        requestId: requestId,
        msgData: bytearray_copy(
            calldata,
            0,
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(
                        bytearray_set256(
                            bytearray_setByte(
                                bytearray_new(0),
                                0,
                                const::L2MessageType_unsignedContractTx,
                            ),
                            1,
                            maxGas,
                        ),
                        1+32,
                        gasPrice,
                    ),
                    1+2*32,
                    uint(calleeAddr),
                ),
                1+3*32,
                callvalue,
            ),
            1+4*32,
            bytearray_size(calldata),
        ),
        provenance: struct {
            l1SeqNum: requestId,
            parentRequestId: 0,
            indexInParent: ~0,
        },
        aggregator: Some(struct {
            aggregator: None,
            calldataUnits: 0,
        }),
        adminMode: false,
        gasEstimationParams: None,
    }
}

// Modify the gas-related parameters in an already existing fake incoming request.
throw func adjustGasInfoInFakeIncomingRequest(req: IncomingRequest, maxGas: uint, gasPrice: uint) -> IncomingRequest {
    req with {
        msgData: bytearray_set256(
            bytearray_set256(
                req.msgData,
                1,
                maxGas,
            ),
            1+32,
            gasPrice,
        )
    }
}

// Redeem a retrayble, while executing an "outer" transaction.
// Returns (success, returndata) for the "inner" retryable
public view write throw func redeemRetryableTxInTx(txToRedeem: uint) -> (bool, ByteArray) {
    let rbuf = retryBuffer_trimTwo(getRetryBufferInCurrentContext());
    if let Some(rtx) = retryBuffer_get(rbuf, txToRedeem) {
        if let Some(rb) = retryBuffer_delete(rbuf, txToRedeem, false) {
            // we just deleted the retryable, without a credit-back to the beneficiary
            // note that the AccountStore where we recorded the delete will be discarded if the tx reverts,
            //       so if the tx reverts the retryable will still exist
            setRetryBufferInCurrentContext(rb);
            evmCallStack_callRetryableTxAndReturn(
                rtx with {
                    l1Message: adjustGasInfoInFakeIncomingRequest(
                        rtx.l1Message,
                        63 * (getGas()) / (64 * chainParams_getOrDie(const::Atom_Param_AvmGasPerArbGas)),  // inner tx will get approximately this much gas
                        evmCallStack_currentTxRequestGasBid(),
                    )
                }
            )
        } else {
            setRetryBufferInCurrentContext(rbuf);
            (false, bytearray_new(0))
        }
    } else {
        setRetryBufferInCurrentContext(rbuf);
        (false, bytearray_new(0))
    }
}
