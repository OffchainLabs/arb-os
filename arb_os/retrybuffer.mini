//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_set;
use accounts::accountStore_getRetryBuffer;
use accounts::accountStore_setRetryBuffer;
use accounts::accountStore_transferEthBalance;
use accounts::accountStore_newEscrow;
use accounts::accountStore_payFromEscrow;
use accounts::account_getBalance;
use accounts::account_addToEthBalance;

use chainParameters::chainParams_getOrDie;

use evmCallStack::evmCallStack_isEmpty;
use evmCallStack::evmCallStack_getAccountInCurrentContext;
use evmCallStack::evmCallStack_setAccountInCurrentContext;
use evmCallStack::getRetryBufferInCurrentContext;
use evmCallStack::setRetryBufferInCurrentContext;
use evmCallStack::evmCallStack_callRetryableTxAndReturn;
use evmCallStack::evmCallStack_transferEthFromEscrow;
use evmCallStack::evmCallStack_currentTxRequestGasBid;

use evmlogs::EvmLogs;
use evmlogs::evmlogs_empty;
use evmlogs::evmlogs_appendAny;

use gasAccounting::GasUsage;
use gasAccounting::txFeeStats_zero;
use gasAccounting::getFeesForRetryableTx;
use gasAccounting::getRetryableTxPrice;
use gasAccounting::txFeeStats_zero;
use gasAccounting::getArbGasPrice;
use gasAccounting::getCurrentBlockGasLimit;
use gasAccounting::txFeeStats_zero;

use inbox::IncomingRequest;
use inbox::GasEstimationParams;
use inbox::inbox_currentTimestamp;

use messages::TxRequestData;

use output::emitTxReceipt;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_copy;

use std::keccak::keccak256;

use std::queue::Queue;
use std::queue::queue_new;
use std::queue::queue_put;
use std::queue::queue_get;

use core::kvs::Kvs;
use core::kvs::builtin_kvsDelete;


// Each RetryableTx is identified by a txId, which is a unique identifier for the transaction it will eventually
//     become.  This is not the same as the requestId of the L1 request that submitted this RetryableTx.  They're
//     different because ArbOS will need to emit a tx receipt for the L1 request and separately for the RetryableTx.
//     The txId used here is hash(submitterRequestId, 0), which is the same formula that would be used if the
//     submission was a batch of one item containing the RetryableTx.

type RetryableTx = struct {
    txId: uint,
    sender: address,
    destination: address,
    callvalue: uint,
    callvalueEscrowKey: uint,
    beneficiary: address,
    calldata: ByteArray,
    expiryTime: uint,
    l1Message: IncomingRequest,
}

type RetryQueueItem = struct {
    txId: uint,         // id of item to check
    checkTime: uint,    // when to check for expiration of the item
}

// RetryBuffer holds retryable transactions.
// byTxId holds all active RetryableTx's, indexed by their txId
// fifo holds RetryQueueItems, which direct us to check for expiration of a particular item at a particular time.
// Every time an RetryableTx's lifetime is renewed, a fresh fifo item is created,
//          with checkTime equal to the RetryableTx's new expiry time.
type RetryBuffer = struct {
    byTxId: map<uint, RetryableTx>,
    fifo: Queue,     // not in strict expirationTime order, but this doesn't affect correctness
    txLifetimeSeconds: uint
}

public impure func retryBuffer_new() -> RetryBuffer {
    return struct {
        byTxId: newmap<uint, RetryableTx>,
        fifo: queue_new(),
        txLifetimeSeconds: chainParams_getOrDie(const::Atom_Param_RetryableTxLifetimeSeconds),
    };
}

public func retryBuffer_getLifetime(rbuf: RetryBuffer) -> uint {
    return rbuf.txLifetimeSeconds;
}

public func retryBuffer_setLifetime(rbuf: RetryBuffer, newLifetime: uint) -> RetryBuffer {
    return rbuf with { txLifetimeSeconds: newLifetime };
}

public impure func retryBuffer_setDefaultLifetime(rbuf: RetryBuffer) -> RetryBuffer {
    return retryBuffer_setLifetime(rbuf, chainParams_getOrDie(const::Atom_Param_RetryableTxLifetimeSeconds));
}

// We trim the buffer when it's modified. This removes aged-out items from the buffer.
// trimTwo will trim up to two entries, and trimOne will trim zero or one entries.
// These are called by every externally-callable mutating function in this file, except init.
// We also trim two items whenever we create or update a new item.
public impure func retryBuffer_trimTwo(rbuf: RetryBuffer) -> RetryBuffer {
    // remove up to 2 aged-out items from the retryBuffer
    return xif let Some(rb) = retryBuffer_trimOne(rbuf) {
        xif let Some(rb2) = retryBuffer_trimOne(rb) {
            rb2
        } else {
            rb
        }
    } else {
        rbuf
    };
}

impure func retryBuffer_trimOne(rbuf: RetryBuffer) -> option<RetryBuffer> {  // returns true iff a tx was trimmed
    let rb = None<RetryBuffer>;
    if let Some(res) = queue_get(rbuf.fifo) {
        let (uq, rawQitem) = res;
        let qitem = unsafecast<RetryQueueItem>(rawQitem);
        let currentTimestamp = inbox_currentTimestamp();
        if (qitem.checkTime < currentTimestamp) {
            if let Some(rtx) = rbuf.byTxId[qitem.txId] {
                if (rtx.expiryTime < currentTimestamp) {
                    rbuf = retryBuffer_delete(rbuf, qitem.txId, true)?;
                }
                rbuf = rbuf with {  fifo: uq };
                rb = Some(rbuf);
            }
        }
    }
    return rb;
}

func retryBuffer_insert(rbuf: RetryBuffer, rtx: RetryableTx) -> RetryBuffer {
    let txId = rtx.txId;
    return rbuf with {
        byTxId: rbuf.byTxId with { [txId] = rtx }
    } with {
        fifo: queue_put(rbuf.fifo, struct { txId: txId, checkTime: rtx.expiryTime })
    };
}

impure func retryBuffer_insertNew(
    rbuf: RetryBuffer,
    txId: uint,
    sender: address,
    destination: address,
    callvalue: uint,
    callvalueEscrowKey: uint,
    beneficiary: address,
    calldata: ByteArray,
    l1Message: IncomingRequest,
) -> (RetryBuffer, uint) {
    let newTx = struct {
        txId: uint(hash(bytes32(txId), bytes32(0))),
        sender: sender,
        destination: destination,
        callvalue: callvalue,
        callvalueEscrowKey: callvalueEscrowKey,
        beneficiary: beneficiary,
        calldata: calldata,
        expiryTime: inbox_currentTimestamp() + rbuf.txLifetimeSeconds,
        l1Message: makeFakeIncomingRequest(
           l1Message.arbBlockNumber,
           l1Message.ethBlockNumber,
           l1Message.timestamp,
           sender,
           uint(hash(bytes32(l1Message.requestId), bytes32(0))),
           0,    // maxGas will be filled in when ticket is redeemed
           0,    // gasPrice will be filled in when ticket is redeemed
           destination,
           callvalue,
           calldata,
        ),
    };

    return (retryBuffer_insert(rbuf, newTx), newTx.txId);
}

public func retryBuffer_get(rbuf: RetryBuffer, txId: uint) -> option<RetryableTx> {
    return rbuf.byTxId[txId];
}

public func retryBuffer_getTxTimeout(rbuf: RetryBuffer, txId: uint) -> uint {
    return xif let Some(rtx) = retryBuffer_get(rbuf, txId) {
        rtx.expiryTime
    } else {
        0
    };
}

public func retryBuffer_getBeneficiary(rbuf: RetryBuffer, txId: uint) -> option<address> {
    return Some( (retryBuffer_get(rbuf, txId)?).beneficiary );
}

public func retryBuffer_getLifetime(rbuf: RetryBuffer) -> uint {
    return rbuf.txLifetimeSeconds;
}

public impure func retryBuffer_getTxKeepalivePrice(rbuf: RetryBuffer, txId: uint) -> option<(uint, uint)>{
    let rtx = retryBuffer_get(rbuf, txId)?;
    return Some(getRetryableTxPrice(bytearray_size(rtx.calldata)));
}

public impure func retryBuffer_keepalive(rbuf: RetryBuffer, txId: uint) -> option<(RetryBuffer, uint)> {
    rbuf = retryBuffer_trimTwo(rbuf);
    let rtx = retryBuffer_get(rbuf, txId)?;
    let newExpiryTime = rtx.expiryTime + rbuf.txLifetimeSeconds;
    return xif (newExpiryTime > inbox_currentTimestamp() + 2 * rbuf.txLifetimeSeconds) {
        None<(RetryBuffer, uint)>
    } else {
        Some((
            retryBuffer_insert(rbuf, rtx with { expiryTime: newExpiryTime }),
            newExpiryTime,
        ))
    };
}

public impure func retryBuffer_delete(rbuf: RetryBuffer, txId: uint, withRefund: bool) -> option<RetryBuffer> {
    // don't call retryBuffer_trimTwo here, because this is called by retryBuffer_trimOne, and we don't want to recurse

    return xif let Some(rtx) = retryBuffer_get(rbuf, txId) {
        // delete the tx
        rbuf = rbuf with {
            byTxId: unsafecast<map<uint, RetryableTx>>(
                builtin_kvsDelete(unsafecast<Kvs>(rbuf.byTxId), txId)
            )
        };
        // tx might still be in retryBuffer.fifo, but that isn't a problem because it's not gettable
        //         and attempts to delete it again will be no-ops

        if (withRefund) {
            // credit the escrowed callvalue back to the beneficiary
            if (evmCallStack_isEmpty()) {
                if let Some(astore) = accountStore_payFromEscrow(
                    getGlobalAccountStore(),
                    rtx.callvalueEscrowKey,
                    rtx.beneficiary,
                    rtx.callvalue
                ) {
                    setGlobalAccountStore(astore);
                }  // else something went badly wrong and we can't refund the callvalue
            } else {
                // try to refund from the escrow, ignoring errors (which should never happen)
                let _ = evmCallStack_transferEthFromEscrow(rtx.callvalueEscrowKey, rtx.beneficiary, rtx.callvalue);
            }
        }

        Some(rbuf)
    } else {
        None<RetryBuffer>
    };
}

public impure func processRetryableTx(req: IncomingRequest) -> option<TxRequestData> {
    // This must be called outside of a transaction.

    let sender = req.sender;
    let destination = address(bytearray_get256(req.msgData, 0));
    let callvalue = bytearray_get256(req.msgData, 32);
    let deposit = bytearray_get256(req.msgData, 2*32);
    let maxSubmissionCost = bytearray_get256(req.msgData, 3*32);
    let creditBack = address(bytearray_get256(req.msgData, 4*32));
    let beneficiary = address(bytearray_get256(req.msgData, 5*32));
    let maxGasForImmediate = bytearray_get256(req.msgData, 6*32);
    let gasPriceForImmediate = bytearray_get256(req.msgData, 7*32);
    let calldataSize = bytearray_get256(req.msgData, 8*32);
    let calldata = bytearray_extract(req.msgData, 9*32, calldataSize);

    if (creditBack == address(0)) { creditBack = sender; }

    let rbuffer = retryBuffer_trimTwo(getGlobalAccountStore().retryBuffer);
    let acctStore = getGlobalAccountStore() with { retryBuffer: rbuffer };

    // deposited funds from L1 go into the sender's account
    if (deposit > 0) {
        acctStore = accountStore_set(
            acctStore,
            sender,
            account_addToEthBalance(accountStore_get(acctStore, sender), deposit)
        );
    }

    // charge for injecting this message
    let (submissionFee, subFeeRecipient, feeStats) = getFeesForRetryableTx(calldataSize);

    let ret = xif (submissionFee <= maxSubmissionCost) {
        let totalDue = callvalue + maxSubmissionCost;

        xif let Some(res) = accountStore_newEscrow(acctStore, sender, totalDue) {
            let (uAcctStore, escrowKey) = res;
            acctStore = uAcctStore;

            // We took maxSubmissionCost + callvalue from the sender.
            // We will distribute those funds as follows:
            //       submissionFee to the subFeeRecipient
            //       maxSubmissionCost-submissionFee to the creditBack address
            //       callvalue to the retryableTx we will create

            if (submissionFee > 0) {
                acctStore = accountStore_payFromEscrow(acctStore, escrowKey, subFeeRecipient, submissionFee)?;
            }

            if (submissionFee < maxSubmissionCost) {
                acctStore = accountStore_payFromEscrow(acctStore, escrowKey, creditBack, maxSubmissionCost - submissionFee)?;
            }

            // Create a new retryable tx, holding the callvalue
            let (rbuf, txId) = retryBuffer_insertNew(
                accountStore_getRetryBuffer(acctStore),
                req.requestId,
                sender,
                destination,
                callvalue,
                escrowKey,
                beneficiary,
                calldata,
                req
            );
            acctStore = accountStore_setRetryBuffer(acctStore, rbuf);

            let logs = evmlogs_appendAny(
               evmlogs_empty(),
               (
                   const::Address_ArbRetryableTx,
                   (0, newbuffer()),
                   const::eventTopic_ArbRetryableTx_TicketCreated,
                   txId,
               ),
           );
            emitTxReceipt(
                req,
                const::TxResultCode_success,
                Some(bytearray_set256(bytearray_new(0), 0, txId)),
                Some(logs),
                None<GasUsage>,
                feeStats,
                true,
            );

            xif (    (maxGasForImmediate > 0)
                  && (gasPriceForImmediate > 0)
                  && (maxGasForImmediate*gasPriceForImmediate >= gasPriceForImmediate)) { // the last check avoids overflow
                xif let Some(rtx) =  retryBuffer_get(accountStore_getRetryBuffer(acctStore), txId) {
                    let tryAutoRedeem = xif let Some(uaStore) = accountStore_transferEthBalance(
                        acctStore,
                        sender,
                        creditBack,
                        maxGasForImmediate * gasPriceForImmediate,
                    ) {
                        acctStore = uaStore;
                        true
                    } else {
                        false
                    };

                    let immediateCalldata = bytearray_new(0);
                    immediateCalldata = bytearray_set256(
                        immediateCalldata,
                        0,
                        asm(256-32, const::funcCode_ArbRetryableTx_redeem) uint { shl },
                    );
                    immediateCalldata = bytearray_set256(immediateCalldata, 4, txId);

                    let requestId = uint(hash(bytes32(req.requestId), bytes32(1)));
                    let autoRedeemIncoming = makeFakeIncomingRequest(
                        req.arbBlockNumber,
                        req.ethBlockNumber,
                        req.timestamp,
                        sender,
                        requestId,
                        maxGasForImmediate,
                        gasPriceForImmediate,
                        address(const::Address_ArbRetryableTx),
                        0,
                        immediateCalldata,
                    );
                    let autoRedeemRequest = struct {
                        maxGas: maxGasForImmediate,
                        gasPrice: gasPriceForImmediate,
                        seqNum: None<uint>,
                        caller: sender,
                        calleeAddr: address(const::Address_ArbRetryableTx),
                        gasPayer: creditBack,
                        value: 0,
                        calldata: immediateCalldata,
                        nonMutating: false,
                        isConstructor: false,
                        incomingRequest: autoRedeemIncoming,
                        feeStats: txFeeStats_zero(),
                        fromRetryable: Some(rtx),
                    };

                    xif (tryAutoRedeem) {
                        Some(autoRedeemRequest)
                    } else {
                        emitTxReceipt(
                            autoRedeemIncoming,
                            const::TxResultCode_noGasForAutoRedeem,
                            None<ByteArray>,
                            None<EvmLogs>,
                            None<GasUsage>,
                            txFeeStats_zero(),
                            false,
                        );
                        None<TxRequestData>
                    }
                } else {
                    None<TxRequestData>
                }
            } else {
                None<TxRequestData>
            }
        } else {
            emitTxReceipt(
                req,
                const::TxResultCode_insufficientBalance,
                None<ByteArray>,
                None<EvmLogs>,
                None<GasUsage>,
                feeStats,
                true,
            );
            None<TxRequestData>
        }
    } else {
        // submission cost was higher than the maximum allowed by the request
        emitTxReceipt(
            req,
            const::TxResultCode_noGasFunds,
            None<ByteArray>,
            None<EvmLogs>,
            None<GasUsage>,
            feeStats,
            true,
        );
        None<TxRequestData>
    };

    setGlobalAccountStore(acctStore);

    return ret;
}

func makeFakeIncomingRequest(
    arbBlockNumber: uint,
    ethBlockNumber: uint,
    timestamp: uint,
    sender: address,
    requestId: uint,
    maxGas: uint,
    gasPrice: uint,
    calleeAddr: address,
    callvalue: uint,
    calldata: ByteArray,
) -> IncomingRequest {
    return struct {
        kind: const::L1MessageType_L2,
        arbBlockNumber: arbBlockNumber,
        ethBlockNumber: ethBlockNumber,
        timestamp: timestamp,
        sender: sender,
        requestId: requestId,
        msgData: bytearray_copy(
            calldata,
            0,
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(
                        bytearray_set256(
                            bytearray_setByte(
                                bytearray_new(0),
                                0,
                                const::L2MessageType_unsignedContractTx,
                            ),
                            1,
                            maxGas,
                        ),
                        1+32,
                        gasPrice,
                    ),
                    1+2*32,
                    uint(calleeAddr),
                ),
                1+3*32,
                callvalue,
            ),
            1+4*32,
            bytearray_size(calldata),
        ),
        provenance: struct {
            l1SeqNum: requestId,
            parentRequestId: 0,
            indexInParent: ~0,
        },
        aggregator: Some(struct {
            aggregator: None<address>,
            calldataUnits: 0,
        }),
        adminMode: false,
        gasEstimationParams: None<GasEstimationParams>,
    };
}

func adjustGasInfoInFakeIncomingRequest(req: IncomingRequest, maxGas: uint, gasPrice: uint) -> IncomingRequest {
    return req with {
        msgData: bytearray_set256(
            bytearray_set256(
                req.msgData,
                1,
                maxGas,
            ),
            1+32,
            gasPrice,
        )
    };
}

public impure func redeemRetryableTxInTx(txToRedeem: uint) -> (bool, ByteArray) {
    let rbuf = retryBuffer_trimTwo(getRetryBufferInCurrentContext());
    return xif let Some(rtx) = retryBuffer_get(rbuf, txToRedeem) {
        xif let Some(rb) = retryBuffer_delete(rbuf, txToRedeem, false) {
            // we just deleted the tx, without a credit-back to the beneficiary
            // note that this delete will be discarded if the tx reverts
            setRetryBufferInCurrentContext(rb);
            evmCallStack_callRetryableTxAndReturn(
                rtx with {
                    l1Message: adjustGasInfoInFakeIncomingRequest(
                        rtx.l1Message,
                        63 * (asm() uint { getgas }) / (64 * chainParams_getOrDie(const::Atom_Param_ArbGasPerAvmGas)),  // inner tx will get approximately this much gas
                        evmCallStack_currentTxRequestGasBid(),
                    )
                }
            )
        } else {
            setRetryBufferInCurrentContext(rbuf);
            (false, bytearray_new(0))
        }
    } else {
        setRetryBufferInCurrentContext(rbuf);
        (false, bytearray_new(0))
    };
}
