//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_set;
use accounts::accountStore_getRetryBuffer;
use accounts::accountStore_setRetryBuffer;
use accounts::accountStore_transferEthBalance;
use accounts::account_addToEthBalance;
use accounts::account_deductFromEthBalance;

use evmCallStack::evmCallStack_getAccountInCurrentContext;
use evmCallStack::evmCallStack_setAccountInCurrentContext;
use evmCallStack::getRetryBufferInCurrentContext;
use evmCallStack::setRetryBufferInCurrentContext;
use evmCallStack::evmCallStack_callRetryableTxAndReturn;

use evmlogs::EvmLogs;

use gasAccounting::GasUsage;
use gasAccounting::txFeeStats_zero;
use gasAccounting::getFeesForRetryableTx;
use gasAccounting::getRetryableTxPrice;
use gasAccounting::txFeeStats_zero;

use inbox::IncomingRequest;
use inbox::inbox_currentTimestamp;

use messages::TxRequestData;

use output::emitTxReceipt;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;

use std::keccak::keccak256;

use std::queue::Queue;
use std::queue::queue_new;
use std::queue::queue_put;
use std::queue::queue_get;

use core::kvs::Kvs;
use core::kvs::builtin_kvsDelete;


// Each RetryableTx is identified by a txId, which is a unique identifier for the transaction it will eventually
//     become.  This is not the same as the requestId of the L1 request that submitted this RetryableTx.  They're
//     different because ArbOS will need to emit a tx receipt for the L1 request and separately for the RetryableTx.
//     The txId used here is hash(submitterRequestId, 0), which is the same formula that would be used if the
//     submission was a batch of one item containing the RetryableTx.

type RetryableTx = struct {
    txId: uint,
    sender: address,
    destination: address,
    callvalue: uint,
    beneficiary: address,
    calldata: ByteArray,
    expiryTime: uint,
    l1Message: IncomingRequest,
}

type RetryQueueItem = struct {
    txId: uint,         // id of item to check
    checkTime: uint,    // when to check for expiration of the item
}

// RetryBuffer holds retryable transactions.
// byTxId holds all active RetryableTx's, indexed by their txId
// fifo holds RetryQueueItems, which direct us to check for expiration of a particular item at a particular time.
// Every time an RetryableTx's lifetime is renewed, a fresh fifo item is created,
//          with checkTime equal to the RetryableTx's new expiry time.
type RetryBuffer = struct {
    byTxId: map<uint, RetryableTx>,
    fifo: Queue,     // not in strict expirationTime order, but this doesn't affect correctness
    txLifetimeSeconds: uint
}

public func retryBuffer_new() -> RetryBuffer {
    return struct {
        byTxId: newmap<uint, RetryableTx>,
        fifo: queue_new(),
        txLifetimeSeconds: const::RetryBuffer_DefaultLifetimeSeconds,
    };
}

public func retryBuffer_getLifetime(rbuf: RetryBuffer) -> uint {
    return rbuf.txLifetimeSeconds;
}

// We trim the buffer when it's modified. This removes aged-out items from the buffer.
// trimTwo will trim up to two entries, and trimOne will trim zero or one entries.
// These are called by every externally-callable mutating function in this file, except init.
// We also trim two items whenever we create or update a new item.
public impure func retryBuffer_trimTwo(rbuf: RetryBuffer) -> RetryBuffer {
    // remove up to 2 aged-out items from the retryBuffer
    return xif let Some(rb) = retryBuffer_trimOne(rbuf) {
        xif let Some(rb2) = retryBuffer_trimOne(rb) {
            rb2
        } else {
            rb
        }
    } else {
        rbuf
    };
}

impure func retryBuffer_trimOne(rbuf: RetryBuffer) -> option<RetryBuffer> {  // returns true iff a tx was trimmed
    let rb = None<RetryBuffer>;
    if let Some(res) = queue_get(rbuf.fifo) {
        let (uq, rawQitem) = res;
        let qitem = unsafecast<RetryQueueItem>(rawQitem);
        let currentTimestamp = inbox_currentTimestamp();
        if (qitem.checkTime < currentTimestamp) {
            if let Some(rtx) = rbuf.byTxId[qitem.txId] {
                if (rtx.expiryTime < currentTimestamp) {
                    rbuf = retryBuffer_delete(rbuf, qitem.txId, true)?;
                }
                rbuf = rbuf with {  fifo: uq };
                rb = Some(rbuf);
            }
        }
    }
    return rb;
}

func retryBuffer_insert(rbuf: RetryBuffer, rtx: RetryableTx) -> RetryBuffer {
    let txId = rtx.txId;
    return rbuf with {
        byTxId: rbuf.byTxId with { [txId] = rtx }
    } with {
        fifo: queue_put(rbuf.fifo, struct { txId: txId, checkTime: rtx.expiryTime })
    };
}

impure func retryBuffer_insertNew(
    rbuf: RetryBuffer,
    txId: uint,
    sender: address,
    destination: address,
    callvalue: uint,
    beneficiary: address,
    calldata: ByteArray,
    l1Message: IncomingRequest,
) -> (RetryBuffer, uint) {
    let newTx = struct {
        txId: uint(hash(bytes32(txId), bytes32(0))),
        sender: sender,
        destination: destination,
        callvalue: callvalue,
        beneficiary: beneficiary,
        calldata: calldata,
        expiryTime: inbox_currentTimestamp() + rbuf.txLifetimeSeconds,
        l1Message: l1Message with { requestId: uint(hash(bytes32(l1Message.requestId), bytes32(0))) },
    };

    return (retryBuffer_insert(rbuf, newTx), newTx.txId);
}

public func retryBuffer_get(rbuf: RetryBuffer, txId: uint) -> option<RetryableTx> {
    return rbuf.byTxId[txId];
}

public func retryBuffer_getTxTimeout(rbuf: RetryBuffer, txId: uint) -> uint {
    return xif let Some(rtx) = retryBuffer_get(rbuf, txId) {
        rtx.expiryTime
    } else {
        0
    };
}

public func retryBuffer_getBeneficiary(rbuf: RetryBuffer, txId: uint) -> option<address> {
    return Some( (retryBuffer_get(rbuf, txId)?).beneficiary );
}

public func retryBuffer_getLifetime(rbuf: RetryBuffer) -> uint {
    return rbuf.txLifetimeSeconds;
}

public impure func retryBuffer_getTxKeepalivePrice(rbuf: RetryBuffer, txId: uint) -> option<(uint, uint)>{
    let rtx = retryBuffer_get(rbuf, txId)?;
    return Some(getRetryableTxPrice(bytearray_size(rtx.calldata)));
}

public impure func retryBuffer_keepalive(rbuf: RetryBuffer, txId: uint) -> option<(RetryBuffer, uint)> {
    rbuf = retryBuffer_trimTwo(rbuf);
    let rtx = retryBuffer_get(rbuf, txId)?;
    let newExpiryTime = rtx.expiryTime + rbuf.txLifetimeSeconds;
    return xif (newExpiryTime > inbox_currentTimestamp() + 2 * rbuf.txLifetimeSeconds) {
        None<(RetryBuffer, uint)>
    } else {
        Some((
            retryBuffer_insert(rbuf, rtx with { expiryTime: newExpiryTime }),
            newExpiryTime,
        ))
    };
}

public impure func retryBuffer_delete(rbuf: RetryBuffer, txId: uint, withRefund: bool) -> option<RetryBuffer> {
    // don't call retryBuffer_trimTwo here, because this is called by retryBuffer_trimOne, and we don't want to recurse

    return xif let Some(rtx) = retryBuffer_get(rbuf, txId) {
        // delete the tx
        rbuf = rbuf with {
            byTxId: unsafecast<map<uint, RetryableTx>>(
                builtin_kvsDelete(unsafecast<Kvs>(rbuf.byTxId), txId)
            )
        };
        // tx might still be in retryBuffer.fifo, but that isn't a problem because it's not gettable
        //         and attempts to delete it again will be no-ops

        if (withRefund) {
            // credit the callvalue back to the beneficiary
            evmCallStack_setAccountInCurrentContext(
                rtx.beneficiary,
                account_addToEthBalance(
                    evmCallStack_getAccountInCurrentContext(rtx.beneficiary),
                    rtx.callvalue,
                )
            );
        }

        Some(rbuf)
    } else {
        None<RetryBuffer>
    };
}

public impure func processRetryableTx(req: IncomingRequest) -> option<TxRequestData> {
    // This must be called outside of a transaction.

    let sender = req.sender;
    let destination = address(bytearray_get256(req.msgData, 0));
    let callvalue = bytearray_get256(req.msgData, 32);
    let deposit = bytearray_get256(req.msgData, 2*32);
    let maxSubmissionCost = bytearray_get256(req.msgData, 3*32);
    let creditBack = address(bytearray_get256(req.msgData, 4*32));
    let beneficiary = address(bytearray_get256(req.msgData, 5*32));
    let maxGasForImmediate = bytearray_get256(req.msgData, 6*32);
    let gasPriceForImmediate = bytearray_get256(req.msgData, 7*32);
    let calldataSize = bytearray_get256(req.msgData, 8*32);
    let calldata = bytearray_extract(req.msgData, 9*32, calldataSize);

    if (creditBack == address(0)) { creditBack = sender; }

    let rbuffer = retryBuffer_trimTwo(getGlobalAccountStore().retryBuffer);
    let acctStore = getGlobalAccountStore() with { retryBuffer: rbuffer };

    // deposited funds go into the sender's account
    if (deposit > 0) {
        acctStore = accountStore_set(
            acctStore,
            sender,
            account_addToEthBalance(accountStore_get(acctStore, sender), deposit)
        );
    }

    // charge for injecting this message
    let (submissionFee, subFeeRecipient, feeStats) = getFeesForRetryableTx(sender, calldataSize);

    let ret = xif (submissionFee <= maxSubmissionCost) {
        let totalDue = callvalue + maxSubmissionCost;

        xif let Some(senderAcct) = account_deductFromEthBalance(accountStore_get(acctStore, sender), totalDue) {
            // We took maxSubmissionCost + callvalue from the sender.
            // We will distribute those funds as follows:
            //       submissionFee to the subFeeRecipient
            //       maxSubmissionCost-submissionFee to the creditBack address
            //       callvalue to the retryableTx we will create

            acctStore = accountStore_set(acctStore, sender, senderAcct);
            if (submissionFee > 0) {
                acctStore = accountStore_set(
                    acctStore,
                    subFeeRecipient,
                    account_addToEthBalance(accountStore_get(acctStore, subFeeRecipient), submissionFee)
                );
            }

            if (submissionFee < maxSubmissionCost) {
                acctStore = accountStore_set(
                    acctStore,
                    creditBack,
                    account_addToEthBalance(
                        accountStore_get(acctStore, creditBack),
                        maxSubmissionCost - submissionFee
                    )
                );
            }

            // Create a new retryable tx, holding the callvalue
            let (rbuf, txId) = retryBuffer_insertNew(
                accountStore_getRetryBuffer(acctStore),
                req.requestId,
                sender,
                destination,
                callvalue,
                beneficiary,
                calldata,
                req
            );
            acctStore = accountStore_setRetryBuffer(acctStore, rbuf);

            emitTxReceipt(
                req,
                const::TxResultCode_success,
                Some(bytearray_set256(bytearray_new(0), 0, txId)),
                None<EvmLogs>,
                None<GasUsage>,
                feeStats,
            );

            xif ((maxGasForImmediate > 0) && (maxGasForImmediate*gasPriceForImmediate >= gasPriceForImmediate)) { // 2nd check avoids overflow
                xif let Some(rtx) =  retryBuffer_get(accountStore_getRetryBuffer(acctStore), txId) {
                    xif let Some(uaStore) = accountStore_transferEthBalance(
                        acctStore,
                        sender,
                        creditBack,
                        maxGasForImmediate * gasPriceForImmediate,
                    ) {
                        acctStore = uaStore;

                        let immediateCalldata = bytearray_new(0);
                        immediateCalldata = bytearray_set256(
                            immediateCalldata,
                            0,
                            asm(256-32, const::funcCode_ArbRetryableTx_redeem) uint { shl },
                        );
                        immediateCalldata = bytearray_set256(immediateCalldata, 4, txId);

                        Some(
                            struct {
                                maxGas: maxGasForImmediate,
                                gasPrice: gasPriceForImmediate,
                                seqNum: None<uint>,
                                caller: sender,
                                calleeAddr: address(const::Address_ArbRetryableTx),
                                gasPayer: creditBack,
                                value: 0,
                                calldata: immediateCalldata,
                                nonMutating: false,
                                isConstructor: false,
                                incomingRequest: req with { requestId: uint(hash(bytes32(req.requestId), bytes32(1))) },
                                feeStats: txFeeStats_zero(),
                                fromRetryable: Some(rtx),
                            }
                        )
                    } else {
                        None<TxRequestData>
                    }
                } else {
                    None<TxRequestData>
                }
            } else {
                None<TxRequestData>
            }
        } else {
            emitTxReceipt(
                req,
                const::TxResultCode_insufficientBalance,
                None<ByteArray>,
                None<EvmLogs>,
                None<GasUsage>,
                feeStats,
            );
            None<TxRequestData>
        }
    } else {
        // submission cost was higher than the maximum allowed by the request
        emitTxReceipt(
            req,
            const::TxResultCode_noGasFunds,
            None<ByteArray>,
            None<EvmLogs>,
            None<GasUsage>,
            feeStats,
        );
        None<TxRequestData>
    };

    setGlobalAccountStore(acctStore);

    return ret;
}

public impure func redeemRetryableTxInTx(txToRedeem: uint) -> bool {
    let rbuf = retryBuffer_trimTwo(getRetryBufferInCurrentContext());
    return xif let Some(rtx) = retryBuffer_get(rbuf, txToRedeem) {
        xif let Some(rb) = retryBuffer_delete(rbuf, txToRedeem, false) {
            // we just deleted the tx, without a credit-back to the beneficiary
            // note that this delete will be discarded if the tx reverts
            setRetryBufferInCurrentContext(rb);
            evmCallStack_callRetryableTxAndReturn(rtx)
        } else {
            setRetryBufferInCurrentContext(rbuf);
            false
        }
    } else {
        setRetryBufferInCurrentContext(rbuf);
        false
    };
}
