//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use arbowner::arbowner_init;
use evmCallStack::evmCallStack_callHitError;

use std::bytearray::MarshalledBytes;
use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;
use std::bytearray::bytearray_get256;

use std::bytestream::ByteStream;
use std::bytestream::bytestream_new;
use std::bytestream::bytestream_get64;
use std::bytestream::bytestream_get256;
use std::bytestream::bytestream_skipBytes;

use gasAccounting::gasAccounting_setChargingParams;
use gasAccounting::gasAccounting_postInitMessage;


type ChainParams = struct {
    chainAddress: address,
    gracePeriodBlocks: uint,         // time validators are given to respond to an assertion
    arbGasSpeedLimitPerSecond: uint, // assumed max speed of nodes tracking this chain's VM
    maxExecutionSteps: uint,         // max number of steps in an assertion
    baseStake: uint,                 // base stake of a validator, in wei
    stakingToken: address,           // ERC-20 token used for staking; or zero if using ETH
    owner: address,                  // owner of the chain, who has admin privileges (or zero if there is no owner)
    secondsPerSend: option<uint>,    // issue at most one send per this many seconds
    defaultAggregator: address,      // default aggregator, for users who haven't specified one
}

var globalChainParams: option<ChainParams>;

public impure func chainParams_haveDoneInit() -> bool {
    return (unsafecast<any>(globalChainParams) != ()) && (globalChainParams != None<ChainParams>);
}

public impure func chainParams_init() {
    globalChainParams = None<ChainParams>;
}

public impure func haveReceivedChainInitMessage() -> bool {
    return globalChainParams != None<ChainParams>;
}

public impure func chainParams_gotParamsMessage(sender: address, data: ByteArray) {
    if (globalChainParams == None<ChainParams>) {
        arbowner_init();

        let arbGasSpeedLimitPerBlock = bytearray_get256(data, 32);
        globalChainParams = Some(struct{
            chainAddress: sender,
            gracePeriodBlocks: bytearray_get256(data, 0),
            arbGasSpeedLimitPerSecond: blocksToSeconds(arbGasSpeedLimitPerBlock),
            maxExecutionSteps: bytearray_get256(data, 2*32),
            baseStake: bytearray_get256(data, 3*32),
            stakingToken: address(bytearray_get256(data, 4*32)),
            owner: address(bytearray_get256(data, 5*32)),
            secondsPerSend: None<uint>,
            defaultAggregator: address(0),
        });

        // now read and process initialization options
        if let Some(stream) = bytestream_skipBytes(bytestream_new(data), 6*32) {
            loop {
                if let Some(ustr2) = doInitializationOption(stream) {
                    stream = ustr2;
                } else {
                    return;
                }
            }
        }
    }

    gasAccounting_postInitMessage();
}

impure func doInitializationOption(stream: ByteStream) -> option<ByteStream> {
    // process one initialization option
    // on success, return Some(updated stream)
    // on end-of-stream, return None

    let (ustr, optionId) = bytestream_get64(stream)?;
    stream = ustr;
    let (ustr, numPayloadBytes) = bytestream_get64(stream)?;
    stream = ustr;
    return xif (optionId == const::InitOption_setChargingParams) {
        if (numPayloadBytes != 6*32) {
            // unexpected payload size; discard the payload and ignore this option
            return bytestream_skipBytes(stream, numPayloadBytes);
        }
        let (ustr, speedLimitPerSecond) = bytestream_get256(stream)?;
        let (ustr, l1GasPerL2Tx) = bytestream_get256(ustr)?;
        let (ustr, l1GasPerL2Calldata) = bytestream_get256(ustr)?;
        let (ustr, l1GasPerStorage) = bytestream_get256(ustr)?;
        let (ustr, arbGasDivisor) = bytestream_get256(ustr)?;
        let (ustr, netFeeRecipientU) = bytestream_get256(ustr)?;
        let (ustr, congestionFeeRecipientU) = bytestream_get256(ustr)?;

        if let Some(params) = globalChainParams {
            globalChainParams = Some(params with {
                arbGasSpeedLimitPerSecond: speedLimitPerSecond
            });
        }

        gasAccounting_setChargingParams(
            l1GasPerL2Tx,
            l1GasPerL2Calldata,
            l1GasPerStorage,
            arbGasDivisor,
            address(netFeeRecipientU),
            address(congestionFeeRecipientU),
        );
        Some(ustr)
    } elseif (optionId == const::InitOption_setDefaultAggregator) {
        if (numPayloadBytes != 32) {
            // unexpected payload size; discard the payload and ignore this option
            return bytestream_skipBytes(stream, numPayloadBytes);
        }
        let (ustr, newDefaultAgg) = bytestream_get256(stream)?;
        chainParams_setDefaultAggregator(address(newDefaultAgg));
        Some(ustr)
    } else {
        // unrecognized option, discard it
        bytestream_skipBytes(stream, numPayloadBytes)
    };
}

public impure func chainParams_chainAddress() -> address {
    return xif let Some(params) = globalChainParams {
        params.chainAddress
    } else {
        // If we get here, the chain never received its initialization message.
        evmCallStack_callHitError(20);
        panic
    };
}

public impure func chainParams_chainId() -> uint {
    return uint(chainParams_chainAddress()) & 0xffffffffffff;  // chainID == low 48 bits of chainAddress
}

public impure func chainParams_speedLimitPerSecond() -> uint {
    return xif let Some(params) = globalChainParams {
        params.arbGasSpeedLimitPerSecond
    } else {
        const::DefaultSpeedLimitPerSecond
    };
}

public impure func chainParams_baseStake() -> (address, uint) {
    return xif let Some(params) = globalChainParams {
        (params.stakingToken, params.baseStake)
    } else {
        (address(0), 0)
    };
}

public impure func chainParams_getOwner() -> option<address> {
    return xif let Some(params) = globalChainParams {
        Some(params.owner)
    } else {
        None<address>
    };
}

public impure func chainParams_setOwner(newOwner: address) {
    if let Some(params) = globalChainParams {
        globalChainParams = Some(params with { owner: newOwner });
    }
}

public impure func chainParams_getDefaultAggregator() -> address {
    return xif let Some(params) = globalChainParams {
        params.defaultAggregator
    } else {
        address(0)
    };
}

public impure func chainParams_setDefaultAggregator(newDefault: address) {
    if let Some(params) = globalChainParams {
        globalChainParams = Some(params with { defaultAggregator: newDefault });
    }
}

public impure func chainParams_getSecondsPerSend() -> uint {
    return xif let Some(params) = globalChainParams {
        xif let Some(bps) = params.secondsPerSend {
            bps
        } else {
            blocksToSeconds(params.gracePeriodBlocks) / 3
        }
    } else {
        const::DefaultSecondsPerSend
    };
}

public impure func chainParams_setSecondsPerSend(bps: uint) -> option<()> {
    let sbps = None<uint>;
    if (bps != 0) {           // interpret interval=0 as a request for the default behavior
        sbps = Some(bps);
    }
    globalChainParams = Some(
        (globalChainParams?) with {
            secondsPerSend: sbps
        }
    );
    return Some(());
}

public func blocksToSeconds(numBlocks: uint) -> uint {
    return numBlocks * const::SecondsPerBlockNumerator / const::SecondsPerBlockDenominator;
}
