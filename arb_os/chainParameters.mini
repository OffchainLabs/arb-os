//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type ByteArray;
import type MarshalledBytes;
import type ByteArray;
import type ByteStream;

import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytestream_new(contents: ByteArray) -> ByteStream;
import func bytestream_skipBytes(bs: ByteStream, nbytes: uint) -> option<ByteStream>;
import func bytestream_get64(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_get256(bs: ByteStream) -> option<(ByteStream, uint)>;

import func inbox_startSequencer(sequencerAddress: uint, blocksOfDelay: uint) -> option<()>;

import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;

import func evmCallStack_callHitError(reason: uint);

type ChainParams = struct {
    chainAddress: address,
    gracePeriodSec: uint,
    arbGasSpeedLimit: uint,
    maxExecutionSteps: uint,
    baseStake: uint,
    owner: address
}

var globalChainParams: option<ChainParams>;

public impure func chainParams_init() {
    globalChainParams = None<ChainParams>;
}

public impure func chainParams_gotParamsMessage(sender: address, data: MarshalledBytes) {
    if (globalChainParams == None<ChainParams>) {
        let ba = bytearray_unmarshalBytes(data);
        globalChainParams = Some(struct{
            chainAddress: sender,
            gracePeriodSec: bytearray_get256(ba, 0) / 1000,
            arbGasSpeedLimit: bytearray_get256(ba, 32) * 1000,
            maxExecutionSteps: bytearray_get256(ba, 2*32),
            baseStake: bytearray_get256(ba, 3*32),
            owner: address(bytearray_get256(ba, 4*32)),
        });

        // now read and process initialization options
        if let Some(stream) = bytestream_skipBytes(bytestream_new(payload), 5*32) {
            loop {
                if let Some(ustr2) = doInitializationOption(stream) {
                    stream = ustr2;
                } else {
                    return;
                }
            }
        }
    }
}

func doInitializationOption(stream: ByteStream) -> option<ByteStream> {
    // process one initialization option
    // on success, return Some(updated stream)
    // on end-of-stream, return None

    let (ustr, optionId) = bytestream_get64(stream)?;
    stream = ustr;
    let (ustr, numPayloadBytes) = bytestream_get64(stream)?;
    stream = ustr;
    if (optionId == 1) {   // option: tx sequencer
        if (numPayloadBytes != 40) {
            return None;
        }
        let (ustr, sequencerAddress) = bytestream_get256(stream)?;
        stream = ustr;
        let (ustr, blocksOfDelay) = bytestream_get64(stream)?;
        stream = ustr;
        inbox_startSequencer(sequencerAddress, blocksOfDelay)?;
        return Some(stream);
    } else {
        // unrecognized option, discard it
        return bytestream_skipBytes(stream, numPayloadBytes);
    }
}

public impure func chainParams_chainAddress() -> address {
    if let Some(params) = globalChainParams {
        return params.chainAddress;
    } else {
        // If we get here, the chain never received its initialization message.
        evmCallStack_callHitError(15);
        panic;
    }
}

public impure func chainParams_chainId() -> uint {
    return uint(chainParams_chainAddress()) & 0xffffffffffff;  // chainID == low 48 bits of chainAddress
}

public impure func chainParams_speedLimitPerSecond() -> uint {
    if let Some(params) = globalChainParams {
        return params.arbGasSpeedLimit;
    } else {
        return 100000000;  // reasonable default
    }
}

public impure func chainParams_baseStake() -> uint {
    if let Some(params) = globalChainParams {
        return params.baseStake;
    } else {
        return 0;
    }
}
