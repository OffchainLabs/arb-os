//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::rlp::rlp_encodeAndHashMessageInfoForSignature;
use std::rlp::SignedTx;

use chainParameters::chainParams_chainId;


public view throw func recoverSigner(tx: SignedTx) -> option<address> {
    let rlpHashForSig = if (tx.v == 27) || (tx.v == 28) {
        rlp_encodeAndHashMessageInfoForSignature(tx, None)  // non-EIP155 signature
    } else {
        rlp_encodeAndHashMessageInfoForSignature(tx, Some(chainParams_chainId()))  // EIP155 signature
    };

    let signer = asm(
        tx.r,
        tx.s,
        1 - (tx.v % 2),
        rlpHashForSig,
    ) address { ecrecover };

    if signer == address(0) {
        None
    } else {
        Some(signer)
    }
}
