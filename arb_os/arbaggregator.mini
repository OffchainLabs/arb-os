//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::account_setAggregatorToPay;
use accounts::account_getAggregatorToPayAsOption;
use accounts::account_getFeeCollector;
use accounts::account_setFeeCollector;

use arbowner::revertIfNotOwner;

use chainParameters::chainParams_getDefaultAggregator;
use chainParameters::chainParams_setDefaultAggregator;
use chainParameters::hasChainOwnerPrivileges;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallStack_getAccountInCurrentContext;
use evmCallStack::evmCallStack_setAccountInCurrentContext;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_revertIfStatic;

use gasAccounting::gasAccounting_getTxBaseFeeL1Gas;
use gasAccounting::gasAccounting_setTxBaseFeeL1Gas;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;


public view write func arbaggregator_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if bytearray_size(calldata) < 4 {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let funcCode = (bytearray_get256(calldata, 0) >> 224);
        if funcCode == const::funcCode_ArbAggregator_getPreferredAggregator {
            arbaggregator_getPreferredAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_setPreferredAggregator {
            arbaggregator_setPreferredAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_getDefaultAggregator {
            arbaggregator_getDefaultAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_setDefaultAggregator {
            arbaggregator_setDefaultAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_getFeeCollector {
            arbaggregator_getFeeCollector(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_setFeeCollector {
            arbaggregator_setFeeCollector(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_getTxBaseFee {
            arbaggregator_getTxBaseFee(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbAggregator_setTxBaseFee {
            arbaggregator_setTxBaseFee(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownPc(1, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(26);
    }
}

// function getPreferredAggregator(address addr) external view returns (address, bool);
view write func arbaggregator_getPreferredAggregator(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(10, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let maybePA = account_getAggregatorToPayAsOption(
        evmCallStack_getAccountInCurrentContext(addr)
    );
    let (prefAgg, isDefault) = if let Some(pa) = maybePA {
        (pa, false)
    } else {
        (chainParams_getDefaultAggregator(), true)
    };
    let mem = bytearray_set256(bytearray_set256(bytearray_new(0), 0, uint(prefAgg)), 32, uint(isDefault));
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 2*32);
    } else {
        evmOp_revert_knownPc(11, 0, 0);
    }
}

// function setPreferredAggregator(address prefAgg) external;
view write func arbaggregator_setPreferredAggregator(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(20, 0, 0);
    }
    let caller = evmCallFrame_getCaller(topFrame);
    let newPA = address(bytearray_get256(calldata, 4));
    let newVal = if newPA == address(0) {
         None
     } else {
         Some(newPA)
     };
    evmCallStack_setAccountInCurrentContext(
        caller,
        account_setAggregatorToPay(
            evmCallStack_getAccountInCurrentContext(caller),
            newVal,
        )
    );
    evmOp_return(0, 0);
}

// function getDefaultAggregator() external view returns (address);
view write func arbaggregator_getDefaultAggregator(_topFrame: EvmCallFrame, calldata: ByteArray) {  // () -> address
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(30, 0, 0);
    }
    let mem = bytearray_set256(bytearray_new(0), 0, uint(chainParams_getDefaultAggregator()));
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(31, 0, 0);
    }
}

// function setDefaultAggregator(address newDefault) external;
view write func arbaggregator_setDefaultAggregator(topFrame: EvmCallFrame, calldata: ByteArray) { // (address)
    evmOp_revertIfStatic();
    let caller = evmCallFrame_getCaller(topFrame);
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(40, 0, 0);
    }
    if caller != chainParams_getDefaultAggregator() {
        revertIfNotOwner(caller);
    }
    let newDefaultAgg = address(bytearray_get256(calldata, 4));
    chainParams_setDefaultAggregator(newDefaultAgg);
    evmOp_return(0, 0);
}

// function getFeeCollector(address aggregator) external view returns (address);
view write func arbaggregator_getFeeCollector(_topFrame: EvmCallFrame, calldata: ByteArray) {  // (address) -> address
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(50, 0, 0);
    }
    let aggregator = address(bytearray_get256(calldata, 4));
    let feeCollector = account_getFeeCollector(evmCallStack_getAccountInCurrentContext(aggregator));
    let mem = bytearray_set256(bytearray_new(0), 0, uint(feeCollector));
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(51, 0, 0);
    }
}

// function setFeeCollector(address aggregator, address newFeeCollector) external;
view write func arbaggregator_setFeeCollector(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    let caller = evmCallFrame_getCaller(topFrame);
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(60, 0, 0);
    }
    let aggregator = address(bytearray_get256(calldata, 4));
    let newCollector = address(bytearray_get256(calldata, 36));

    let aggAcct = evmCallStack_getAccountInCurrentContext(aggregator);
    let oldCollector = account_getFeeCollector(aggAcct);

    if caller != oldCollector {
        revertIfNotOwner(caller);
    }
    evmCallStack_setAccountInCurrentContext(aggregator, account_setFeeCollector(aggAcct, newCollector));

    evmOp_return(0, 0);
}

// function getTxBaseFee(address aggregator) external view returns (uint);
view write func arbaggregator_getTxBaseFee(_topFrame: EvmCallFrame, calldata: ByteArray) { // (address) -> uint
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(70, 0, 0);
    }
    let aggregator = address(bytearray_get256(calldata, 4));
    let result = gasAccounting_getTxBaseFeeL1Gas(Some(aggregator));
    if evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, result)) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(61, 0, 0);
    }
}

// function setTxBaseFee(address aggregator, uint feeInL1Gas) external;
view write func arbaggregator_setTxBaseFee(topFrame: EvmCallFrame, calldata: ByteArray) { // (address, uint)
    let caller = evmCallFrame_getCaller(topFrame);
    if bytearray_size(calldata) != 68 {
        evmOp_revert_knownPc(80, 0, 0);
    }
    let aggregator = address(bytearray_get256(calldata, 4));
    let fee = bytearray_get256(calldata, 36);

    if (caller != aggregator) && !hasChainOwnerPrivileges(caller) {
        evmOp_revert_knownPc(81, 0, 0);
    }

    if gasAccounting_setTxBaseFeeL1Gas(aggregator, fee) == Some(()) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownPc(82, 0, 0);
    }
}
