//
// Copyright 2020-2022, Offchain Labs, Inc. All rights reserved.
//


use std::bytearray::ByteArray;

use accounts::safeGetGlobalAccountStore;
use accounts::safeSetGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_set;
use accounts::account_fetchAndIncrSeqNum;
use accounts::account_hasContract;
use accounts::account_getNextSeqNum;

use evmCallStack::initEvmCallStack;
use evmCallStack::initEvmCallStackForConstructor;

use gasAccounting::TxFeeStats;

use output::emitTxReceipt;

use retrybuffer::RetryableTx;

use std::bytearray::bytearray_new;

use std::rlp::keccakOfRlpEncodedAddrUintPair;

use inbox::IncomingRequest;


view write throw func fetchAndIncrSequenceNum(addr: address) -> uint {
    // Fetch sequence number, and increment it
    let globalAS = safeGetGlobalAccountStore();
    let (ret, updatedAcct) = account_fetchAndIncrSeqNum(
        accountStore_get(globalAS, addr)
    );
    safeSetGlobalAccountStore(
        accountStore_set(
            globalAS,
            addr,
            updatedAcct
        )
    );
    ret
}

type TxRequestData = struct {
    maxGas: uint,                           // max gas amount remaining from original request
    gasPrice: uint,                         // max gas price sender is willing to pay
    seqNum: option<uint>,                   // sequence number, or None if tx doesn't have one
    caller: address,
    calleeAddr: address,
    gasPayer: address,                      // who is paying for gas for this tx
    value: uint,                            // ETH amount passed with call
    calldata: ByteArray,
    nonMutating: bool,
    isConstructor: bool,
    incomingRequest: IncomingRequest,
    feeStats: TxFeeStats,
    fromRetryable: option<RetryableTx>,
    originalCaller: address,
};

// Process a request.
// Return None if message is malformatted; otherwise handle errors and return Some(()); if no error, never return
public view write throw func processL2Request(request: TxRequestData) -> option<()> {
    if let Some(sequenceNum) = request.seqNum {
        let expectedSeqNum = account_getNextSeqNum(accountStore_get(safeGetGlobalAccountStore(), request.caller));
        if sequenceNum != expectedSeqNum {
            // bad sequence number error
            emitTxReceipt(
                request.incomingRequest,
                if sequenceNum < expectedSeqNum {
                    const::TxResultCode_sequenceNumberTooLow
                } else {
                    const::TxResultCode_sequenceNumberTooHigh
                },
                None,
                None,
                None,
                request.feeStats,
                true,
                request.originalCaller,
            );
            return Some(());
        }
    }

    if request.calleeAddr == address(0) {
        // this is a constructor call
        if request.nonMutating {
            // revert error (tried to call constructor in a non-mutating call)
            emitTxReceipt(
                request.incomingRequest,
                const::TxResultCode_revert,
                None,
                None,
                None,
                request.feeStats,
                true,
                request.originalCaller,
            );
            return Some(());
        }

        let codeBytes = request.calldata;
        set request.calldata = bytearray_new(0);

        if request.seqNum == None<uint> {
            // constructor always increments the caller's sequence number
            set request.seqNum = Some(fetchAndIncrSequenceNum(request.caller));
        }

        set request.calleeAddr = address(keccakOfRlpEncodedAddrUintPair(request.caller, request.seqNum?));

        if account_hasContract(accountStore_get(safeGetGlobalAccountStore(), request.calleeAddr)) {
            // there's already an account at that address, revert the call
            // should never happen -- this is just defensive code
            emitTxReceipt(
                request.incomingRequest,
                const::TxResultCode_cannotDeployAtAddress,
                None,
                None,
                None,
                request.feeStats,
                true,
                request.originalCaller,
            );
            return Some(());
        } else {
            initEvmCallStackForConstructor(
                codeBytes,
                request,
                None,
            );
            //NOTREACHED
        }
    } else {
        // this is a non-constructor call
        let callKind = if request.nonMutating {
            const::EVMCallType_staticcall
        } else {
            const::EVMCallType_call
        };

        initEvmCallStack(callKind, request, None, None);  // should never return
    }

    //NOTREACHED
    return error;
}
