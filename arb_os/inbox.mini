//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type Queue;
import func queue_new() -> Queue;
import func queue_isEmpty(q: Queue) -> bool;
import func queue_get(q: Queue) -> option<(Queue, any)>;
import func queue_put(q: Queue, val: any) -> Queue;

import impure func chainParams_gotParamsMessage(sender: address, data: MarshalledBytes);

import type MarshalledBytes;

// This is the structure that the Arbitrum protocol gives us, for each incoming message.
// It is declared identically in messages.mini
type MessageFromL1 = struct {
    kind: uint,               // type of message
    blockNumber: uint,        // block number of the L1 block
    timestamp: uint,          // timestamp of the L1 block
    sender: address,          // address of the sender
    inboxSeqNum: uint,        // sequence number in L1 inbox
    msgData: MarshalledBytes  // contents of the message, as a marshalled bytearray
}

type Inbox = struct {
    queue: Queue,     // Queue of messages that haven't yet been retrieved from the inbox
    slowLane: option<SlowLaneInfo>,
    lastBlockNumSeen: uint,  // latest blocknum that has arrived from L1
}

// If there is a slow lane, the idea is that messages from one address, the "fastLaneOwner",
//     get processed right away, and messages from everyone else get put in a slow lane queue.
// Messages in the slow lane queue are delayed by some number of block times (blocksOfDelay),
//     and they're re-tagged with the delayed block time.
// Messages are guaranteed to be produced by inbox_get in block-number order (after re-tagging).

type SlowLaneInfo = struct {
    fastLaneOwner: address,
    blocksOfDelay: uint,
    queue: Queue
}

var globalInbox: Inbox;

public impure func inbox_init() {
    globalInbox = struct {
        queue: queue_new(),
        slowLane: None<SlowLaneInfo>,
        blockNum: 0,
        timestamp: 0,
    };
}

public impure inbox_startSlowLane(fastLaneOwner: address, blocksOfDelay: uint) -> option<()> {
    if (globalInbox.slowLane == None<SlowLaneInfo>) {
        globalInbox = globalInbox with {
            slowLane: struct {
                fastLaneOwner: fastLaneOwner,
                blocksOfDelay: blocksOfDelay,
                queue: queue_new(),
            }
        };
        return Some(());
    } else {
        return None;
    }
}

public impure func inbox_get() -> MessageFromL1 {
    // Get the next message, in order of arrival (as modified by the slow lane delay).
    // If no messages are available, this will block until one becomes available.

    loop {
        let inbox = globalInbox;
        let msg = None<MessageFromL1>;
        if (! queue_isEmpty(inbox.queue) {

        } else {
            if let Some(res) = getFromSlowLane(inbox) {

            }
        }
        while (queue_isEmpty(inbox.queue)) {
            inbox = getFromL1Inbox(inbox);
        }
        let (updatedQ, ret,) = queueGetOrDie(inbox.queue);
        let ebMsg = unsafecast<MessageFromL1>(ret);

        globalInbox = inbox with { queue: updatedQ };

        if (ebMsg.kind == 4) {
            chainParams_gotParamsMessage(ebMsg.sender, ebMsg.msgData);
        } else {
            return ebMsg;
        }
    }
}

func queueGetOrDie(q: Queue) -> (Queue, any) {
    if let Some(res) = queue_get(q) {
        return res;
    } else {
        panic;
    }
}

// InboxCell is the structure that the Arbitrum protocol uses to combine multiple messages
//     when they arrive in the inbox together.
// This is basically a linked list, but in reverse order (newest message at head of list).
type InboxCell = struct {
    rest: any,   // really an InboxCell, but language doesn't allow recursive types
    msg: any,
}

impure func getFromL1Inbox(inbox: Inbox) -> Inbox {
    // Get one or more messages from the L1 inbox, and append them to the inbox.
    // If there are no messages available in the L1 inbox, this blocks until one is available.
    let newMsgs = asm() InboxCell { inbox };
    inbox = addInboxToQueue(inbox, newMsgs);
    return inbox;
}

func addInboxToQueue(inbox: Inbox, newMsgs: InboxCell) -> Inbox {
    // Unpack messages from an InboxCell list, and append them to an Inbox.
    // Because the messages are in the linked list in newest-first order, we need to reverse the order.
    if (unsafecast<any>(newMsgs) == null) {
        return inbox;
    } else {
        inbox = addInboxToQueue(inbox, unsafecast<InboxCell>(newMsgs.rest));
        let qp = queue_put(inbox.queue, newMsgs.msg);
        return inbox with { queue: qp };
    }
}

public impure func inbox_currentTimestamp() -> uint {
    return globalInbox.timestamp;
}

public impure func inbox_currentBlockNumber() -> uint {
    return globalInbox.blockNum;
}
