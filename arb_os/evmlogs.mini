//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

// This structure accumulates the EVM log items emitted by a transaction.
// It uses the same representation as the Arbitrum protocol, so this structure can be emitted
//       directly without needing any more encoding.

type EvmLogs = struct {
    last: any,
    rest: any,
}

public func evmlogs_empty() -> EvmLogs {  // make an empty log-sequence
    return unsafecast<EvmLogs>(());
}

public func evmlogs_appendAny(logs: EvmLogs, item: any) -> EvmLogs {
    // Append an item to the end of a log-sequence, returning the updated log-sequence.
    return struct {
        last: item,
        rest: logs,
    };
}

public func evmlogs_numLogs(logs: EvmLogs) -> uint {
    let ret = 0;
    loop {
        if (logs == unsafecast<EvmLogs>(())) {
            return ret;
        } else {
            ret = ret + 1;
            logs = unsafecast<EvmLogs>(logs.rest);
        }
    }
}