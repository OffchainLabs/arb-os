//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This structure accumulates the EVM log items emitted by a transaction.
// It uses the same representation as the Arbitrum protocol, so this structure can be emitted
//       directly without needing any more encoding.

type EvmLogs = struct {
    last: any,
    rest: any,
}

public func evmlogs_empty() -> EvmLogs {  // make an empty log-sequence
    return unsafecast<EvmLogs>(());
}

public func evmlogs_appendAny(logs: EvmLogs, item: any) -> EvmLogs {
    // Append an item to the end of a log-sequence, returning the updated log-sequence.
    return struct {
        last: item,
        rest: logs,
    };
}

public func evmlogs_numLogs(logs: EvmLogs) -> uint {
    let ret = 0;
    loop {
        if (logs == unsafecast<EvmLogs>(())) {
            return ret;
        } else {
            ret = ret + 1;
            logs = unsafecast<EvmLogs>(logs.rest);
        }
    }
}