//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

// This structure accumulates the EVM log items emitted by a transaction.
// It uses the same representation as the Arbitrum protocol, so this structure can be emitted
//       directly without needing any more encoding.

type EvmLogs = struct {
    last: any,
    rest: EvmLogs,
};

public func evmlogs_empty() -> EvmLogs {  // make an empty log-sequence
    return unsafecast<EvmLogs>(());
}

func evmlogs_isEmpty(logs: EvmLogs) -> bool {
    return logs == unsafecast<EvmLogs>(());
}

public func evmlogs_appendAny(logs: EvmLogs, item: any) -> EvmLogs {
    // Append an item to the end of a log-sequence, returning the updated log-sequence.
    return struct {
        last: item,
        rest: logs,
    };
}

public func evmlogs_numLogs(logs: EvmLogs) -> uint {
    let ret = 0;
    return xloop {
        if (evmlogs_isEmpty(logs )) {
            return ret;
        } else {
            ret = ret + 1;
            logs = logs.rest;
        }
    };
}

type EvmLogMapFunc = view write func(any, any) -> (any, any);  // (log, state) -> (updatedLog, updatedState)

public view write func evmlogs_forall(logs: EvmLogs, mapFunc: EvmLogMapFunc, state: any) -> (EvmLogs, any) {
    // reverse the order of the logs, so we can apply the map to them in order
    let revLogs = evmlogs_empty();
    while (! evmlogs_isEmpty(logs)) {
        revLogs = evmlogs_appendAny(revLogs, logs.last);
        logs = logs.rest;
    }

    // now reverse the list again, applying the map to each item
    // list ends up in its original order, but with the map having been applied to each log
    while (! evmlogs_isEmpty(revLogs)) {
        let (updatedLog, ustate) = mapFunc(revLogs.last, state);
        state = ustate;
        logs = evmlogs_appendAny(logs, updatedLog);
        revLogs = revLogs.rest;
    }

    return (logs, state);
}
