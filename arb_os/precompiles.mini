//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type EvmCallFrame;
import type AccountStore;
import type ByteArray;

import impure func evmCallStack_topFrame() -> option<EvmCallFrame>;
import impure func evmCallStack_setTopFrameMemory(mem: ByteArray) -> bool;
import func evmCallFrame_getCalldata(frame: EvmCallFrame) -> ByteArray;

import impure func evmOp_return(offset: uint, nbytes: uint);
import impure func evmOp_revert(offset: uint, nbytes: uint);

import func getGlobalAccountStore() -> AccountStore;
import func setGlobalAccountStore(acctStore: AccountStore);
import func accountStore_createBuiltinContract(acctStore: AccountStore, addr: address, entryPoint: impure func()) -> option<AccountStore>;

import func bytearray_new(capacity: uint) -> ByteArray;
import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, offset: uint) -> uint;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytearray_set256(ba: ByteArray, offset: uint, val: uint) -> ByteArray;


import impure func arbsys_txcall();


public impure func precompiles_init(acctStore: AccountStore) -> option<AccountStore> {
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x01),
        precompile_0x01,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(100),
        arbsys_txcall,
    )?;
    return Some(acctStore);
}

public impure func precompile_0x01() {  // ecrecover
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 4*32) {
            evmOp_revert(0, 0);
        }
        let h = bytearray_get256(calldata, 0);
        let v = bytearray_getByte(calldata, 32);
        let r = bytearray_get256(calldata, 2*32);
        let s = bytearray_get256(calldata, 3*32);
        let addr = asm(r, s, v-27, h) address { ecrecover };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(bytearray_new(0), 0, 32)
        );
        if (success) {
            evmOp_return(0, 32);
        }
    }

    evmOp_revert(0, 0);
}