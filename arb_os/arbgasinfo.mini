//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use chainParameters::chainParams_get;
use chainParameters::chainParams_getOrDie;
use accounts::account_getAggregatorToPay;

use chainParameters::hasChainOwnerPrivileges;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallStack_getCurrentTxFeeStats;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_revertIfStatic;

use gasAccounting::gasAccounting_getPricesInWei;
use gasAccounting::gasAccounting_getPricesInArbGas;
use gasAccounting::getGasAccountingParams;
use gasAccounting::getL1GasPriceEstimate;
use gasAccounting::setL1GasPriceEstimate;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;


public view write func arbgasinfo_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if bytearray_size(calldata) < 4 {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let funcCode = (bytearray_get256(calldata, 0) >> 224);
        if funcCode == const::funcCode_ArbGasInfo_getPricesInWei {
            arbgasinfo_getPricesInWei(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getPricesInWeiWithAggregator {
            arbgasinfo_getPricesInWeiWithAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getPricesInArbGas {
            arbgasinfo_getPricesInArbGas(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getPricesInArbGasWithAggregator {
            arbgasinfo_getPricesInArbGasWithAggregator(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getGasAccountingParams {
            arbgasinfo_getGasAccountingParams(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_setL1GasPriceEstimate {
            arbgasinfo_setL1GasPriceEstimate(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getL1GasPriceEstimate {
            arbgasinfo_getL1GasPriceEstimate(topFrame, calldata);
        } else if funcCode == const::funcCode_ArbGasInfo_getCurrentTxL1GasFees {
            arbgasinfo_getCurrentTxL1GasFees(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownPc(1, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(25);
    }
}

// function getPricesInWeiWithAggregator(address aggregator) external view returns (uint, uint, uint, uint, uint, uint);
view write func arbgasinfo_getPricesInWeiWithAggregator(_topFrame: EvmCallFrame, calldata: ByteArray) {  // (address) -> (uint, ..., uint)
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(10, 0, 0);
    }
    let aggregatorAddr = address(bytearray_get256(calldata, 4));
    getPricesInWeiCommon(aggregatorAddr);
}

// function getPricesInWei() external view returns (uint, uint, uint, uint, uint, uint);
view write func arbgasinfo_getPricesInWei(topFrame: EvmCallFrame, calldata: ByteArray) { // () -> (uint, ..., uint)
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(9, 0, 0);
    }
    let caller = evmCallFrame_getCaller(topFrame);
    getPricesInWeiCommon(account_getAggregatorToPay(evmCallFrame_getAccount(topFrame, caller)));
}

view write func getPricesInWeiCommon(aggregatorAddr: address) {
    let gasPricesWei = gasAccounting_getPricesInWei(aggregatorAddr);
    let mem = bytearray_new(0);
    mem = bytearray_set256(mem, 0*32, gasPricesWei.0);
    mem = bytearray_set256(mem, 1*32, gasPricesWei.1);
    mem = bytearray_set256(mem, 2*32, gasPricesWei.2);
    mem = bytearray_set256(mem, 3*32, gasPricesWei.3);
    mem = bytearray_set256(mem, 4*32, gasPricesWei.4);
    mem = bytearray_set256(mem, 5*32, gasPricesWei.5);
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 6*32);
    } else {
        evmOp_revert_knownPc(11, 0, 0);
    }
}

// function getPricesInArbGasWithAggregator(address aggregator) external view returns (uint, uint, uint);
view write func arbgasinfo_getPricesInArbGasWithAggregator(_topFrame: EvmCallFrame, calldata: ByteArray) {  // () -> (uint, uint, uint)
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(20, 0, 0);
    }
    let aggregatorAddr = address(bytearray_get256(calldata, 4));
    getPricesInArbGasCommon(aggregatorAddr);
}

// function getPricesInArbGas() external view returns (uint, uint, uint);
view write func arbgasinfo_getPricesInArbGas(topFrame: EvmCallFrame, calldata: ByteArray) { // () -> (uint, ..., uint)
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(9, 0, 0);
    }
    let caller = evmCallFrame_getCaller(topFrame);
    getPricesInArbGasCommon(account_getAggregatorToPay(evmCallFrame_getAccount(topFrame, caller)));
}

view write func getPricesInArbGasCommon(aggregatorAddr: address) {
    let gasPricesWei = gasAccounting_getPricesInArbGas(aggregatorAddr);
    let mem = bytearray_new(0);
    mem = bytearray_set256(mem, 0*32, gasPricesWei.0);
    mem = bytearray_set256(mem, 1*32, gasPricesWei.1);
    mem = bytearray_set256(mem, 2*32, gasPricesWei.2);
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 3*32);
    } else {
        evmOp_revert_knownPc(21, 0, 0);
    }
}

// function getGasAccountingParams() external view returns (uint, uint, uint);
view write func arbgasinfo_getGasAccountingParams(_topFrame: EvmCallFrame, calldata: ByteArray) { // () -> (uint, uint, uint)
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(30, 0, 0);
    }
    let params = getGasAccountingParams();
    let mem = bytearray_new(0);
    mem = bytearray_set256(mem, 0*32, params.0);
    mem = bytearray_set256(mem, 1*32, params.1);
    mem = bytearray_set256(mem, 2*32, params.2);
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 3*32);
    } else {
        evmOp_revert_knownPc(31, 0, 0);
    }
}

// function getL1GasPriceEstimate() external view returns(uint);
view write func arbgasinfo_getL1GasPriceEstimate(_topFrame: EvmCallFrame, calldata: ByteArray) {
    if bytearray_size(calldata) != 4 {
        evmOp_revert_knownPc(40, 0, 0);
    }
    let mem = bytearray_set256(bytearray_new(0), 0, getL1GasPriceEstimate());
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownPc(40, 0, 0);
    }
}

// function setL1GasPriceEstimate(uint priceInWei) external;
view write func arbgasinfo_setL1GasPriceEstimate(topFrame: EvmCallFrame, calldata: ByteArray) {
    evmOp_revertIfStatic();
    let caller = evmCallFrame_getCaller(topFrame);
    let oracle = if let Some(addrAsUint) = chainParams_get(const::Atom_Param_GasPriceOracle) {
        address(addrAsUint)
    } else {
        address(0)
    };
    if (! hasChainOwnerPrivileges(caller)) && (caller != oracle) {
        evmOp_revert_knownPc(50, 0, 0);
    }
    if bytearray_size(calldata) != 36 {
        evmOp_revert_knownPc(51, 0, 0);
    }
    let priceInWei = bytearray_get256(calldata, 4);
    setL1GasPriceEstimate(priceInWei);
    evmOp_return(0, 0);
}

// function getCurrentTxL1GasFees() external view returns(uint, uint);
view write func arbgasinfo_getCurrentTxL1GasFees(_topFrame: EvmCallFrame, _calldata: ByteArray) {
    let txFeeStats = evmCallStack_getCurrentTxFeeStats();
    let mem = bytearray_set256(
        bytearray_set256(
            bytearray_new(0),
            0,
            txFeeStats.weiPaid.tx,
        ),
        32,
        txFeeStats.weiPaid.calldataUnit,
    );
    if evmCallStack_setTopFrameMemory(mem) {
        evmOp_return(0, 64);
    } else {
        evmOp_revert_knownPc(60, 0, 0);
    }
}
