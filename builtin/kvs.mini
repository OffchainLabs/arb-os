//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

// This implements a key-value store.
// Uses of the map data structure in Mini compile into calls to this package.
// So please consult with the team before changing APIs or semantics of any of this.

// These functions can also be imported and called directly by Mini programs.

// Normal Mini code won't ever "reach inside" a map to disturb the integrity of this
// data structure. But note that use of unsafe language features could lead to structural
// damage to the internals of a map, leading to erroneous results or even a panic.


// This is an efficient implementation of a key-value store,
//       with an implied "default value" of None<any> for uninitialized keys.
//
// It's built as an 8-ary trie, using hash(key) as the index for trie-ing.
// Each "slot" in the trie is either:
// *  0, which means an empty subtree
// *  a 2-tuple (key, value), which means that pair is the only item in the subtree
// *  an 8-tuple, with each entry referencing a subtree
// To find a key's path down the tree, compute hash(key). Then the low-order 3 bits
//     gives the branch to take at top-level, the next 3 bits give the branch to take at
//     the second level, and so on.

// There's a lot of unsafecast and assembly code in here, because of the decision to
//     have multiple node types that can live in the same slots. This was done because
//     it's more space-efficient than alternative approaches, which is important when the
//     structure gets large.

type Kvs = struct {
    tree: KvsNode,
    size: uint,
}

type KvsNode = [8]any

type KvsCell = struct {
    key: any,
    value: option<any>,
}


public func builtin_kvsNew() -> Kvs {
    return struct {
        tree: unsafecast<KvsNode>(0),
        size: 0,
    };
}

public func builtin_kvsSize(kvs: Kvs) -> uint {
    return kvs.size;
}

public func builtin_kvsGet(kvs: Kvs, key: any) -> option<any> {
    let hashedKey = uint(hash(key));
    let s = kvs.tree;
    return xloop {
        if (s == unsafecast<KvsNode>(0)) {
            // empty subtree
            return None;
        } elseif (asm(s,) uint { length } == 2) {
            // singleton item
            if (key == unsafecast<KvsCell>(s).key) {
                return unsafecast<KvsCell>(s).value;
            } else {
                return None;
            }
        } else {
            // still at an internal node of the tree; walk downward and try again
            s = unsafecast<KvsNode>(s[hashedKey & 0x7]);
            hashedKey = hashedKey / 8;
        }
    };
}

public func builtin_kvsHasKey(kvs: Kvs, key: any) -> bool {
    return builtin_kvsGet(kvs, key) != None<any>;
}

// An Unwinder remembers how to reassemble the tree as we traverse back up it.
// During a set operation, we walk down the tree to the leaf, building an Unwinder as we go.
// Then we use the Unwinder to guide our traversal back up the tree and the remind us of the
//      writes we need to do on that upward traversal.
type Unwinder = struct {
    kvs: [8]any,
    index: uint,
    next: option<Unwinder>,
}

public func builtin_kvsSet(s: Kvs, key: any, value: any) -> Kvs {
    let (utree, maybeUnwinder, delta) = kvs_set2(s.tree, key, Some(value));
    return xloop {
        if let Some(unwinder) = maybeUnwinder {
            utree = unwinder.kvs with {
                [unwinder.index] = utree
            };
            maybeUnwinder = unwinder.next;
        } else {
            if (delta != int(0)) {
                s = s with { size: uint(int(s.size) + delta) };
            }
            return s with { tree: utree };
        }
    };
}

func kvs_set2(s: KvsNode, key: any, value: option<any>) -> (KvsNode, option<Unwinder>, int) {
    let hashedKey = uint(hash(key));
    let reductionFactor = 1;
    let unwinder = None<Unwinder>;
    return xloop {
        if (s == unsafecast<KvsNode>(0)) {
            if (value == None<any>) {
                // writing None to an empty slot; do nothing
                return (s, unwinder, int(0));
            } else {
                // writing non-zero to empty slot; create a singleton item
                return (
                    unsafecast<KvsNode>(
                        struct {
                            key: key,
                            value: value
                        }
                    ),
                    unwinder,
                    int(1)
                );
            }
        } elseif (asm(s,) uint { length } == 2) {
            let kid = unsafecast<KvsCell>(s);
            if (kid.key == key) {
                // overwriting an existing item with same key
                if (value == None<any>) {
                    // delete existing item
                    return (
                        unsafecast<KvsNode>(0),
                        unwinder,
                        -1s,
                    );
                } else {
                    // update existing item with new value
                    return (
                        unsafecast<KvsNode>(kid with { value: value }),
                        unwinder,
                        int(0)
                    );
                }
            } else {
                // already found a singleton here
                // create new internal node and push singleton into it
                // then loop back and try again
                s = unsafecast<KvsNode>(newfixedarray(8, 0)) with {
                    [(uint(hash(kid.key))/reductionFactor) & 0x7] = kid
                };
            }
        } else {
            // traversing an internal node
            // update the unwinder so we know what to do on the way back up
            // then move one level down the tree
            let slot = (hashedKey / reductionFactor) & 0x7;
            unwinder = Some(struct {
                kvs: s,
                index: slot,
                next: unwinder,
            });
            s = unsafecast<KvsNode>(s[slot]);
            reductionFactor = reductionFactor * 8;
        }
    };
}

public func builtin_kvsDelete(s: Kvs, key: uint) -> Kvs {
    let (utree, maybeUnwinder, delta) = kvs_set2(s.tree, key, None<any>);
    return xloop {
        if let Some(unwinder) = maybeUnwinder {
            utree = unwinder.kvs with {
                [unwinder.index] = utree
            };
            maybeUnwinder = unwinder.next;
        } else {
            if (delta != int(0)) {
                s = s with { size: uint(int(s.size) + delta) };
            }
            return s with { tree: utree };
        }
    };
}

// apply a closure to all items in the storageMap, in sequence
// for each item (k,v) we'll do:  state <- closure(k, v, state)
// this will return the state at the end
// order of traversal is deterministic but weird and subject to change,
//       so callers are advised not to rely on the ordering
public func builtin_kvsForall(
    s: Kvs,
    closure: func(any, any, any) -> any,
    state: any
) -> any {
    return kvs_forall_tree(s.tree, closure, state);
}

func kvs_forall_tree(
    t: KvsNode,
    closure: func(any, any, any) -> any,
    state: any
) -> any {
    return xif (t == unsafecast<KvsNode>(0)) {
        state
    } elseif (asm(t,) uint { length } == 2) {
        xif let Some(val) = unsafecast<KvsCell>(t).value {
            closure(
                unsafecast<KvsCell>(t).key,
                val,
                state
            )
        } else {
            // structure was corrupted, best to just ignore this cell
            state
        }
   } else {
        let i = 0;
        while (i < 8) {
            state = kvs_forall_tree(unsafecast<KvsNode>(t[i]), closure, state);
            i = i+1;
        }
        state
   };
}
