//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

var global0: uint;
var global1: uint;
var global2: any;
var global3: (uint, int, bool);
var global4: int;
var global5: bool;
var global6: uint;
var global7: []uint;
var global8: [13]uint;
var global9: uint;

type MyType = uint
var global10: MyType;


impure func main() {
    asm(tests(),) { log };
}

impure func tests() -> uint {
    global0 = 3;
    if (global0 != 3) {
        return 1;
    }
        
    global9 = 4;
    if (global9 != 4) {
        return 2;
    }

    global0 = 5;
    global9 = 4;
    if (global0 != 5) {
        return 3;
    }

    global9 = 6;
    global0 = 3;
    if (global9 != 6) {
        return 4;
    }

    let sum = asm (4, 0, 3) uint {
        plus
        plus
    };
    if (sum != 7) {
        return 5;
    }

    global10 = 3;
    if (global10 != 3) {
        return 6;
    }

    let farr = newfixedarray(25, 0);
    farr = farr with { [0] = 33 };
    if (farr[0] != 33) {
        return 7;
    }
 
    let farr2 = newfixedarray(42, 0);
    farr2 = farr2 with { [21] = 44 };
    farr2 = farr2 with { [0] = 33 };
    if (farr2[21] != 44) {
        return 8;
    }

    if (asm(16, 0) uint { byte } != 0) {
        return 10;
    }
    if (asm(30, 65534) uint { byte } != 255) {
        return 11;
    }

    if (asm(31, 0xfe985018496551) uint { byte } != 0x51) {
        return 12;
    }

    if (asm(29, 0xfe985018496551) uint { byte } != 0x49) {
        return 13;
    }

    if (asm(0, ~0) uint { byte } != 0xff) {
        return 14;
    }

    if ((asm(12, 0xbe) uint { shl }) != 0xbe000) {
        return 15;
    }

    if (asm(5, 32*581249+17) uint { shr } != 581249) {
        return 16;
    }

    if (asm(244, ~0) uint { shr } != 0xfff) {
        return 17;
    }

    let testInt = int(0);
    testInt = testInt - int(16395);
    let shiftedTestInt = asm(159, testInt) int { shl };
    let shiftedBack = asm(159, shiftedTestInt) int { sar };
    if (shiftedBack != testInt) {
        return 18;
    }

    if (asm(5, 32*581249+17) uint { sar } != 581249) {
        return 19;
    }

    if (asm(1, 0xffff) uint { signextend } != ~0) {
        return 20;
    }

    if (asm(2, 0xffff) uint { signextend } != 0xffff) {
        return 21;
    }

    if (asm(1, 0x63ff) uint { signextend } != 0x63ff) {
        return 22;
    }

    let a = -int(1);
    let b = int(0);
    if (b < a) {
        return 23;
    }
    if (a >= b) {
        return 24;
    }

    return struct9test();
}

func struct9test() -> uint {
    let _theStruct = struct {
        field0: 0,
        field1: 1,
        field2: 2,
        field3: 3,
        field4: 4,
        field5: 5,
        field6: 6,
        field7: 7,
        field8: 8,
    };

    return 0;
}